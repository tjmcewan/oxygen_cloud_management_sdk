#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ApiObjectType:
  """
  Indicates whether an object represents a file, folder or space *
  """
  FILE = 0
  FOLDER = 1
  SPACE = 2

  _VALUES_TO_NAMES = {
    0: "FILE",
    1: "FOLDER",
    2: "SPACE",
  }

  _NAMES_TO_VALUES = {
    "FILE": 0,
    "FOLDER": 1,
    "SPACE": 2,
  }

class ApiFileType:
  """
  Indicates whether an object represents a file or a folder
  """
  FILE = 0
  FOLDER = 1

  _VALUES_TO_NAMES = {
    0: "FILE",
    1: "FOLDER",
  }

  _NAMES_TO_VALUES = {
    "FILE": 0,
    "FOLDER": 1,
  }


class ApiObject:
  """
  Attributes:
   - id
   - name
   - type
   - createdTimestamp
   - modifiedTimestamp
   - createdByUserName
   - modifiedByUserName
   - sizeInByte
   - versionId
   - parentId
   - deleted
   - spaceId
   - repositoryNodeServiceId
   - ownerOxygenId
   - canWrite
   - canManage
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I64, 'createdTimestamp', None, None, ), # 4
    (5, TType.I64, 'modifiedTimestamp', None, None, ), # 5
    (6, TType.STRING, 'createdByUserName', None, None, ), # 6
    (7, TType.STRING, 'modifiedByUserName', None, None, ), # 7
    (8, TType.I64, 'sizeInByte', None, None, ), # 8
    (9, TType.I32, 'versionId', None, None, ), # 9
    (10, TType.STRING, 'parentId', None, None, ), # 10
    (11, TType.BOOL, 'deleted', None, None, ), # 11
    (12, TType.STRING, 'spaceId', None, None, ), # 12
    (13, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 13
    (14, TType.STRING, 'ownerOxygenId', None, None, ), # 14
    (15, TType.BOOL, 'canWrite', None, None, ), # 15
    (16, TType.BOOL, 'canManage', None, None, ), # 16
  )

  def __init__(self, id=None, name=None, type=None, createdTimestamp=None, modifiedTimestamp=None, createdByUserName=None, modifiedByUserName=None, sizeInByte=None, versionId=None, parentId=None, deleted=None, spaceId=None, repositoryNodeServiceId=None, ownerOxygenId=None, canWrite=None, canManage=None,):
    self.id = id
    self.name = name
    self.type = type
    self.createdTimestamp = createdTimestamp
    self.modifiedTimestamp = modifiedTimestamp
    self.createdByUserName = createdByUserName
    self.modifiedByUserName = modifiedByUserName
    self.sizeInByte = sizeInByte
    self.versionId = versionId
    self.parentId = parentId
    self.deleted = deleted
    self.spaceId = spaceId
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.ownerOxygenId = ownerOxygenId
    self.canWrite = canWrite
    self.canManage = canManage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.createdTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.modifiedTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.createdByUserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.modifiedByUserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.sizeInByte = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.versionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.parentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.deleted = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.ownerOxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 15:
        if ftype == TType.BOOL:
          self.canWrite = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 16:
        if ftype == TType.BOOL:
          self.canManage = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiObject')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.type != None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.createdTimestamp != None:
      oprot.writeFieldBegin('createdTimestamp', TType.I64, 4)
      oprot.writeI64(self.createdTimestamp)
      oprot.writeFieldEnd()
    if self.modifiedTimestamp != None:
      oprot.writeFieldBegin('modifiedTimestamp', TType.I64, 5)
      oprot.writeI64(self.modifiedTimestamp)
      oprot.writeFieldEnd()
    if self.createdByUserName != None:
      oprot.writeFieldBegin('createdByUserName', TType.STRING, 6)
      oprot.writeString(self.createdByUserName)
      oprot.writeFieldEnd()
    if self.modifiedByUserName != None:
      oprot.writeFieldBegin('modifiedByUserName', TType.STRING, 7)
      oprot.writeString(self.modifiedByUserName)
      oprot.writeFieldEnd()
    if self.sizeInByte != None:
      oprot.writeFieldBegin('sizeInByte', TType.I64, 8)
      oprot.writeI64(self.sizeInByte)
      oprot.writeFieldEnd()
    if self.versionId != None:
      oprot.writeFieldBegin('versionId', TType.I32, 9)
      oprot.writeI32(self.versionId)
      oprot.writeFieldEnd()
    if self.parentId != None:
      oprot.writeFieldBegin('parentId', TType.STRING, 10)
      oprot.writeString(self.parentId)
      oprot.writeFieldEnd()
    if self.deleted != None:
      oprot.writeFieldBegin('deleted', TType.BOOL, 11)
      oprot.writeBool(self.deleted)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 12)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 13)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.ownerOxygenId != None:
      oprot.writeFieldBegin('ownerOxygenId', TType.STRING, 14)
      oprot.writeString(self.ownerOxygenId)
      oprot.writeFieldEnd()
    if self.canWrite != None:
      oprot.writeFieldBegin('canWrite', TType.BOOL, 15)
      oprot.writeBool(self.canWrite)
      oprot.writeFieldEnd()
    if self.canManage != None:
      oprot.writeFieldBegin('canManage', TType.BOOL, 16)
      oprot.writeBool(self.canManage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiSpace:
  """
  Space

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>id</code> (String)</dt>
     <dd>id of space</dd>

     <dt><code>name</code> (String)</dt>
     <dd>name of space</dd>

     <dt><code>ownerLoginId</code> (String)</dt>
     <dd>loginId of space owner</dd>

     <dt><code>writePermitted</code> (boolean)</dt>
     <dd>whether you have permission to make changes to files/folders in this space</dd>

     <dt><code>managePermitted</code> (boolean)</dt>
     <dd>whether you have permission to make changes to properties and subscriptions of this space</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - id
   - name
   - ownerLoginId
   - ownerUserOid
   - repoNodeServiceId
   - writePermitted
   - managePermitted
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'ownerLoginId', None, None, ), # 3
    (4, TType.STRING, 'ownerUserOid', None, None, ), # 4
    (5, TType.STRING, 'repoNodeServiceId', None, None, ), # 5
    (6, TType.BOOL, 'writePermitted', None, None, ), # 6
    (7, TType.BOOL, 'managePermitted', None, None, ), # 7
  )

  def __init__(self, id=None, name=None, ownerLoginId=None, ownerUserOid=None, repoNodeServiceId=None, writePermitted=None, managePermitted=None,):
    self.id = id
    self.name = name
    self.ownerLoginId = ownerLoginId
    self.ownerUserOid = ownerUserOid
    self.repoNodeServiceId = repoNodeServiceId
    self.writePermitted = writePermitted
    self.managePermitted = managePermitted

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ownerLoginId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ownerUserOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.repoNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.writePermitted = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.managePermitted = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiSpace')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.ownerLoginId != None:
      oprot.writeFieldBegin('ownerLoginId', TType.STRING, 3)
      oprot.writeString(self.ownerLoginId)
      oprot.writeFieldEnd()
    if self.ownerUserOid != None:
      oprot.writeFieldBegin('ownerUserOid', TType.STRING, 4)
      oprot.writeString(self.ownerUserOid)
      oprot.writeFieldEnd()
    if self.repoNodeServiceId != None:
      oprot.writeFieldBegin('repoNodeServiceId', TType.STRING, 5)
      oprot.writeString(self.repoNodeServiceId)
      oprot.writeFieldEnd()
    if self.writePermitted != None:
      oprot.writeFieldBegin('writePermitted', TType.BOOL, 6)
      oprot.writeBool(self.writePermitted)
      oprot.writeFieldEnd()
    if self.managePermitted != None:
      oprot.writeFieldBegin('managePermitted', TType.BOOL, 7)
      oprot.writeBool(self.managePermitted)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiSpaceInfo:
  """
  Attributes:
   - oid
   - name
   - description
   - ownerOxygenId
   - ownerOid
   - storageName
   - capacity
   - utilized
   - listed
   - writableDefault
   - repositoryNodeId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'oid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
    (4, TType.STRING, 'ownerOxygenId', None, None, ), # 4
    (5, TType.STRING, 'ownerOid', None, None, ), # 5
    (6, TType.STRING, 'storageName', None, None, ), # 6
    (7, TType.I32, 'capacity', None, None, ), # 7
    (8, TType.DOUBLE, 'utilized', None, None, ), # 8
    (9, TType.BOOL, 'listed', None, None, ), # 9
    (10, TType.BOOL, 'writableDefault', None, None, ), # 10
    (11, TType.STRING, 'repositoryNodeId', None, None, ), # 11
  )

  def __init__(self, oid=None, name=None, description=None, ownerOxygenId=None, ownerOid=None, storageName=None, capacity=None, utilized=None, listed=None, writableDefault=None, repositoryNodeId=None,):
    self.oid = oid
    self.name = name
    self.description = description
    self.ownerOxygenId = ownerOxygenId
    self.ownerOid = ownerOid
    self.storageName = storageName
    self.capacity = capacity
    self.utilized = utilized
    self.listed = listed
    self.writableDefault = writableDefault
    self.repositoryNodeId = repositoryNodeId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.oid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ownerOxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ownerOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.storageName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.capacity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.DOUBLE:
          self.utilized = iprot.readDouble();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.listed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.writableDefault = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.repositoryNodeId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiSpaceInfo')
    if self.oid != None:
      oprot.writeFieldBegin('oid', TType.STRING, 1)
      oprot.writeString(self.oid)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.description != None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.ownerOxygenId != None:
      oprot.writeFieldBegin('ownerOxygenId', TType.STRING, 4)
      oprot.writeString(self.ownerOxygenId)
      oprot.writeFieldEnd()
    if self.ownerOid != None:
      oprot.writeFieldBegin('ownerOid', TType.STRING, 5)
      oprot.writeString(self.ownerOid)
      oprot.writeFieldEnd()
    if self.storageName != None:
      oprot.writeFieldBegin('storageName', TType.STRING, 6)
      oprot.writeString(self.storageName)
      oprot.writeFieldEnd()
    if self.capacity != None:
      oprot.writeFieldBegin('capacity', TType.I32, 7)
      oprot.writeI32(self.capacity)
      oprot.writeFieldEnd()
    if self.utilized != None:
      oprot.writeFieldBegin('utilized', TType.DOUBLE, 8)
      oprot.writeDouble(self.utilized)
      oprot.writeFieldEnd()
    if self.listed != None:
      oprot.writeFieldBegin('listed', TType.BOOL, 9)
      oprot.writeBool(self.listed)
      oprot.writeFieldEnd()
    if self.writableDefault != None:
      oprot.writeFieldBegin('writableDefault', TType.BOOL, 10)
      oprot.writeBool(self.writableDefault)
      oprot.writeFieldEnd()
    if self.repositoryNodeId != None:
      oprot.writeFieldBegin('repositoryNodeId', TType.STRING, 11)
      oprot.writeString(self.repositoryNodeId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiUserVolumeInfo:
  """
  Attributes:
   - ownerOxygenId
   - ownerOid
   - storageName
   - capacity
   - utilized
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'ownerOxygenId', None, None, ), # 1
    (2, TType.STRING, 'ownerOid', None, None, ), # 2
    (3, TType.STRING, 'storageName', None, None, ), # 3
    (4, TType.I32, 'capacity', None, None, ), # 4
    (5, TType.DOUBLE, 'utilized', None, None, ), # 5
  )

  def __init__(self, ownerOxygenId=None, ownerOid=None, storageName=None, capacity=None, utilized=None,):
    self.ownerOxygenId = ownerOxygenId
    self.ownerOid = ownerOid
    self.storageName = storageName
    self.capacity = capacity
    self.utilized = utilized

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.ownerOxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.ownerOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.storageName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.capacity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.DOUBLE:
          self.utilized = iprot.readDouble();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiUserVolumeInfo')
    if self.ownerOxygenId != None:
      oprot.writeFieldBegin('ownerOxygenId', TType.STRING, 1)
      oprot.writeString(self.ownerOxygenId)
      oprot.writeFieldEnd()
    if self.ownerOid != None:
      oprot.writeFieldBegin('ownerOid', TType.STRING, 2)
      oprot.writeString(self.ownerOid)
      oprot.writeFieldEnd()
    if self.storageName != None:
      oprot.writeFieldBegin('storageName', TType.STRING, 3)
      oprot.writeString(self.storageName)
      oprot.writeFieldEnd()
    if self.capacity != None:
      oprot.writeFieldBegin('capacity', TType.I32, 4)
      oprot.writeI32(self.capacity)
      oprot.writeFieldEnd()
    if self.utilized != None:
      oprot.writeFieldBegin('utilized', TType.DOUBLE, 5)
      oprot.writeDouble(self.utilized)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiFile:
  """
  Cloud file/folder

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>id</code> (String)</dt>
     <dd>unique id of file/folder</dd>

     <dt><code>name</code> (String)</dt>
     <dd>name of file/folder</dd>

     <dt><code>type</code> ({@link ApiFileType})</dt>
     <dd>indicates whether this represents a file or a folder</dd>

     <dt><code>createdTimestamp</code> (long)</dt>
     <dd>date/time that this file/folder was created</dd>

     <dt><code>modifiedTimestamp</code> (long)</dt>
     <dd>date/time that this file/folder was last modified</dd>

     <dt><code>createdByUserName</code> (String)</dt>
     <dd>name of the user that created this file/folder</dd>

     <dt><code>modifiedByUserName</code> (String)</dt>
     <dd>name of the user that last modified this file/folder</dd>

     <dt><code>sizeInByte</code> (long)</dt>
     <dd>size of the this file in bytes (N/A for folders)</dd>

     <dt><code>versionId</code> (String)</dt>
     <dd>id of the current version of this file (N/A for folders)</dd>

     <dt><code>parentId</code> (String)</dt>
     <dd>id of the parent file/folder</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - id
   - name
   - type
   - createdTimestamp
   - modifiedTimestamp
   - createdByUserName
   - modifiedByUserName
   - sizeInByte
   - versionId
   - parentId
   - deleted
   - spaceId
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.I64, 'createdTimestamp', None, None, ), # 4
    (5, TType.I64, 'modifiedTimestamp', None, None, ), # 5
    (6, TType.STRING, 'createdByUserName', None, None, ), # 6
    (7, TType.STRING, 'modifiedByUserName', None, None, ), # 7
    (8, TType.I64, 'sizeInByte', None, None, ), # 8
    (9, TType.I32, 'versionId', None, None, ), # 9
    (10, TType.STRING, 'parentId', None, None, ), # 10
    (11, TType.BOOL, 'deleted', None, None, ), # 11
    (12, TType.STRING, 'spaceId', None, None, ), # 12
    (13, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 13
  )

  def __init__(self, id=None, name=None, type=None, createdTimestamp=None, modifiedTimestamp=None, createdByUserName=None, modifiedByUserName=None, sizeInByte=None, versionId=None, parentId=None, deleted=None, spaceId=None, repositoryNodeServiceId=None,):
    self.id = id
    self.name = name
    self.type = type
    self.createdTimestamp = createdTimestamp
    self.modifiedTimestamp = modifiedTimestamp
    self.createdByUserName = createdByUserName
    self.modifiedByUserName = modifiedByUserName
    self.sizeInByte = sizeInByte
    self.versionId = versionId
    self.parentId = parentId
    self.deleted = deleted
    self.spaceId = spaceId
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.createdTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.modifiedTimestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.createdByUserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.modifiedByUserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.sizeInByte = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I32:
          self.versionId = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.parentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.BOOL:
          self.deleted = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiFile')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.type != None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.createdTimestamp != None:
      oprot.writeFieldBegin('createdTimestamp', TType.I64, 4)
      oprot.writeI64(self.createdTimestamp)
      oprot.writeFieldEnd()
    if self.modifiedTimestamp != None:
      oprot.writeFieldBegin('modifiedTimestamp', TType.I64, 5)
      oprot.writeI64(self.modifiedTimestamp)
      oprot.writeFieldEnd()
    if self.createdByUserName != None:
      oprot.writeFieldBegin('createdByUserName', TType.STRING, 6)
      oprot.writeString(self.createdByUserName)
      oprot.writeFieldEnd()
    if self.modifiedByUserName != None:
      oprot.writeFieldBegin('modifiedByUserName', TType.STRING, 7)
      oprot.writeString(self.modifiedByUserName)
      oprot.writeFieldEnd()
    if self.sizeInByte != None:
      oprot.writeFieldBegin('sizeInByte', TType.I64, 8)
      oprot.writeI64(self.sizeInByte)
      oprot.writeFieldEnd()
    if self.versionId != None:
      oprot.writeFieldBegin('versionId', TType.I32, 9)
      oprot.writeI32(self.versionId)
      oprot.writeFieldEnd()
    if self.parentId != None:
      oprot.writeFieldBegin('parentId', TType.STRING, 10)
      oprot.writeString(self.parentId)
      oprot.writeFieldEnd()
    if self.deleted != None:
      oprot.writeFieldBegin('deleted', TType.BOOL, 11)
      oprot.writeBool(self.deleted)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 12)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 13)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiFileChangeList:
  """
  Change list of cloud files/folders

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>changed</code> (boolean)</dt>
     <dd>whether the operation discovered one or more file/folder changes since given timestamp</dd>

     <dt><code>files</code> ({@link java.util.List}<{@link ApiFile}>)</dt>
     <dd>(when <code>changed</code> is true) the list of files found under given parameters</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - changed
   - files
  """

  thrift_spec = (
    None, # 0
    (1, TType.BOOL, 'changed', None, None, ), # 1
    (2, TType.LIST, 'files', (TType.STRUCT,(ApiFile, ApiFile.thrift_spec)), None, ), # 2
  )

  def __init__(self, changed=None, files=None,):
    self.changed = changed
    self.files = files

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.BOOL:
          self.changed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.files = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = ApiFile()
            _elem5.read(iprot)
            self.files.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiFileChangeList')
    if self.changed != None:
      oprot.writeFieldBegin('changed', TType.BOOL, 1)
      oprot.writeBool(self.changed)
      oprot.writeFieldEnd()
    if self.files != None:
      oprot.writeFieldBegin('files', TType.LIST, 2)
      oprot.writeListBegin(TType.STRUCT, len(self.files))
      for iter6 in self.files:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiDownload:
  """
  File download info

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>id</code> (String)</dt>
     <dd>id of download session</dd>

     <dt><code>downloadURL</code> (String)</dt>
     <dd>One-time-use download link where file content can be streamed down from storage connector with an {@link java.io.InputStream}</dd>

     <dt><code>sizeInByte</code> (long)</dt>
     <dd>Size of file content to be streamed</dd>

     <dt><code>versionId</code> (String)</dt>
     <dd>id of the current version of this file</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - downloadURL
   - sizeInByte
   - versionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'downloadURL', None, None, ), # 1
    (2, TType.I64, 'sizeInByte', None, None, ), # 2
    (3, TType.STRING, 'versionId', None, None, ), # 3
  )

  def __init__(self, downloadURL=None, sizeInByte=None, versionId=None,):
    self.downloadURL = downloadURL
    self.sizeInByte = sizeInByte
    self.versionId = versionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.downloadURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.sizeInByte = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.versionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiDownload')
    if self.downloadURL != None:
      oprot.writeFieldBegin('downloadURL', TType.STRING, 1)
      oprot.writeString(self.downloadURL)
      oprot.writeFieldEnd()
    if self.sizeInByte != None:
      oprot.writeFieldBegin('sizeInByte', TType.I64, 2)
      oprot.writeI64(self.sizeInByte)
      oprot.writeFieldEnd()
    if self.versionId != None:
      oprot.writeFieldBegin('versionId', TType.STRING, 3)
      oprot.writeString(self.versionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiUpload:
  """
  File upload info

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>id</code> (String)</dt>
     <dd>id of upload session</dd>

     <dt><code>uploadURL</code> (String)</dt>
     <dd>One-time-use upload link where file content can be streamed up to storage connector with an {@link java.io.OutputStream}</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - id
   - uploadURL
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'id', None, None, ), # 1
    (2, TType.STRING, 'uploadURL', None, None, ), # 2
  )

  def __init__(self, id=None, uploadURL=None,):
    self.id = id
    self.uploadURL = uploadURL

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.uploadURL = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiUpload')
    if self.id != None:
      oprot.writeFieldBegin('id', TType.STRING, 1)
      oprot.writeString(self.id)
      oprot.writeFieldEnd()
    if self.uploadURL != None:
      oprot.writeFieldBegin('uploadURL', TType.STRING, 2)
      oprot.writeString(self.uploadURL)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
