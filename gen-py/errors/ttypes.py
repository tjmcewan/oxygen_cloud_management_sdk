#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ApiInvalidInputErrorCode:
  ACCOUNT_ID_IS_REQUIRED = 0
  INVALID_ACCOUNT_ID = 1
  INVALID_ACCOUNT_ID_OR_EMAIL = 2
  INVALID_ACCOUNT_ID_OR_LOGIN_ID = 3
  INVALID_EMAIL = 4
  INVALID_LOGIN_CREDENTIALS_INFORMATION = 5
  INVALID_LOGIN_ID = 6
  INVALID_LOGIN_ID_OR_PASSWORD = 7
  INVALID_NAME = 8
  INVALID_PASSWORD_FORMAT = 9
  LOGIN_ID_IS_ALREADY_TAKEN = 10
  PRECONDITION_FAILED = 11

  _VALUES_TO_NAMES = {
    0: "ACCOUNT_ID_IS_REQUIRED",
    1: "INVALID_ACCOUNT_ID",
    2: "INVALID_ACCOUNT_ID_OR_EMAIL",
    3: "INVALID_ACCOUNT_ID_OR_LOGIN_ID",
    4: "INVALID_EMAIL",
    5: "INVALID_LOGIN_CREDENTIALS_INFORMATION",
    6: "INVALID_LOGIN_ID",
    7: "INVALID_LOGIN_ID_OR_PASSWORD",
    8: "INVALID_NAME",
    9: "INVALID_PASSWORD_FORMAT",
    10: "LOGIN_ID_IS_ALREADY_TAKEN",
    11: "PRECONDITION_FAILED",
  }

  _NAMES_TO_VALUES = {
    "ACCOUNT_ID_IS_REQUIRED": 0,
    "INVALID_ACCOUNT_ID": 1,
    "INVALID_ACCOUNT_ID_OR_EMAIL": 2,
    "INVALID_ACCOUNT_ID_OR_LOGIN_ID": 3,
    "INVALID_EMAIL": 4,
    "INVALID_LOGIN_CREDENTIALS_INFORMATION": 5,
    "INVALID_LOGIN_ID": 6,
    "INVALID_LOGIN_ID_OR_PASSWORD": 7,
    "INVALID_NAME": 8,
    "INVALID_PASSWORD_FORMAT": 9,
    "LOGIN_ID_IS_ALREADY_TAKEN": 10,
    "PRECONDITION_FAILED": 11,
  }

class ApiSystemsErrorCode:
  ACCOUNT_IS_DELETED = 0
  ACCOUNT_IS_DISABLED = 1
  DUPLICATE_ENTRY = 2
  OBJECT_ALREADY_DELETED = 3
  OBJECT_NOT_FOUND = 4
  STORAGE_LIMIT_EXCEEDED = 5
  USER_ALREADY_DELETED_OR_DISABLED = 6
  USER_ALREADY_EXISTS = 7
  USER_IS_DELETED = 8
  USER_IS_DISABLED = 9
  USER_IS_NOT_ACTIVATED = 10
  USER_NOT_FOUND = 11
  CONNECTION_EXCEPTION = 12
  INVALID_ACTIVATION_CODE = 13
  INVALID_AUTHENTICATION_TOKEN_ID = 14
  INVALID_LOGIN_URL = 15
  UPGRADE_REQUIRED = 16

  _VALUES_TO_NAMES = {
    0: "ACCOUNT_IS_DELETED",
    1: "ACCOUNT_IS_DISABLED",
    2: "DUPLICATE_ENTRY",
    3: "OBJECT_ALREADY_DELETED",
    4: "OBJECT_NOT_FOUND",
    5: "STORAGE_LIMIT_EXCEEDED",
    6: "USER_ALREADY_DELETED_OR_DISABLED",
    7: "USER_ALREADY_EXISTS",
    8: "USER_IS_DELETED",
    9: "USER_IS_DISABLED",
    10: "USER_IS_NOT_ACTIVATED",
    11: "USER_NOT_FOUND",
    12: "CONNECTION_EXCEPTION",
    13: "INVALID_ACTIVATION_CODE",
    14: "INVALID_AUTHENTICATION_TOKEN_ID",
    15: "INVALID_LOGIN_URL",
    16: "UPGRADE_REQUIRED",
  }

  _NAMES_TO_VALUES = {
    "ACCOUNT_IS_DELETED": 0,
    "ACCOUNT_IS_DISABLED": 1,
    "DUPLICATE_ENTRY": 2,
    "OBJECT_ALREADY_DELETED": 3,
    "OBJECT_NOT_FOUND": 4,
    "STORAGE_LIMIT_EXCEEDED": 5,
    "USER_ALREADY_DELETED_OR_DISABLED": 6,
    "USER_ALREADY_EXISTS": 7,
    "USER_IS_DELETED": 8,
    "USER_IS_DISABLED": 9,
    "USER_IS_NOT_ACTIVATED": 10,
    "USER_NOT_FOUND": 11,
    "CONNECTION_EXCEPTION": 12,
    "INVALID_ACTIVATION_CODE": 13,
    "INVALID_AUTHENTICATION_TOKEN_ID": 14,
    "INVALID_LOGIN_URL": 15,
    "UPGRADE_REQUIRED": 16,
  }

class ApiRuleErrorCode:
  ACCOUNT_EXTERNAL_AUTHENTICATION_DISABLED = 0
  ACCOUNT_INTERNAL_AUTHENTICATION_DISABLED = 1
  ACTIVATION_CODE_REACHED_MAXIMUM_NUMBER_OF_USES = 2
  INVALID_API_KEY = 3
  PERMISSION_DENIED = 4
  POSSIBLE_SECURITY_ATTACK = 5
  SUBSCRIPTION_VIOLATION = 6
  USER_ACCOUNT_LOCKED = 7
  USER_CANNOT_LOGIN = 8
  USER_CREATION_FAILED_ON_INSUFFICIENT_STORAGE = 9
  USER_DISABLED_FOR_AUTHENTICATED_EXTERNAL_LOGIN = 10
  USER_LIMIT_EXCEEDED = 11
  USER_NOT_ACTIVATED_FOR_AUTHENTICATED_EXTERNAL_LOGIN = 12
  USER_NOT_FOUND_FOR_AUTHENTICATED_EXTERNAL_LOGIN = 13
  DEVICE_BLACKLISTED = 14
  DEVICE_NOT_REGISTERED = 15
  LDAP_USER_NOT_MAPPED = 16
  API_KEY_AND_DEVICE_TYPE_MISMATCH = 17

  _VALUES_TO_NAMES = {
    0: "ACCOUNT_EXTERNAL_AUTHENTICATION_DISABLED",
    1: "ACCOUNT_INTERNAL_AUTHENTICATION_DISABLED",
    2: "ACTIVATION_CODE_REACHED_MAXIMUM_NUMBER_OF_USES",
    3: "INVALID_API_KEY",
    4: "PERMISSION_DENIED",
    5: "POSSIBLE_SECURITY_ATTACK",
    6: "SUBSCRIPTION_VIOLATION",
    7: "USER_ACCOUNT_LOCKED",
    8: "USER_CANNOT_LOGIN",
    9: "USER_CREATION_FAILED_ON_INSUFFICIENT_STORAGE",
    10: "USER_DISABLED_FOR_AUTHENTICATED_EXTERNAL_LOGIN",
    11: "USER_LIMIT_EXCEEDED",
    12: "USER_NOT_ACTIVATED_FOR_AUTHENTICATED_EXTERNAL_LOGIN",
    13: "USER_NOT_FOUND_FOR_AUTHENTICATED_EXTERNAL_LOGIN",
    14: "DEVICE_BLACKLISTED",
    15: "DEVICE_NOT_REGISTERED",
    16: "LDAP_USER_NOT_MAPPED",
    17: "API_KEY_AND_DEVICE_TYPE_MISMATCH",
  }

  _NAMES_TO_VALUES = {
    "ACCOUNT_EXTERNAL_AUTHENTICATION_DISABLED": 0,
    "ACCOUNT_INTERNAL_AUTHENTICATION_DISABLED": 1,
    "ACTIVATION_CODE_REACHED_MAXIMUM_NUMBER_OF_USES": 2,
    "INVALID_API_KEY": 3,
    "PERMISSION_DENIED": 4,
    "POSSIBLE_SECURITY_ATTACK": 5,
    "SUBSCRIPTION_VIOLATION": 6,
    "USER_ACCOUNT_LOCKED": 7,
    "USER_CANNOT_LOGIN": 8,
    "USER_CREATION_FAILED_ON_INSUFFICIENT_STORAGE": 9,
    "USER_DISABLED_FOR_AUTHENTICATED_EXTERNAL_LOGIN": 10,
    "USER_LIMIT_EXCEEDED": 11,
    "USER_NOT_ACTIVATED_FOR_AUTHENTICATED_EXTERNAL_LOGIN": 12,
    "USER_NOT_FOUND_FOR_AUTHENTICATED_EXTERNAL_LOGIN": 13,
    "DEVICE_BLACKLISTED": 14,
    "DEVICE_NOT_REGISTERED": 15,
    "LDAP_USER_NOT_MAPPED": 16,
    "API_KEY_AND_DEVICE_TYPE_MISMATCH": 17,
  }

class ApiSessionErrorCode:
  INVALID_USER_SESSION_ID = 0
  USER_SESSION_EXPIRED = 1
  USER_SESSION_NOT_FOUND = 2

  _VALUES_TO_NAMES = {
    0: "INVALID_USER_SESSION_ID",
    1: "USER_SESSION_EXPIRED",
    2: "USER_SESSION_NOT_FOUND",
  }

  _NAMES_TO_VALUES = {
    "INVALID_USER_SESSION_ID": 0,
    "USER_SESSION_EXPIRED": 1,
    "USER_SESSION_NOT_FOUND": 2,
  }


class ApiUnexpectedException(Exception):
  """
  Error indicating that something unexpected happened in the system and it is unrecoverable.

  <p>Handle this by letting the user know that support should be contacted to resolve this problem.</p>
  """

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiUnexpectedException')
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiInvalidInputException(Exception):
  """
  Error indicating that something is wrong with what the user typed in.

  <p>Handle this by asking the user to fix what he/she has entered and try again.</p>

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>errorCode</code> ({@link ApiInvalidInputErrorCode})</dt>
     <dd>Specific reason for this error</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - errorCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errorCode', None, None, ), # 1
  )

  def __init__(self, errorCode=None,):
    self.errorCode = errorCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiInvalidInputException')
    if self.errorCode != None:
      oprot.writeFieldBegin('errorCode', TType.I32, 1)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiSystemsException(Exception):
  """
  Error indicating that the back-end systems experienced a problem trying to complete the requested operation (though it could be a valid, expected result, e.g. cannot find child files under a folder).

  <p>Handle this by asking the user to optionally change his/her request or operation arguments in order to retrieve desired results.</p>

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>errorCode</code> ({@link ApiSystemsErrorCode})</dt>
     <dd>Specific reason for this error</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - errorCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errorCode', None, None, ), # 1
  )

  def __init__(self, errorCode=None,):
    self.errorCode = errorCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiSystemsException')
    if self.errorCode != None:
      oprot.writeFieldBegin('errorCode', TType.I32, 1)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiRuleException(Exception):
  """
  Error indicating that user is not permitted to perform an operation due to a rule violation.

  <p>Handle this by letting the user know that the operation cannot be done.</p>

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>errorCode</code> ({@link ApiRuleErrorCode})</dt>
     <dd>Specific reason for this error</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - errorCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errorCode', None, None, ), # 1
  )

  def __init__(self, errorCode=None,):
    self.errorCode = errorCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiRuleException')
    if self.errorCode != None:
      oprot.writeFieldBegin('errorCode', TType.I32, 1)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ApiSessionException(Exception):
  """
  Error indicating that the session is invalid or expired.

  <p>Handle this by letting the user login again.</p>

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>errorCode</code> ({@link ApiSessionErrorCode})</dt>
     <dd>Specific reason for this error</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - errorCode
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'errorCode', None, None, ), # 1
  )

  def __init__(self, errorCode=None,):
    self.errorCode = errorCode

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.errorCode = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiSessionException')
    if self.errorCode != None:
      oprot.writeFieldBegin('errorCode', TType.I32, 1)
      oprot.writeI32(self.errorCode)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __str__(self):
    return repr(self)

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
