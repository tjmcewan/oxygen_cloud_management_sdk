#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *
from ttypes import *
from thrift.Thrift import TProcessor
from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class Iface:
  """
  Oxygen API service
  """
  def getInfo(self, ):
    """
    get information about this service

    @return name and version of O2Service
    @throws ApiUnexpectedException
    """
    pass

  def getInfoService(self, serviceId, serviceName):
    """
    get information about this service
    *
       * @param service (required) - name of service defined in constants
       * @param serviceName (optional) - serviceName used to help identify service machine
    * @return name and version of O2Service
    * @throws ApiUnexpectedException

    Parameters:
     - serviceId
     - serviceName
    """
    pass

  def signupNewUser(self, apiKey, localeString, email, password, loginId, activationCode, sessionOption):
    """
    sign up new user

    @param apiKey (required) - registered API Key
    @param localeString (optional) - ISO locale string such as "en_US" or "ja_JP"
    @param email (required) - email of new user, also used as login id of new user if loginId parameter is missing
    @param password (required) - password of new user
    @param loginId (optional) - login id of new user (if missing, login id will be the same as email)
    @param activationCode (optional) - valid sign up activation code
    @param sessionOption (required) - whether to also create a session after successfully creating the new user
    @return information about new user, plus any requested session info
    @throws ApiUnexpectedException Possible Error Code(s):<dl style="display: inline">
               <dt style="margin-left: 30px"><code>INVALID_ACTIVATION_CODE</code></dt>
               <dd style="margin-left: 60px">If <code>activationCode</code> is provided, then it's not found in the system; otherwise, the system is not setup with a proper default activation code</dd>
            </dl>
    @throws ApiInvalidInputException Possible Error Code(s):<dl style="display: inline">
               <dt style="margin-left: 30px"><code>INVALID_EMAIL</code></dt>
               <dd style="margin-left: 60px">The <code>email</code> is not in a valid email format</dd>
               <dt style="margin-left: 30px"><code>INVALID_PASSWORD_FORMAT</code></dt>
               <dd style="margin-left: 60px">The <code>password</code> is not in an acceptable password format (6 chars or longer, containing at least 1 letter and 1 digit)</dd>
               <dt style="margin-left: 30px"><code>INVALID_LOGIN_ID</code></dt>
               <dd style="margin-left: 60px">The <code>loginId</code> (or <code>email</code>, if <code>loginId</code> is missing) is not in an acceptable login id format (6 chars or longer, no invalid chars)</dd>
               <dt style="margin-left: 30px"><code>LOGIN_ID_IS_ALREADY_TAKEN</code></dt>
               <dd style="margin-left: 60px">There is already a registered user in the system with login id = <code>loginId</code> (or <code>email</code>, if <code>loginId</code> is missing)</dd>
            </dl>
    @throws ApiSystemsException Possible Error Code(s):<dl style="display: inline">
               <dt style="margin-left: 30px"><code>STORAGE_LIMIT_EXCEEDED</code></dt>
               <dd style="margin-left: 60px">Cannot find enough available storage on the cloud to add this new user</dd>
            </dl>
    @throws ApiRuleException Possible Error Code(s):<dl style="display: inline">
               <dt style="margin-left: 30px"><code>INVALID_API_KEY</code></dt>
               <dd style="margin-left: 60px">The <code>apiKey</code> provided is either invalid or is not allowed to perform this operation</dd>
               <dt style="margin-left: 30px"><code>ACTIVATION_CODE_REACHED_MAXIMUM_NUMBER_OF_USES</code></dt>
               <dd style="margin-left: 60px">The activation code has met its quota and cannot allow more new user signups with that activation code</dd>
            </dl>

    Parameters:
     - apiKey
     - localeString
     - email
     - password
     - loginId
     - activationCode
     - sessionOption
    """
    pass

  def signupNewInternalUser(self, apiKey, localeString, email, password, loginId, activationCode, sessionOption):
    """
    Parameters:
     - apiKey
     - localeString
     - email
     - password
     - loginId
     - activationCode
     - sessionOption
    """
    pass

  def createPendingExternalEnterpriseUser(self, apiKey, activationCode, accountId, email, ipAddress, rurl, locale):
    """
    Parameters:
     - apiKey
     - activationCode
     - accountId
     - email
     - ipAddress
     - rurl
     - locale
    """
    pass

  def signupPendingUserToEnterprise(self, apiKey, activationCode, accountId, email, ipAddress, checkEmailDomain, customMessage, locale):
    """
    Parameters:
     - apiKey
     - activationCode
     - accountId
     - email
     - ipAddress
     - checkEmailDomain
     - customMessage
     - locale
    """
    pass

  def activatePendingUserToEnterprise(self, apiKey, acode, ecode, firstName, lastName, email, password, oxygenId, externalLoginId, optIn, localString):
    """
    Parameters:
     - apiKey
     - acode
     - ecode
     - firstName
     - lastName
     - email
     - password
     - oxygenId
     - externalLoginId
     - optIn
     - localString
    """
    pass

  def provisionNewUserToAccount(self, apiKey, networkAccountOid, loginId, firstName, lastName, email, password, securityQuestion, securityAnswer, activationCode, optionalExternalLoginId):
    """
    Parameters:
     - apiKey
     - networkAccountOid
     - loginId
     - firstName
     - lastName
     - email
     - password
     - securityQuestion
     - securityAnswer
     - activationCode
     - optionalExternalLoginId
    """
    pass

  def requestLogin(self, apiKey):
    """
    request login URL and token

    @param apiKey (required) - registered API Key
    @return login URL and token

    Parameters:
     - apiKey
    """
    pass

  def validateLogin(self, apiKey, tokenId):
    """
    validate that the login token has a valid user binding and return an active user session

    @param apiKey (required) - registered API Key
    @param tokenId (required) - id of authentication token
    @return new active user session

    Parameters:
     - apiKey
     - tokenId
    """
    pass

  def validateLoginAndDevice(self, apiKey, tokenId, deviceId):
    """
    validate that the login token has a valid user binding and return an active user session

    @param apiKey (required) - registered API Key
    @param tokenId (required) - id of authentication token
    @param deviceId (required) - id of device
    @return new active user session

    Parameters:
     - apiKey
     - tokenId
     - deviceId
    """
    pass

  def registerDevice(self, sessionId, deviceId, status, deviceDescription):
    """
    register a new device. Must be admin.

    @param sessionId - session ID. Must be admin.
    @param deviceId - id of device
    @param status - 0: blacklist, 1: whitelist
    @param deviceDescription (can be empty)
    @return new active user session

    Parameters:
     - sessionId
     - deviceId
     - status
     - deviceDescription
    """
    pass

  def changeDeviceOwner(self, sessionId, deviceId):
    """
    change a device's owner.

    @param sessionId - session ID.
    @param deviceId - id of device
    @return new active user session

    Parameters:
     - sessionId
     - deviceId
    """
    pass

  def requestDeviceRegistration(self, sessionId, deviceId, deviceDescription):
    """
    send a request for device registration to the admin / admin-group

    @param sessionId - session ID.
    @param deviceId - id of device
    @param deviceDescription (can be empty)
    @return new active user session

    Parameters:
     - sessionId
     - deviceId
     - deviceDescription
    """
    pass

  def loginInternalUser(self, apiKey, tokenId, rurl, appId, oxygenId, password):
    """
    loginInternalUser

    @param apiKey (required) - registered API Key
    @param tokenId (required) - id of authentication token
    @return new active user session

    Parameters:
     - apiKey
     - tokenId
     - rurl
     - appId
     - oxygenId
     - password
    """
    pass

  def loginAdminUser(self, apiKey, oxygenId, password):
    """
    loginAdminUser

    @param apiKey (required) - registered API Key
    @param oxygenId (required) - id of admin user (can be set up using alternative credentials)
    @param password (required) - password of admin user (can be set up using alternative credentials)
    @return new active user session

    Parameters:
     - apiKey
     - oxygenId
     - password
    """
    pass

  def logout(self, apiSessionId):
    """
    terminate active session

    @param apiSessionId (required) - id of valid user session

    Parameters:
     - apiSessionId
    """
    pass

  def isExternalUser(self, apiKey, oxygenId):
    """
    check if user is an AD/LDAP user

    @param apiKey (required) - registered API Key
    @return boolean: true if external user. false otherwise.

    Parameters:
     - apiKey
     - oxygenId
    """
    pass

  def isExternalAccount(self, apiKey, accountId):
    """
    check if account is an AD/LDAP user

    @param apiKey (required) - registered API Key
    @return boolean: true if external account. false otherwise.

    Parameters:
     - apiKey
     - accountId
    """
    pass

  def getExternalGatewayUrl(self, apiKey, oxygenId, returnURL, webAppId, reuseAuthenticationTokenId):
    """
    getExternalGatewayUrl

    @param apiKey (required) - registered API Key
    @param oxygenId (required) - user's Oxygen ID
    @param returnURL (required) - URL to redirect upon successful authentication
    @param webAppId (required) - Application to redirect to
    @param reuseAuthenticationTokenId (required) - authTokenId generated from requestLogin
    @return string: redirect URL

    Parameters:
     - apiKey
     - oxygenId
     - returnURL
     - webAppId
     - reuseAuthenticationTokenId
    """
    pass

  def getUserInfoBySessionId(self, sessionId):
    """
    get user info

    @param apiKey (required) - registered API Key
    @param oxygenId (required) - requested user's Oxygen ID
    @return ApiUserInfo

    Parameters:
     - sessionId
    """
    pass

  def findSpaces(self, apiSessionId):
    """
    find spaces that you are subscribed to

    @param apiSessionId (required) - id of valid session of user requesting the spaces
    @return list of spaces that you are subscribed to (with at least a read permission)

    Parameters:
     - apiSessionId
    """
    pass

  def findChildFiles(self, apiSessionId, repositoryNodeServiceId, spaceId, parentId, modifiedSince):
    """
    find child files/folders by parent folder id, if changed since a given timestamp

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param parentId (optional) - id of parent folder
    @return list of child files/folders (if changes are found)

    Parameters:
     - apiSessionId
     - repositoryNodeServiceId
     - spaceId
     - parentId
     - modifiedSince
    """
    pass

  def getChildObjects(self, apiSessionId, parent, modifiedSince):
    """
    Parameters:
     - apiSessionId
     - parent
     - modifiedSince
    """
    pass

  def findModifiedFilesInSpace(self, apiSessionId, repositoryNodeServiceId, spaceId, limit):
    """
    find child files/folders by parent folder id, if changed since a given timestamp

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param limit (required) - number of results to return
    @return list of child files/folders (if changes are found)

    Parameters:
     - apiSessionId
     - repositoryNodeServiceId
     - spaceId
     - limit
    """
    pass

  def findSpaceById(self, apiSessionId, spaceId, repositoryNodeServiceId):
    """
    find space based on id

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @return the requested ApiSpace

    Parameters:
     - apiSessionId
     - spaceId
     - repositoryNodeServiceId
    """
    pass

  def findFileById(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    """
    find file/folder based on id

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file/folder
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - spaceId
     - fileId
     - repositoryNodeServiceId
    """
    pass

  def findObjectById(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    """
    Parameters:
     - apiSessionId
     - spaceId
     - fileId
     - repositoryNodeServiceId
    """
    pass

  def createWeblinkUrl(self, apiSessionId, file, expireInXMinutes, password):
    """
    create weblink url

    @param apiSessionId (required) - id of valid user session
    @param ApiFile (required) - ApiFile {@link cloudfs.ApiFile} from which to create a weblink
    @param expireInXMinutes (required) - expire weblink in __ minutes
    @param password (optional) - password-protect weblink file
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - file
     - expireInXMinutes
     - password
    """
    pass

  def createWeblinkUrlForObject(self, apiSessionId, file, expireInXMinutes, password):
    """
    Parameters:
     - apiSessionId
     - file
     - expireInXMinutes
     - password
    """
    pass

  def expireWeblinks(self, apiSessionId, file):
    """
    expire weblinks

    @param apiSessionId (required) - id of valid user session
    @param ApiFile (required) - ApiFile {@link cloudfs.ApiFile} for which weblinks are to be expired
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - file
    """
    pass

  def expireWeblinksForObject(self, apiSessionId, file):
    """
    Parameters:
     - apiSessionId
     - file
    """
    pass

  def findFileByParentAndName(self, apiSessionId, spaceId, parentId, name, repositoryNodeServiceId):
    """
    find file/folder based on file/folder name under a given parent folder

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param parentId (optional) - id of parent folder
    @param name (required) - name of file/folder to retrieve
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - spaceId
     - parentId
     - name
     - repositoryNodeServiceId
    """
    pass

  def findFileByPath(self, apiSessionId, spaceId, path, repositoryNodeServiceId):
    """
    find file/folder based on path in a space

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param path (optional) - path to the file/folder
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - spaceId
     - path
     - repositoryNodeServiceId
    """
    pass

  def deleteFile(self, apiSessionId, file):
    """
    delete file/folder

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file/folder

    Parameters:
     - apiSessionId
     - file
    """
    pass

  def deleteObject(self, apiSessionId, file):
    """
    Parameters:
     - apiSessionId
     - file
    """
    pass

  def moveFile(self, apiSessionId, source, newParentFolderId, newName):
    """
    move file/folder to another folder within the same space

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file/folder to move
    @param newParentFolderId (required) - id of destination folder
    @param newName (optional) - optional new name of file/folder after moving

    Parameters:
     - apiSessionId
     - source
     - newParentFolderId
     - newName
    """
    pass

  def moveObject(self, apiSessionId, source, newParentFolderId, newName):
    """
    Parameters:
     - apiSessionId
     - source
     - newParentFolderId
     - newName
    """
    pass

  def copyFile(self, apiSessionId, source, newParentFolderId, newName):
    """
    copy file to another folder within the same space

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file to move
    @param newParentFolderId (required) - id of destination folder
    @param newName (optional) - optional new name of file after copying

    Parameters:
     - apiSessionId
     - source
     - newParentFolderId
     - newName
    """
    pass

  def copyObject(self, apiSessionId, source, newParentFolderId, newName):
    """
    Parameters:
     - apiSessionId
     - source
     - newParentFolderId
     - newName
    """
    pass

  def createFolder(self, apiSessionId, spaceId, parentId, name, repositoryNodeServiceId):
    """
    create new folder
     * Not passing ApiFile in case we want to create a folder directly under a space.
    *
    * @param apiSessionId (required) - id of valid user session
    * @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    * @param parentId (optional) - id of parent folder
    * @param name (required) - name of new folder
    * @return the newly created folder

    Parameters:
     - apiSessionId
     - spaceId
     - parentId
     - name
     - repositoryNodeServiceId
    """
    pass

  def createFolderObject(self, apiSessionId, parent, name):
    """
    Parameters:
     - apiSessionId
     - parent
     - name
    """
    pass

  def createDownload(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    """
    start file download request

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file to download
    @return new download request which enables you to start a streamed download

    Parameters:
     - apiSessionId
     - spaceId
     - fileId
     - repositoryNodeServiceId
    """
    pass

  def createDownloadObject(self, apiSessionId, apiObject):
    """
    Parameters:
     - apiSessionId
     - apiObject
    """
    pass

  def createUpload(self, apiSessionId, spaceId, parentId, name, sizeInByte, repositoryNodeServiceId):
    """
    start file upload request

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param parentId (optional) - id of parent folder where new file will be uploaded
    @param name (required) - name of new file
    @param sizeInByte (required) - projected size of new file (for checking whether we can allocate enough storage for this)
    @return new upload request which enables you to start a streamed upload

    Parameters:
     - apiSessionId
     - spaceId
     - parentId
     - name
     - sizeInByte
     - repositoryNodeServiceId
    """
    pass

  def createUploadObject(self, apiSessionId, parent, name, sizeInByte):
    """
    Parameters:
     - apiSessionId
     - parent
     - name
     - sizeInByte
    """
    pass

  def confirmUpload(self, apiSessionId, spaceId, parentId, uploadId, name, hashValue, repositoryNodeServiceId, fileTimestampInSecsSinceEpoch):
    """
    confirm/finish file upload

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param parentId (optional) - id of parent folder where new file will be uploaded
    @param uploadId (required) - id of upload request
    @param name (required) - name of new file
    @param hashValue (required) - file hash value
    @param fileTimestampInSecsSinceEpoch (optional) - timestamp of file in seconds since midnight Jan 1, 1970; or pass in 0 to use current date/time

    Parameters:
     - apiSessionId
     - spaceId
     - parentId
     - uploadId
     - name
     - hashValue
     - repositoryNodeServiceId
     - fileTimestampInSecsSinceEpoch
    """
    pass

  def confirmUploadObject(self, apiSessionId, parent, uploadId, name, hashValue, fileTimestampInSecsSinceEpoch):
    """
    Parameters:
     - apiSessionId
     - parent
     - uploadId
     - name
     - hashValue
     - fileTimestampInSecsSinceEpoch
    """
    pass

  def readLog(self, apiSessionId, timestampStart, timestampEnd, exclusiveStart):
    """
    Parameters:
     - apiSessionId
     - timestampStart
     - timestampEnd
     - exclusiveStart
    """
    pass

  def createUser(self, apiSessionId, oxygenId, email, corporateUserName, firstName, lastName, password):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - email
     - corporateUserName
     - firstName
     - lastName
     - password
    """
    pass

  def getAllUsers(self, apiSessionId, offset):
    """
    Parameters:
     - apiSessionId
     - offset
    """
    pass

  def getGuestUsers(self, apiSessionId):
    """
    Parameters:
     - apiSessionId
    """
    pass

  def getUserByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    pass

  def getUserByExternalId(self, apiSessionId, externalId):
    """
    Parameters:
     - apiSessionId
     - externalId
    """
    pass

  def disableUserByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    pass

  def enableUserByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    pass

  def deleteUserByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    pass

  def updateUserOxygenId(self, apiSessionId, oxygenId, newOxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - newOxygenId
    """
    pass

  def updateUserDetailsByOxygenId(self, apiSessionId, oxygenId, email, firstName, lastName, displayName):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - email
     - firstName
     - lastName
     - displayName
    """
    pass

  def createSpace(self, apiSessionId, name, description, ownerOxygenId, storageName, capacity, listed, writableDefault):
    """
    Parameters:
     - apiSessionId
     - name
     - description
     - ownerOxygenId
     - storageName
     - capacity
     - listed
     - writableDefault
    """
    pass

  def getSpaceBySpaceId(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
    """
    pass

  def getSpaceBySpaceName(self, apiSessionId, spaceName):
    """
    Parameters:
     - apiSessionId
     - spaceName
    """
    pass

  def getUserVolumeByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    pass

  def getSubscriptionsForUser(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    pass

  def modifySpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, spaceName, description, ownerOxygenId, capacity, listed, writableDefault):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - spaceName
     - description
     - ownerOxygenId
     - capacity
     - listed
     - writableDefault
    """
    pass

  def modifyUserVolumeCapacityByOxygenId(self, apiSessionId, oxygenId, capacity):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - capacity
    """
    pass

  def deleteSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
    """
    pass

  def getSubscriptionsForSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
    """
    pass

  def addUserToSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, oxygenId, canWrite, canManage):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - oxygenId
     - canWrite
     - canManage
    """
    pass

  def removeUserFromSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - oxygenId
    """
    pass

  def addGroupToSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, groupId, canWrite, canManage):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - groupId
     - canWrite
     - canManage
    """
    pass

  def removeGroupFromSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, groupId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - groupId
    """
    pass

  def addUserToGroup(self, apiSessionId, oxygenId, groupId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - groupId
    """
    pass

  def removeUserFromGroup(self, apiSessionId, oxygenId, groupId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - groupId
    """
    pass

  def getAllGroups(self, apiSessionId):
    """
    Parameters:
     - apiSessionId
    """
    pass

  def createGroup(self, apiSessionId, name):
    """
    Parameters:
     - apiSessionId
     - name
    """
    pass

  def updateGroupDetailsByGroupId(self, apiSessionId, groupId, name):
    """
    Parameters:
     - apiSessionId
     - groupId
     - name
    """
    pass

  def getGroupPermissions(self, apiSessionId, groupId):
    """
    Parameters:
     - apiSessionId
     - groupId
    """
    pass

  def updateGroupPermissionAdmin(self, apiSessionId, groupId, allowed):
    """
    Parameters:
     - apiSessionId
     - groupId
     - allowed
    """
    pass

  def updateGroupPermissionCreateSpace(self, apiSessionId, groupId, allowed):
    """
    Parameters:
     - apiSessionId
     - groupId
     - allowed
    """
    pass

  def updateGroupPermissionInviteOutsideGuests(self, apiSessionId, groupId, allowed):
    """
    Parameters:
     - apiSessionId
     - groupId
     - allowed
    """
    pass

  def updateGroupPermissionPermanentDelete(self, apiSessionId, groupId, allowed):
    """
    Parameters:
     - apiSessionId
     - groupId
     - allowed
    """
    pass


class Client(Iface):
  """
  Oxygen API service
  """
  def __init__(self, iprot, oprot=None):
    self._iprot = self._oprot = iprot
    if oprot != None:
      self._oprot = oprot
    self._seqid = 0

  def getInfo(self, ):
    """
    get information about this service

    @return name and version of O2Service
    @throws ApiUnexpectedException
    """
    self.send_getInfo()
    return self.recv_getInfo()

  def send_getInfo(self, ):
    self._oprot.writeMessageBegin('getInfo', TMessageType.CALL, self._seqid)
    args = getInfo_args()
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getInfo(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getInfo_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getInfo failed: unknown result");

  def getInfoService(self, serviceId, serviceName):
    """
    get information about this service
    *
       * @param service (required) - name of service defined in constants
       * @param serviceName (optional) - serviceName used to help identify service machine
    * @return name and version of O2Service
    * @throws ApiUnexpectedException

    Parameters:
     - serviceId
     - serviceName
    """
    self.send_getInfoService(serviceId, serviceName)
    return self.recv_getInfoService()

  def send_getInfoService(self, serviceId, serviceName):
    self._oprot.writeMessageBegin('getInfoService', TMessageType.CALL, self._seqid)
    args = getInfoService_args()
    args.serviceId = serviceId
    args.serviceName = serviceName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getInfoService(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getInfoService_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getInfoService failed: unknown result");

  def signupNewUser(self, apiKey, localeString, email, password, loginId, activationCode, sessionOption):
    """
    sign up new user

    @param apiKey (required) - registered API Key
    @param localeString (optional) - ISO locale string such as "en_US" or "ja_JP"
    @param email (required) - email of new user, also used as login id of new user if loginId parameter is missing
    @param password (required) - password of new user
    @param loginId (optional) - login id of new user (if missing, login id will be the same as email)
    @param activationCode (optional) - valid sign up activation code
    @param sessionOption (required) - whether to also create a session after successfully creating the new user
    @return information about new user, plus any requested session info
    @throws ApiUnexpectedException Possible Error Code(s):<dl style="display: inline">
               <dt style="margin-left: 30px"><code>INVALID_ACTIVATION_CODE</code></dt>
               <dd style="margin-left: 60px">If <code>activationCode</code> is provided, then it's not found in the system; otherwise, the system is not setup with a proper default activation code</dd>
            </dl>
    @throws ApiInvalidInputException Possible Error Code(s):<dl style="display: inline">
               <dt style="margin-left: 30px"><code>INVALID_EMAIL</code></dt>
               <dd style="margin-left: 60px">The <code>email</code> is not in a valid email format</dd>
               <dt style="margin-left: 30px"><code>INVALID_PASSWORD_FORMAT</code></dt>
               <dd style="margin-left: 60px">The <code>password</code> is not in an acceptable password format (6 chars or longer, containing at least 1 letter and 1 digit)</dd>
               <dt style="margin-left: 30px"><code>INVALID_LOGIN_ID</code></dt>
               <dd style="margin-left: 60px">The <code>loginId</code> (or <code>email</code>, if <code>loginId</code> is missing) is not in an acceptable login id format (6 chars or longer, no invalid chars)</dd>
               <dt style="margin-left: 30px"><code>LOGIN_ID_IS_ALREADY_TAKEN</code></dt>
               <dd style="margin-left: 60px">There is already a registered user in the system with login id = <code>loginId</code> (or <code>email</code>, if <code>loginId</code> is missing)</dd>
            </dl>
    @throws ApiSystemsException Possible Error Code(s):<dl style="display: inline">
               <dt style="margin-left: 30px"><code>STORAGE_LIMIT_EXCEEDED</code></dt>
               <dd style="margin-left: 60px">Cannot find enough available storage on the cloud to add this new user</dd>
            </dl>
    @throws ApiRuleException Possible Error Code(s):<dl style="display: inline">
               <dt style="margin-left: 30px"><code>INVALID_API_KEY</code></dt>
               <dd style="margin-left: 60px">The <code>apiKey</code> provided is either invalid or is not allowed to perform this operation</dd>
               <dt style="margin-left: 30px"><code>ACTIVATION_CODE_REACHED_MAXIMUM_NUMBER_OF_USES</code></dt>
               <dd style="margin-left: 60px">The activation code has met its quota and cannot allow more new user signups with that activation code</dd>
            </dl>

    Parameters:
     - apiKey
     - localeString
     - email
     - password
     - loginId
     - activationCode
     - sessionOption
    """
    self.send_signupNewUser(apiKey, localeString, email, password, loginId, activationCode, sessionOption)
    return self.recv_signupNewUser()

  def send_signupNewUser(self, apiKey, localeString, email, password, loginId, activationCode, sessionOption):
    self._oprot.writeMessageBegin('signupNewUser', TMessageType.CALL, self._seqid)
    args = signupNewUser_args()
    args.apiKey = apiKey
    args.localeString = localeString
    args.email = email
    args.password = password
    args.loginId = loginId
    args.activationCode = activationCode
    args.sessionOption = sessionOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_signupNewUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = signupNewUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    raise TApplicationException(TApplicationException.MISSING_RESULT, "signupNewUser failed: unknown result");

  def signupNewInternalUser(self, apiKey, localeString, email, password, loginId, activationCode, sessionOption):
    """
    Parameters:
     - apiKey
     - localeString
     - email
     - password
     - loginId
     - activationCode
     - sessionOption
    """
    self.send_signupNewInternalUser(apiKey, localeString, email, password, loginId, activationCode, sessionOption)
    return self.recv_signupNewInternalUser()

  def send_signupNewInternalUser(self, apiKey, localeString, email, password, loginId, activationCode, sessionOption):
    self._oprot.writeMessageBegin('signupNewInternalUser', TMessageType.CALL, self._seqid)
    args = signupNewInternalUser_args()
    args.apiKey = apiKey
    args.localeString = localeString
    args.email = email
    args.password = password
    args.loginId = loginId
    args.activationCode = activationCode
    args.sessionOption = sessionOption
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_signupNewInternalUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = signupNewInternalUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    raise TApplicationException(TApplicationException.MISSING_RESULT, "signupNewInternalUser failed: unknown result");

  def createPendingExternalEnterpriseUser(self, apiKey, activationCode, accountId, email, ipAddress, rurl, locale):
    """
    Parameters:
     - apiKey
     - activationCode
     - accountId
     - email
     - ipAddress
     - rurl
     - locale
    """
    self.send_createPendingExternalEnterpriseUser(apiKey, activationCode, accountId, email, ipAddress, rurl, locale)
    return self.recv_createPendingExternalEnterpriseUser()

  def send_createPendingExternalEnterpriseUser(self, apiKey, activationCode, accountId, email, ipAddress, rurl, locale):
    self._oprot.writeMessageBegin('createPendingExternalEnterpriseUser', TMessageType.CALL, self._seqid)
    args = createPendingExternalEnterpriseUser_args()
    args.apiKey = apiKey
    args.activationCode = activationCode
    args.accountId = accountId
    args.email = email
    args.ipAddress = ipAddress
    args.rurl = rurl
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createPendingExternalEnterpriseUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createPendingExternalEnterpriseUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createPendingExternalEnterpriseUser failed: unknown result");

  def signupPendingUserToEnterprise(self, apiKey, activationCode, accountId, email, ipAddress, checkEmailDomain, customMessage, locale):
    """
    Parameters:
     - apiKey
     - activationCode
     - accountId
     - email
     - ipAddress
     - checkEmailDomain
     - customMessage
     - locale
    """
    self.send_signupPendingUserToEnterprise(apiKey, activationCode, accountId, email, ipAddress, checkEmailDomain, customMessage, locale)
    self.recv_signupPendingUserToEnterprise()

  def send_signupPendingUserToEnterprise(self, apiKey, activationCode, accountId, email, ipAddress, checkEmailDomain, customMessage, locale):
    self._oprot.writeMessageBegin('signupPendingUserToEnterprise', TMessageType.CALL, self._seqid)
    args = signupPendingUserToEnterprise_args()
    args.apiKey = apiKey
    args.activationCode = activationCode
    args.accountId = accountId
    args.email = email
    args.ipAddress = ipAddress
    args.checkEmailDomain = checkEmailDomain
    args.customMessage = customMessage
    args.locale = locale
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_signupPendingUserToEnterprise(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = signupPendingUserToEnterprise_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    return

  def activatePendingUserToEnterprise(self, apiKey, acode, ecode, firstName, lastName, email, password, oxygenId, externalLoginId, optIn, localString):
    """
    Parameters:
     - apiKey
     - acode
     - ecode
     - firstName
     - lastName
     - email
     - password
     - oxygenId
     - externalLoginId
     - optIn
     - localString
    """
    self.send_activatePendingUserToEnterprise(apiKey, acode, ecode, firstName, lastName, email, password, oxygenId, externalLoginId, optIn, localString)
    self.recv_activatePendingUserToEnterprise()

  def send_activatePendingUserToEnterprise(self, apiKey, acode, ecode, firstName, lastName, email, password, oxygenId, externalLoginId, optIn, localString):
    self._oprot.writeMessageBegin('activatePendingUserToEnterprise', TMessageType.CALL, self._seqid)
    args = activatePendingUserToEnterprise_args()
    args.apiKey = apiKey
    args.acode = acode
    args.ecode = ecode
    args.firstName = firstName
    args.lastName = lastName
    args.email = email
    args.password = password
    args.oxygenId = oxygenId
    args.externalLoginId = externalLoginId
    args.optIn = optIn
    args.localString = localString
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_activatePendingUserToEnterprise(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = activatePendingUserToEnterprise_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    return

  def provisionNewUserToAccount(self, apiKey, networkAccountOid, loginId, firstName, lastName, email, password, securityQuestion, securityAnswer, activationCode, optionalExternalLoginId):
    """
    Parameters:
     - apiKey
     - networkAccountOid
     - loginId
     - firstName
     - lastName
     - email
     - password
     - securityQuestion
     - securityAnswer
     - activationCode
     - optionalExternalLoginId
    """
    self.send_provisionNewUserToAccount(apiKey, networkAccountOid, loginId, firstName, lastName, email, password, securityQuestion, securityAnswer, activationCode, optionalExternalLoginId)
    self.recv_provisionNewUserToAccount()

  def send_provisionNewUserToAccount(self, apiKey, networkAccountOid, loginId, firstName, lastName, email, password, securityQuestion, securityAnswer, activationCode, optionalExternalLoginId):
    self._oprot.writeMessageBegin('provisionNewUserToAccount', TMessageType.CALL, self._seqid)
    args = provisionNewUserToAccount_args()
    args.apiKey = apiKey
    args.networkAccountOid = networkAccountOid
    args.loginId = loginId
    args.firstName = firstName
    args.lastName = lastName
    args.email = email
    args.password = password
    args.securityQuestion = securityQuestion
    args.securityAnswer = securityAnswer
    args.activationCode = activationCode
    args.optionalExternalLoginId = optionalExternalLoginId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_provisionNewUserToAccount(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = provisionNewUserToAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    return

  def requestLogin(self, apiKey):
    """
    request login URL and token

    @param apiKey (required) - registered API Key
    @return login URL and token

    Parameters:
     - apiKey
    """
    self.send_requestLogin(apiKey)
    return self.recv_requestLogin()

  def send_requestLogin(self, apiKey):
    self._oprot.writeMessageBegin('requestLogin', TMessageType.CALL, self._seqid)
    args = requestLogin_args()
    args.apiKey = apiKey
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_requestLogin(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = requestLogin_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    raise TApplicationException(TApplicationException.MISSING_RESULT, "requestLogin failed: unknown result");

  def validateLogin(self, apiKey, tokenId):
    """
    validate that the login token has a valid user binding and return an active user session

    @param apiKey (required) - registered API Key
    @param tokenId (required) - id of authentication token
    @return new active user session

    Parameters:
     - apiKey
     - tokenId
    """
    self.send_validateLogin(apiKey, tokenId)
    return self.recv_validateLogin()

  def send_validateLogin(self, apiKey, tokenId):
    self._oprot.writeMessageBegin('validateLogin', TMessageType.CALL, self._seqid)
    args = validateLogin_args()
    args.apiKey = apiKey
    args.tokenId = tokenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_validateLogin(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = validateLogin_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "validateLogin failed: unknown result");

  def validateLoginAndDevice(self, apiKey, tokenId, deviceId):
    """
    validate that the login token has a valid user binding and return an active user session

    @param apiKey (required) - registered API Key
    @param tokenId (required) - id of authentication token
    @param deviceId (required) - id of device
    @return new active user session

    Parameters:
     - apiKey
     - tokenId
     - deviceId
    """
    self.send_validateLoginAndDevice(apiKey, tokenId, deviceId)
    return self.recv_validateLoginAndDevice()

  def send_validateLoginAndDevice(self, apiKey, tokenId, deviceId):
    self._oprot.writeMessageBegin('validateLoginAndDevice', TMessageType.CALL, self._seqid)
    args = validateLoginAndDevice_args()
    args.apiKey = apiKey
    args.tokenId = tokenId
    args.deviceId = deviceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_validateLoginAndDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = validateLoginAndDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "validateLoginAndDevice failed: unknown result");

  def registerDevice(self, sessionId, deviceId, status, deviceDescription):
    """
    register a new device. Must be admin.

    @param sessionId - session ID. Must be admin.
    @param deviceId - id of device
    @param status - 0: blacklist, 1: whitelist
    @param deviceDescription (can be empty)
    @return new active user session

    Parameters:
     - sessionId
     - deviceId
     - status
     - deviceDescription
    """
    self.send_registerDevice(sessionId, deviceId, status, deviceDescription)
    self.recv_registerDevice()

  def send_registerDevice(self, sessionId, deviceId, status, deviceDescription):
    self._oprot.writeMessageBegin('registerDevice', TMessageType.CALL, self._seqid)
    args = registerDevice_args()
    args.sessionId = sessionId
    args.deviceId = deviceId
    args.status = status
    args.deviceDescription = deviceDescription
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_registerDevice(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = registerDevice_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def changeDeviceOwner(self, sessionId, deviceId):
    """
    change a device's owner.

    @param sessionId - session ID.
    @param deviceId - id of device
    @return new active user session

    Parameters:
     - sessionId
     - deviceId
    """
    self.send_changeDeviceOwner(sessionId, deviceId)
    self.recv_changeDeviceOwner()

  def send_changeDeviceOwner(self, sessionId, deviceId):
    self._oprot.writeMessageBegin('changeDeviceOwner', TMessageType.CALL, self._seqid)
    args = changeDeviceOwner_args()
    args.sessionId = sessionId
    args.deviceId = deviceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_changeDeviceOwner(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = changeDeviceOwner_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def requestDeviceRegistration(self, sessionId, deviceId, deviceDescription):
    """
    send a request for device registration to the admin / admin-group

    @param sessionId - session ID.
    @param deviceId - id of device
    @param deviceDescription (can be empty)
    @return new active user session

    Parameters:
     - sessionId
     - deviceId
     - deviceDescription
    """
    self.send_requestDeviceRegistration(sessionId, deviceId, deviceDescription)
    self.recv_requestDeviceRegistration()

  def send_requestDeviceRegistration(self, sessionId, deviceId, deviceDescription):
    self._oprot.writeMessageBegin('requestDeviceRegistration', TMessageType.CALL, self._seqid)
    args = requestDeviceRegistration_args()
    args.sessionId = sessionId
    args.deviceId = deviceId
    args.deviceDescription = deviceDescription
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_requestDeviceRegistration(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = requestDeviceRegistration_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def loginInternalUser(self, apiKey, tokenId, rurl, appId, oxygenId, password):
    """
    loginInternalUser

    @param apiKey (required) - registered API Key
    @param tokenId (required) - id of authentication token
    @return new active user session

    Parameters:
     - apiKey
     - tokenId
     - rurl
     - appId
     - oxygenId
     - password
    """
    self.send_loginInternalUser(apiKey, tokenId, rurl, appId, oxygenId, password)
    return self.recv_loginInternalUser()

  def send_loginInternalUser(self, apiKey, tokenId, rurl, appId, oxygenId, password):
    self._oprot.writeMessageBegin('loginInternalUser', TMessageType.CALL, self._seqid)
    args = loginInternalUser_args()
    args.apiKey = apiKey
    args.tokenId = tokenId
    args.rurl = rurl
    args.appId = appId
    args.oxygenId = oxygenId
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_loginInternalUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = loginInternalUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "loginInternalUser failed: unknown result");

  def loginAdminUser(self, apiKey, oxygenId, password):
    """
    loginAdminUser

    @param apiKey (required) - registered API Key
    @param oxygenId (required) - id of admin user (can be set up using alternative credentials)
    @param password (required) - password of admin user (can be set up using alternative credentials)
    @return new active user session

    Parameters:
     - apiKey
     - oxygenId
     - password
    """
    self.send_loginAdminUser(apiKey, oxygenId, password)
    return self.recv_loginAdminUser()

  def send_loginAdminUser(self, apiKey, oxygenId, password):
    self._oprot.writeMessageBegin('loginAdminUser', TMessageType.CALL, self._seqid)
    args = loginAdminUser_args()
    args.apiKey = apiKey
    args.oxygenId = oxygenId
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_loginAdminUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = loginAdminUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "loginAdminUser failed: unknown result");

  def logout(self, apiSessionId):
    """
    terminate active session

    @param apiSessionId (required) - id of valid user session

    Parameters:
     - apiSessionId
    """
    self.send_logout(apiSessionId)
    self.recv_logout()

  def send_logout(self, apiSessionId):
    self._oprot.writeMessageBegin('logout', TMessageType.CALL, self._seqid)
    args = logout_args()
    args.apiSessionId = apiSessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_logout(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = logout_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def isExternalUser(self, apiKey, oxygenId):
    """
    check if user is an AD/LDAP user

    @param apiKey (required) - registered API Key
    @return boolean: true if external user. false otherwise.

    Parameters:
     - apiKey
     - oxygenId
    """
    self.send_isExternalUser(apiKey, oxygenId)
    return self.recv_isExternalUser()

  def send_isExternalUser(self, apiKey, oxygenId):
    self._oprot.writeMessageBegin('isExternalUser', TMessageType.CALL, self._seqid)
    args = isExternalUser_args()
    args.apiKey = apiKey
    args.oxygenId = oxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isExternalUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = isExternalUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isExternalUser failed: unknown result");

  def isExternalAccount(self, apiKey, accountId):
    """
    check if account is an AD/LDAP user

    @param apiKey (required) - registered API Key
    @return boolean: true if external account. false otherwise.

    Parameters:
     - apiKey
     - accountId
    """
    self.send_isExternalAccount(apiKey, accountId)
    return self.recv_isExternalAccount()

  def send_isExternalAccount(self, apiKey, accountId):
    self._oprot.writeMessageBegin('isExternalAccount', TMessageType.CALL, self._seqid)
    args = isExternalAccount_args()
    args.apiKey = apiKey
    args.accountId = accountId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_isExternalAccount(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = isExternalAccount_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "isExternalAccount failed: unknown result");

  def getExternalGatewayUrl(self, apiKey, oxygenId, returnURL, webAppId, reuseAuthenticationTokenId):
    """
    getExternalGatewayUrl

    @param apiKey (required) - registered API Key
    @param oxygenId (required) - user's Oxygen ID
    @param returnURL (required) - URL to redirect upon successful authentication
    @param webAppId (required) - Application to redirect to
    @param reuseAuthenticationTokenId (required) - authTokenId generated from requestLogin
    @return string: redirect URL

    Parameters:
     - apiKey
     - oxygenId
     - returnURL
     - webAppId
     - reuseAuthenticationTokenId
    """
    self.send_getExternalGatewayUrl(apiKey, oxygenId, returnURL, webAppId, reuseAuthenticationTokenId)
    return self.recv_getExternalGatewayUrl()

  def send_getExternalGatewayUrl(self, apiKey, oxygenId, returnURL, webAppId, reuseAuthenticationTokenId):
    self._oprot.writeMessageBegin('getExternalGatewayUrl', TMessageType.CALL, self._seqid)
    args = getExternalGatewayUrl_args()
    args.apiKey = apiKey
    args.oxygenId = oxygenId
    args.returnURL = returnURL
    args.webAppId = webAppId
    args.reuseAuthenticationTokenId = reuseAuthenticationTokenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getExternalGatewayUrl(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getExternalGatewayUrl_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getExternalGatewayUrl failed: unknown result");

  def getUserInfoBySessionId(self, sessionId):
    """
    get user info

    @param apiKey (required) - registered API Key
    @param oxygenId (required) - requested user's Oxygen ID
    @return ApiUserInfo

    Parameters:
     - sessionId
    """
    self.send_getUserInfoBySessionId(sessionId)
    return self.recv_getUserInfoBySessionId()

  def send_getUserInfoBySessionId(self, sessionId):
    self._oprot.writeMessageBegin('getUserInfoBySessionId', TMessageType.CALL, self._seqid)
    args = getUserInfoBySessionId_args()
    args.sessionId = sessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserInfoBySessionId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUserInfoBySessionId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserInfoBySessionId failed: unknown result");

  def findSpaces(self, apiSessionId):
    """
    find spaces that you are subscribed to

    @param apiSessionId (required) - id of valid session of user requesting the spaces
    @return list of spaces that you are subscribed to (with at least a read permission)

    Parameters:
     - apiSessionId
    """
    self.send_findSpaces(apiSessionId)
    return self.recv_findSpaces()

  def send_findSpaces(self, apiSessionId):
    self._oprot.writeMessageBegin('findSpaces', TMessageType.CALL, self._seqid)
    args = findSpaces_args()
    args.apiSessionId = apiSessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findSpaces(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findSpaces_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findSpaces failed: unknown result");

  def findChildFiles(self, apiSessionId, repositoryNodeServiceId, spaceId, parentId, modifiedSince):
    """
    find child files/folders by parent folder id, if changed since a given timestamp

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param parentId (optional) - id of parent folder
    @return list of child files/folders (if changes are found)

    Parameters:
     - apiSessionId
     - repositoryNodeServiceId
     - spaceId
     - parentId
     - modifiedSince
    """
    self.send_findChildFiles(apiSessionId, repositoryNodeServiceId, spaceId, parentId, modifiedSince)
    return self.recv_findChildFiles()

  def send_findChildFiles(self, apiSessionId, repositoryNodeServiceId, spaceId, parentId, modifiedSince):
    self._oprot.writeMessageBegin('findChildFiles', TMessageType.CALL, self._seqid)
    args = findChildFiles_args()
    args.apiSessionId = apiSessionId
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.spaceId = spaceId
    args.parentId = parentId
    args.modifiedSince = modifiedSince
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findChildFiles(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findChildFiles_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findChildFiles failed: unknown result");

  def getChildObjects(self, apiSessionId, parent, modifiedSince):
    """
    Parameters:
     - apiSessionId
     - parent
     - modifiedSince
    """
    self.send_getChildObjects(apiSessionId, parent, modifiedSince)
    return self.recv_getChildObjects()

  def send_getChildObjects(self, apiSessionId, parent, modifiedSince):
    self._oprot.writeMessageBegin('getChildObjects', TMessageType.CALL, self._seqid)
    args = getChildObjects_args()
    args.apiSessionId = apiSessionId
    args.parent = parent
    args.modifiedSince = modifiedSince
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getChildObjects(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getChildObjects_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getChildObjects failed: unknown result");

  def findModifiedFilesInSpace(self, apiSessionId, repositoryNodeServiceId, spaceId, limit):
    """
    find child files/folders by parent folder id, if changed since a given timestamp

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param limit (required) - number of results to return
    @return list of child files/folders (if changes are found)

    Parameters:
     - apiSessionId
     - repositoryNodeServiceId
     - spaceId
     - limit
    """
    self.send_findModifiedFilesInSpace(apiSessionId, repositoryNodeServiceId, spaceId, limit)
    return self.recv_findModifiedFilesInSpace()

  def send_findModifiedFilesInSpace(self, apiSessionId, repositoryNodeServiceId, spaceId, limit):
    self._oprot.writeMessageBegin('findModifiedFilesInSpace', TMessageType.CALL, self._seqid)
    args = findModifiedFilesInSpace_args()
    args.apiSessionId = apiSessionId
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.spaceId = spaceId
    args.limit = limit
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findModifiedFilesInSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findModifiedFilesInSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findModifiedFilesInSpace failed: unknown result");

  def findSpaceById(self, apiSessionId, spaceId, repositoryNodeServiceId):
    """
    find space based on id

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @return the requested ApiSpace

    Parameters:
     - apiSessionId
     - spaceId
     - repositoryNodeServiceId
    """
    self.send_findSpaceById(apiSessionId, spaceId, repositoryNodeServiceId)
    return self.recv_findSpaceById()

  def send_findSpaceById(self, apiSessionId, spaceId, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('findSpaceById', TMessageType.CALL, self._seqid)
    args = findSpaceById_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findSpaceById(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findSpaceById_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findSpaceById failed: unknown result");

  def findFileById(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    """
    find file/folder based on id

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file/folder
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - spaceId
     - fileId
     - repositoryNodeServiceId
    """
    self.send_findFileById(apiSessionId, spaceId, fileId, repositoryNodeServiceId)
    return self.recv_findFileById()

  def send_findFileById(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('findFileById', TMessageType.CALL, self._seqid)
    args = findFileById_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.fileId = fileId
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findFileById(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findFileById_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findFileById failed: unknown result");

  def findObjectById(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    """
    Parameters:
     - apiSessionId
     - spaceId
     - fileId
     - repositoryNodeServiceId
    """
    self.send_findObjectById(apiSessionId, spaceId, fileId, repositoryNodeServiceId)
    return self.recv_findObjectById()

  def send_findObjectById(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('findObjectById', TMessageType.CALL, self._seqid)
    args = findObjectById_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.fileId = fileId
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findObjectById(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findObjectById_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findObjectById failed: unknown result");

  def createWeblinkUrl(self, apiSessionId, file, expireInXMinutes, password):
    """
    create weblink url

    @param apiSessionId (required) - id of valid user session
    @param ApiFile (required) - ApiFile {@link cloudfs.ApiFile} from which to create a weblink
    @param expireInXMinutes (required) - expire weblink in __ minutes
    @param password (optional) - password-protect weblink file
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - file
     - expireInXMinutes
     - password
    """
    self.send_createWeblinkUrl(apiSessionId, file, expireInXMinutes, password)
    return self.recv_createWeblinkUrl()

  def send_createWeblinkUrl(self, apiSessionId, file, expireInXMinutes, password):
    self._oprot.writeMessageBegin('createWeblinkUrl', TMessageType.CALL, self._seqid)
    args = createWeblinkUrl_args()
    args.apiSessionId = apiSessionId
    args.file = file
    args.expireInXMinutes = expireInXMinutes
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createWeblinkUrl(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createWeblinkUrl_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createWeblinkUrl failed: unknown result");

  def createWeblinkUrlForObject(self, apiSessionId, file, expireInXMinutes, password):
    """
    Parameters:
     - apiSessionId
     - file
     - expireInXMinutes
     - password
    """
    self.send_createWeblinkUrlForObject(apiSessionId, file, expireInXMinutes, password)
    return self.recv_createWeblinkUrlForObject()

  def send_createWeblinkUrlForObject(self, apiSessionId, file, expireInXMinutes, password):
    self._oprot.writeMessageBegin('createWeblinkUrlForObject', TMessageType.CALL, self._seqid)
    args = createWeblinkUrlForObject_args()
    args.apiSessionId = apiSessionId
    args.file = file
    args.expireInXMinutes = expireInXMinutes
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createWeblinkUrlForObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createWeblinkUrlForObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createWeblinkUrlForObject failed: unknown result");

  def expireWeblinks(self, apiSessionId, file):
    """
    expire weblinks

    @param apiSessionId (required) - id of valid user session
    @param ApiFile (required) - ApiFile {@link cloudfs.ApiFile} for which weblinks are to be expired
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - file
    """
    self.send_expireWeblinks(apiSessionId, file)
    return self.recv_expireWeblinks()

  def send_expireWeblinks(self, apiSessionId, file):
    self._oprot.writeMessageBegin('expireWeblinks', TMessageType.CALL, self._seqid)
    args = expireWeblinks_args()
    args.apiSessionId = apiSessionId
    args.file = file
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_expireWeblinks(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = expireWeblinks_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "expireWeblinks failed: unknown result");

  def expireWeblinksForObject(self, apiSessionId, file):
    """
    Parameters:
     - apiSessionId
     - file
    """
    self.send_expireWeblinksForObject(apiSessionId, file)
    return self.recv_expireWeblinksForObject()

  def send_expireWeblinksForObject(self, apiSessionId, file):
    self._oprot.writeMessageBegin('expireWeblinksForObject', TMessageType.CALL, self._seqid)
    args = expireWeblinksForObject_args()
    args.apiSessionId = apiSessionId
    args.file = file
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_expireWeblinksForObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = expireWeblinksForObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "expireWeblinksForObject failed: unknown result");

  def findFileByParentAndName(self, apiSessionId, spaceId, parentId, name, repositoryNodeServiceId):
    """
    find file/folder based on file/folder name under a given parent folder

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param parentId (optional) - id of parent folder
    @param name (required) - name of file/folder to retrieve
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - spaceId
     - parentId
     - name
     - repositoryNodeServiceId
    """
    self.send_findFileByParentAndName(apiSessionId, spaceId, parentId, name, repositoryNodeServiceId)
    return self.recv_findFileByParentAndName()

  def send_findFileByParentAndName(self, apiSessionId, spaceId, parentId, name, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('findFileByParentAndName', TMessageType.CALL, self._seqid)
    args = findFileByParentAndName_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.parentId = parentId
    args.name = name
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findFileByParentAndName(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findFileByParentAndName_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findFileByParentAndName failed: unknown result");

  def findFileByPath(self, apiSessionId, spaceId, path, repositoryNodeServiceId):
    """
    find file/folder based on path in a space

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param path (optional) - path to the file/folder
    @return the requested file/folder

    Parameters:
     - apiSessionId
     - spaceId
     - path
     - repositoryNodeServiceId
    """
    self.send_findFileByPath(apiSessionId, spaceId, path, repositoryNodeServiceId)
    return self.recv_findFileByPath()

  def send_findFileByPath(self, apiSessionId, spaceId, path, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('findFileByPath', TMessageType.CALL, self._seqid)
    args = findFileByPath_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.path = path
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_findFileByPath(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = findFileByPath_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "findFileByPath failed: unknown result");

  def deleteFile(self, apiSessionId, file):
    """
    delete file/folder

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file/folder

    Parameters:
     - apiSessionId
     - file
    """
    self.send_deleteFile(apiSessionId, file)
    self.recv_deleteFile()

  def send_deleteFile(self, apiSessionId, file):
    self._oprot.writeMessageBegin('deleteFile', TMessageType.CALL, self._seqid)
    args = deleteFile_args()
    args.apiSessionId = apiSessionId
    args.file = file
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteFile(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteFile_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def deleteObject(self, apiSessionId, file):
    """
    Parameters:
     - apiSessionId
     - file
    """
    self.send_deleteObject(apiSessionId, file)
    self.recv_deleteObject()

  def send_deleteObject(self, apiSessionId, file):
    self._oprot.writeMessageBegin('deleteObject', TMessageType.CALL, self._seqid)
    args = deleteObject_args()
    args.apiSessionId = apiSessionId
    args.file = file
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def moveFile(self, apiSessionId, source, newParentFolderId, newName):
    """
    move file/folder to another folder within the same space

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file/folder to move
    @param newParentFolderId (required) - id of destination folder
    @param newName (optional) - optional new name of file/folder after moving

    Parameters:
     - apiSessionId
     - source
     - newParentFolderId
     - newName
    """
    self.send_moveFile(apiSessionId, source, newParentFolderId, newName)
    self.recv_moveFile()

  def send_moveFile(self, apiSessionId, source, newParentFolderId, newName):
    self._oprot.writeMessageBegin('moveFile', TMessageType.CALL, self._seqid)
    args = moveFile_args()
    args.apiSessionId = apiSessionId
    args.source = source
    args.newParentFolderId = newParentFolderId
    args.newName = newName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_moveFile(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = moveFile_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def moveObject(self, apiSessionId, source, newParentFolderId, newName):
    """
    Parameters:
     - apiSessionId
     - source
     - newParentFolderId
     - newName
    """
    self.send_moveObject(apiSessionId, source, newParentFolderId, newName)
    self.recv_moveObject()

  def send_moveObject(self, apiSessionId, source, newParentFolderId, newName):
    self._oprot.writeMessageBegin('moveObject', TMessageType.CALL, self._seqid)
    args = moveObject_args()
    args.apiSessionId = apiSessionId
    args.source = source
    args.newParentFolderId = newParentFolderId
    args.newName = newName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_moveObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = moveObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def copyFile(self, apiSessionId, source, newParentFolderId, newName):
    """
    copy file to another folder within the same space

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file to move
    @param newParentFolderId (required) - id of destination folder
    @param newName (optional) - optional new name of file after copying

    Parameters:
     - apiSessionId
     - source
     - newParentFolderId
     - newName
    """
    self.send_copyFile(apiSessionId, source, newParentFolderId, newName)
    self.recv_copyFile()

  def send_copyFile(self, apiSessionId, source, newParentFolderId, newName):
    self._oprot.writeMessageBegin('copyFile', TMessageType.CALL, self._seqid)
    args = copyFile_args()
    args.apiSessionId = apiSessionId
    args.source = source
    args.newParentFolderId = newParentFolderId
    args.newName = newName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copyFile(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = copyFile_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def copyObject(self, apiSessionId, source, newParentFolderId, newName):
    """
    Parameters:
     - apiSessionId
     - source
     - newParentFolderId
     - newName
    """
    self.send_copyObject(apiSessionId, source, newParentFolderId, newName)
    self.recv_copyObject()

  def send_copyObject(self, apiSessionId, source, newParentFolderId, newName):
    self._oprot.writeMessageBegin('copyObject', TMessageType.CALL, self._seqid)
    args = copyObject_args()
    args.apiSessionId = apiSessionId
    args.source = source
    args.newParentFolderId = newParentFolderId
    args.newName = newName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_copyObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = copyObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def createFolder(self, apiSessionId, spaceId, parentId, name, repositoryNodeServiceId):
    """
    create new folder
     * Not passing ApiFile in case we want to create a folder directly under a space.
    *
    * @param apiSessionId (required) - id of valid user session
    * @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    * @param parentId (optional) - id of parent folder
    * @param name (required) - name of new folder
    * @return the newly created folder

    Parameters:
     - apiSessionId
     - spaceId
     - parentId
     - name
     - repositoryNodeServiceId
    """
    self.send_createFolder(apiSessionId, spaceId, parentId, name, repositoryNodeServiceId)
    return self.recv_createFolder()

  def send_createFolder(self, apiSessionId, spaceId, parentId, name, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('createFolder', TMessageType.CALL, self._seqid)
    args = createFolder_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.parentId = parentId
    args.name = name
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createFolder(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createFolder_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createFolder failed: unknown result");

  def createFolderObject(self, apiSessionId, parent, name):
    """
    Parameters:
     - apiSessionId
     - parent
     - name
    """
    self.send_createFolderObject(apiSessionId, parent, name)
    return self.recv_createFolderObject()

  def send_createFolderObject(self, apiSessionId, parent, name):
    self._oprot.writeMessageBegin('createFolderObject', TMessageType.CALL, self._seqid)
    args = createFolderObject_args()
    args.apiSessionId = apiSessionId
    args.parent = parent
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createFolderObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createFolderObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createFolderObject failed: unknown result");

  def createDownload(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    """
    start file download request

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param fileId (required) - id of file to download
    @return new download request which enables you to start a streamed download

    Parameters:
     - apiSessionId
     - spaceId
     - fileId
     - repositoryNodeServiceId
    """
    self.send_createDownload(apiSessionId, spaceId, fileId, repositoryNodeServiceId)
    return self.recv_createDownload()

  def send_createDownload(self, apiSessionId, spaceId, fileId, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('createDownload', TMessageType.CALL, self._seqid)
    args = createDownload_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.fileId = fileId
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createDownload(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createDownload_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createDownload failed: unknown result");

  def createDownloadObject(self, apiSessionId, apiObject):
    """
    Parameters:
     - apiSessionId
     - apiObject
    """
    self.send_createDownloadObject(apiSessionId, apiObject)
    return self.recv_createDownloadObject()

  def send_createDownloadObject(self, apiSessionId, apiObject):
    self._oprot.writeMessageBegin('createDownloadObject', TMessageType.CALL, self._seqid)
    args = createDownloadObject_args()
    args.apiSessionId = apiSessionId
    args.apiObject = apiObject
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createDownloadObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createDownloadObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createDownloadObject failed: unknown result");

  def createUpload(self, apiSessionId, spaceId, parentId, name, sizeInByte, repositoryNodeServiceId):
    """
    start file upload request

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param parentId (optional) - id of parent folder where new file will be uploaded
    @param name (required) - name of new file
    @param sizeInByte (required) - projected size of new file (for checking whether we can allocate enough storage for this)
    @return new upload request which enables you to start a streamed upload

    Parameters:
     - apiSessionId
     - spaceId
     - parentId
     - name
     - sizeInByte
     - repositoryNodeServiceId
    """
    self.send_createUpload(apiSessionId, spaceId, parentId, name, sizeInByte, repositoryNodeServiceId)
    return self.recv_createUpload()

  def send_createUpload(self, apiSessionId, spaceId, parentId, name, sizeInByte, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('createUpload', TMessageType.CALL, self._seqid)
    args = createUpload_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.parentId = parentId
    args.name = name
    args.sizeInByte = sizeInByte
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createUpload(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createUpload_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createUpload failed: unknown result");

  def createUploadObject(self, apiSessionId, parent, name, sizeInByte):
    """
    Parameters:
     - apiSessionId
     - parent
     - name
     - sizeInByte
    """
    self.send_createUploadObject(apiSessionId, parent, name, sizeInByte)
    return self.recv_createUploadObject()

  def send_createUploadObject(self, apiSessionId, parent, name, sizeInByte):
    self._oprot.writeMessageBegin('createUploadObject', TMessageType.CALL, self._seqid)
    args = createUploadObject_args()
    args.apiSessionId = apiSessionId
    args.parent = parent
    args.name = name
    args.sizeInByte = sizeInByte
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createUploadObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createUploadObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createUploadObject failed: unknown result");

  def confirmUpload(self, apiSessionId, spaceId, parentId, uploadId, name, hashValue, repositoryNodeServiceId, fileTimestampInSecsSinceEpoch):
    """
    confirm/finish file upload

    @param apiSessionId (required) - id of valid user session
    @param spaceId (required) - id of container {@link cloudfs.ApiSpace}
    @param parentId (optional) - id of parent folder where new file will be uploaded
    @param uploadId (required) - id of upload request
    @param name (required) - name of new file
    @param hashValue (required) - file hash value
    @param fileTimestampInSecsSinceEpoch (optional) - timestamp of file in seconds since midnight Jan 1, 1970; or pass in 0 to use current date/time

    Parameters:
     - apiSessionId
     - spaceId
     - parentId
     - uploadId
     - name
     - hashValue
     - repositoryNodeServiceId
     - fileTimestampInSecsSinceEpoch
    """
    self.send_confirmUpload(apiSessionId, spaceId, parentId, uploadId, name, hashValue, repositoryNodeServiceId, fileTimestampInSecsSinceEpoch)
    return self.recv_confirmUpload()

  def send_confirmUpload(self, apiSessionId, spaceId, parentId, uploadId, name, hashValue, repositoryNodeServiceId, fileTimestampInSecsSinceEpoch):
    self._oprot.writeMessageBegin('confirmUpload', TMessageType.CALL, self._seqid)
    args = confirmUpload_args()
    args.apiSessionId = apiSessionId
    args.spaceId = spaceId
    args.parentId = parentId
    args.uploadId = uploadId
    args.name = name
    args.hashValue = hashValue
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.fileTimestampInSecsSinceEpoch = fileTimestampInSecsSinceEpoch
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_confirmUpload(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = confirmUpload_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "confirmUpload failed: unknown result");

  def confirmUploadObject(self, apiSessionId, parent, uploadId, name, hashValue, fileTimestampInSecsSinceEpoch):
    """
    Parameters:
     - apiSessionId
     - parent
     - uploadId
     - name
     - hashValue
     - fileTimestampInSecsSinceEpoch
    """
    self.send_confirmUploadObject(apiSessionId, parent, uploadId, name, hashValue, fileTimestampInSecsSinceEpoch)
    return self.recv_confirmUploadObject()

  def send_confirmUploadObject(self, apiSessionId, parent, uploadId, name, hashValue, fileTimestampInSecsSinceEpoch):
    self._oprot.writeMessageBegin('confirmUploadObject', TMessageType.CALL, self._seqid)
    args = confirmUploadObject_args()
    args.apiSessionId = apiSessionId
    args.parent = parent
    args.uploadId = uploadId
    args.name = name
    args.hashValue = hashValue
    args.fileTimestampInSecsSinceEpoch = fileTimestampInSecsSinceEpoch
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_confirmUploadObject(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = confirmUploadObject_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "confirmUploadObject failed: unknown result");

  def readLog(self, apiSessionId, timestampStart, timestampEnd, exclusiveStart):
    """
    Parameters:
     - apiSessionId
     - timestampStart
     - timestampEnd
     - exclusiveStart
    """
    self.send_readLog(apiSessionId, timestampStart, timestampEnd, exclusiveStart)
    return self.recv_readLog()

  def send_readLog(self, apiSessionId, timestampStart, timestampEnd, exclusiveStart):
    self._oprot.writeMessageBegin('readLog', TMessageType.CALL, self._seqid)
    args = readLog_args()
    args.apiSessionId = apiSessionId
    args.timestampStart = timestampStart
    args.timestampEnd = timestampEnd
    args.exclusiveStart = exclusiveStart
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_readLog(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = readLog_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "readLog failed: unknown result");

  def createUser(self, apiSessionId, oxygenId, email, corporateUserName, firstName, lastName, password):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - email
     - corporateUserName
     - firstName
     - lastName
     - password
    """
    self.send_createUser(apiSessionId, oxygenId, email, corporateUserName, firstName, lastName, password)
    return self.recv_createUser()

  def send_createUser(self, apiSessionId, oxygenId, email, corporateUserName, firstName, lastName, password):
    self._oprot.writeMessageBegin('createUser', TMessageType.CALL, self._seqid)
    args = createUser_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.email = email
    args.corporateUserName = corporateUserName
    args.firstName = firstName
    args.lastName = lastName
    args.password = password
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createUser failed: unknown result");

  def getAllUsers(self, apiSessionId, offset):
    """
    Parameters:
     - apiSessionId
     - offset
    """
    self.send_getAllUsers(apiSessionId, offset)
    return self.recv_getAllUsers()

  def send_getAllUsers(self, apiSessionId, offset):
    self._oprot.writeMessageBegin('getAllUsers', TMessageType.CALL, self._seqid)
    args = getAllUsers_args()
    args.apiSessionId = apiSessionId
    args.offset = offset
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllUsers(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllUsers_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllUsers failed: unknown result");

  def getGuestUsers(self, apiSessionId):
    """
    Parameters:
     - apiSessionId
    """
    self.send_getGuestUsers(apiSessionId)
    return self.recv_getGuestUsers()

  def send_getGuestUsers(self, apiSessionId):
    self._oprot.writeMessageBegin('getGuestUsers', TMessageType.CALL, self._seqid)
    args = getGuestUsers_args()
    args.apiSessionId = apiSessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGuestUsers(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getGuestUsers_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGuestUsers failed: unknown result");

  def getUserByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    self.send_getUserByOxygenId(apiSessionId, oxygenId)
    return self.recv_getUserByOxygenId()

  def send_getUserByOxygenId(self, apiSessionId, oxygenId):
    self._oprot.writeMessageBegin('getUserByOxygenId', TMessageType.CALL, self._seqid)
    args = getUserByOxygenId_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserByOxygenId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUserByOxygenId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserByOxygenId failed: unknown result");

  def getUserByExternalId(self, apiSessionId, externalId):
    """
    Parameters:
     - apiSessionId
     - externalId
    """
    self.send_getUserByExternalId(apiSessionId, externalId)
    return self.recv_getUserByExternalId()

  def send_getUserByExternalId(self, apiSessionId, externalId):
    self._oprot.writeMessageBegin('getUserByExternalId', TMessageType.CALL, self._seqid)
    args = getUserByExternalId_args()
    args.apiSessionId = apiSessionId
    args.externalId = externalId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserByExternalId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUserByExternalId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserByExternalId failed: unknown result");

  def disableUserByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    self.send_disableUserByOxygenId(apiSessionId, oxygenId)
    return self.recv_disableUserByOxygenId()

  def send_disableUserByOxygenId(self, apiSessionId, oxygenId):
    self._oprot.writeMessageBegin('disableUserByOxygenId', TMessageType.CALL, self._seqid)
    args = disableUserByOxygenId_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_disableUserByOxygenId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = disableUserByOxygenId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "disableUserByOxygenId failed: unknown result");

  def enableUserByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    self.send_enableUserByOxygenId(apiSessionId, oxygenId)
    return self.recv_enableUserByOxygenId()

  def send_enableUserByOxygenId(self, apiSessionId, oxygenId):
    self._oprot.writeMessageBegin('enableUserByOxygenId', TMessageType.CALL, self._seqid)
    args = enableUserByOxygenId_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_enableUserByOxygenId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = enableUserByOxygenId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "enableUserByOxygenId failed: unknown result");

  def deleteUserByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    self.send_deleteUserByOxygenId(apiSessionId, oxygenId)
    return self.recv_deleteUserByOxygenId()

  def send_deleteUserByOxygenId(self, apiSessionId, oxygenId):
    self._oprot.writeMessageBegin('deleteUserByOxygenId', TMessageType.CALL, self._seqid)
    args = deleteUserByOxygenId_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteUserByOxygenId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteUserByOxygenId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "deleteUserByOxygenId failed: unknown result");

  def updateUserOxygenId(self, apiSessionId, oxygenId, newOxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - newOxygenId
    """
    self.send_updateUserOxygenId(apiSessionId, oxygenId, newOxygenId)
    return self.recv_updateUserOxygenId()

  def send_updateUserOxygenId(self, apiSessionId, oxygenId, newOxygenId):
    self._oprot.writeMessageBegin('updateUserOxygenId', TMessageType.CALL, self._seqid)
    args = updateUserOxygenId_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.newOxygenId = newOxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateUserOxygenId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateUserOxygenId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateUserOxygenId failed: unknown result");

  def updateUserDetailsByOxygenId(self, apiSessionId, oxygenId, email, firstName, lastName, displayName):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - email
     - firstName
     - lastName
     - displayName
    """
    self.send_updateUserDetailsByOxygenId(apiSessionId, oxygenId, email, firstName, lastName, displayName)
    return self.recv_updateUserDetailsByOxygenId()

  def send_updateUserDetailsByOxygenId(self, apiSessionId, oxygenId, email, firstName, lastName, displayName):
    self._oprot.writeMessageBegin('updateUserDetailsByOxygenId', TMessageType.CALL, self._seqid)
    args = updateUserDetailsByOxygenId_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.email = email
    args.firstName = firstName
    args.lastName = lastName
    args.displayName = displayName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateUserDetailsByOxygenId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateUserDetailsByOxygenId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "updateUserDetailsByOxygenId failed: unknown result");

  def createSpace(self, apiSessionId, name, description, ownerOxygenId, storageName, capacity, listed, writableDefault):
    """
    Parameters:
     - apiSessionId
     - name
     - description
     - ownerOxygenId
     - storageName
     - capacity
     - listed
     - writableDefault
    """
    self.send_createSpace(apiSessionId, name, description, ownerOxygenId, storageName, capacity, listed, writableDefault)
    return self.recv_createSpace()

  def send_createSpace(self, apiSessionId, name, description, ownerOxygenId, storageName, capacity, listed, writableDefault):
    self._oprot.writeMessageBegin('createSpace', TMessageType.CALL, self._seqid)
    args = createSpace_args()
    args.apiSessionId = apiSessionId
    args.name = name
    args.description = description
    args.ownerOxygenId = ownerOxygenId
    args.storageName = storageName
    args.capacity = capacity
    args.listed = listed
    args.writableDefault = writableDefault
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createSpace failed: unknown result");

  def getSpaceBySpaceId(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
    """
    self.send_getSpaceBySpaceId(apiSessionId, spaceOid, repositoryNodeServiceId)
    return self.recv_getSpaceBySpaceId()

  def send_getSpaceBySpaceId(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('getSpaceBySpaceId', TMessageType.CALL, self._seqid)
    args = getSpaceBySpaceId_args()
    args.apiSessionId = apiSessionId
    args.spaceOid = spaceOid
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSpaceBySpaceId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSpaceBySpaceId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSpaceBySpaceId failed: unknown result");

  def getSpaceBySpaceName(self, apiSessionId, spaceName):
    """
    Parameters:
     - apiSessionId
     - spaceName
    """
    self.send_getSpaceBySpaceName(apiSessionId, spaceName)
    return self.recv_getSpaceBySpaceName()

  def send_getSpaceBySpaceName(self, apiSessionId, spaceName):
    self._oprot.writeMessageBegin('getSpaceBySpaceName', TMessageType.CALL, self._seqid)
    args = getSpaceBySpaceName_args()
    args.apiSessionId = apiSessionId
    args.spaceName = spaceName
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSpaceBySpaceName(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSpaceBySpaceName_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSpaceBySpaceName failed: unknown result");

  def getUserVolumeByOxygenId(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    self.send_getUserVolumeByOxygenId(apiSessionId, oxygenId)
    return self.recv_getUserVolumeByOxygenId()

  def send_getUserVolumeByOxygenId(self, apiSessionId, oxygenId):
    self._oprot.writeMessageBegin('getUserVolumeByOxygenId', TMessageType.CALL, self._seqid)
    args = getUserVolumeByOxygenId_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getUserVolumeByOxygenId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getUserVolumeByOxygenId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getUserVolumeByOxygenId failed: unknown result");

  def getSubscriptionsForUser(self, apiSessionId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
    """
    self.send_getSubscriptionsForUser(apiSessionId, oxygenId)
    return self.recv_getSubscriptionsForUser()

  def send_getSubscriptionsForUser(self, apiSessionId, oxygenId):
    self._oprot.writeMessageBegin('getSubscriptionsForUser', TMessageType.CALL, self._seqid)
    args = getSubscriptionsForUser_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSubscriptionsForUser(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSubscriptionsForUser_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSubscriptionsForUser failed: unknown result");

  def modifySpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, spaceName, description, ownerOxygenId, capacity, listed, writableDefault):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - spaceName
     - description
     - ownerOxygenId
     - capacity
     - listed
     - writableDefault
    """
    self.send_modifySpace(apiSessionId, spaceOid, repositoryNodeServiceId, spaceName, description, ownerOxygenId, capacity, listed, writableDefault)
    return self.recv_modifySpace()

  def send_modifySpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, spaceName, description, ownerOxygenId, capacity, listed, writableDefault):
    self._oprot.writeMessageBegin('modifySpace', TMessageType.CALL, self._seqid)
    args = modifySpace_args()
    args.apiSessionId = apiSessionId
    args.spaceOid = spaceOid
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.spaceName = spaceName
    args.description = description
    args.ownerOxygenId = ownerOxygenId
    args.capacity = capacity
    args.listed = listed
    args.writableDefault = writableDefault
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_modifySpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = modifySpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "modifySpace failed: unknown result");

  def modifyUserVolumeCapacityByOxygenId(self, apiSessionId, oxygenId, capacity):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - capacity
    """
    self.send_modifyUserVolumeCapacityByOxygenId(apiSessionId, oxygenId, capacity)
    self.recv_modifyUserVolumeCapacityByOxygenId()

  def send_modifyUserVolumeCapacityByOxygenId(self, apiSessionId, oxygenId, capacity):
    self._oprot.writeMessageBegin('modifyUserVolumeCapacityByOxygenId', TMessageType.CALL, self._seqid)
    args = modifyUserVolumeCapacityByOxygenId_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.capacity = capacity
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_modifyUserVolumeCapacityByOxygenId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = modifyUserVolumeCapacityByOxygenId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def deleteSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
    """
    self.send_deleteSpace(apiSessionId, spaceOid, repositoryNodeServiceId)
    self.recv_deleteSpace()

  def send_deleteSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('deleteSpace', TMessageType.CALL, self._seqid)
    args = deleteSpace_args()
    args.apiSessionId = apiSessionId
    args.spaceOid = spaceOid
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_deleteSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = deleteSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def getSubscriptionsForSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
    """
    self.send_getSubscriptionsForSpace(apiSessionId, spaceOid, repositoryNodeServiceId)
    return self.recv_getSubscriptionsForSpace()

  def send_getSubscriptionsForSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId):
    self._oprot.writeMessageBegin('getSubscriptionsForSpace', TMessageType.CALL, self._seqid)
    args = getSubscriptionsForSpace_args()
    args.apiSessionId = apiSessionId
    args.spaceOid = spaceOid
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getSubscriptionsForSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getSubscriptionsForSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getSubscriptionsForSpace failed: unknown result");

  def addUserToSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, oxygenId, canWrite, canManage):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - oxygenId
     - canWrite
     - canManage
    """
    self.send_addUserToSpace(apiSessionId, spaceOid, repositoryNodeServiceId, oxygenId, canWrite, canManage)
    self.recv_addUserToSpace()

  def send_addUserToSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, oxygenId, canWrite, canManage):
    self._oprot.writeMessageBegin('addUserToSpace', TMessageType.CALL, self._seqid)
    args = addUserToSpace_args()
    args.apiSessionId = apiSessionId
    args.spaceOid = spaceOid
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.oxygenId = oxygenId
    args.canWrite = canWrite
    args.canManage = canManage
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addUserToSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addUserToSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def removeUserFromSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, oxygenId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - oxygenId
    """
    self.send_removeUserFromSpace(apiSessionId, spaceOid, repositoryNodeServiceId, oxygenId)
    self.recv_removeUserFromSpace()

  def send_removeUserFromSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, oxygenId):
    self._oprot.writeMessageBegin('removeUserFromSpace', TMessageType.CALL, self._seqid)
    args = removeUserFromSpace_args()
    args.apiSessionId = apiSessionId
    args.spaceOid = spaceOid
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.oxygenId = oxygenId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeUserFromSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeUserFromSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def addGroupToSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, groupId, canWrite, canManage):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - groupId
     - canWrite
     - canManage
    """
    self.send_addGroupToSpace(apiSessionId, spaceOid, repositoryNodeServiceId, groupId, canWrite, canManage)
    self.recv_addGroupToSpace()

  def send_addGroupToSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, groupId, canWrite, canManage):
    self._oprot.writeMessageBegin('addGroupToSpace', TMessageType.CALL, self._seqid)
    args = addGroupToSpace_args()
    args.apiSessionId = apiSessionId
    args.spaceOid = spaceOid
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.groupId = groupId
    args.canWrite = canWrite
    args.canManage = canManage
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addGroupToSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addGroupToSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def removeGroupFromSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, groupId):
    """
    Parameters:
     - apiSessionId
     - spaceOid
     - repositoryNodeServiceId
     - groupId
    """
    self.send_removeGroupFromSpace(apiSessionId, spaceOid, repositoryNodeServiceId, groupId)
    self.recv_removeGroupFromSpace()

  def send_removeGroupFromSpace(self, apiSessionId, spaceOid, repositoryNodeServiceId, groupId):
    self._oprot.writeMessageBegin('removeGroupFromSpace', TMessageType.CALL, self._seqid)
    args = removeGroupFromSpace_args()
    args.apiSessionId = apiSessionId
    args.spaceOid = spaceOid
    args.repositoryNodeServiceId = repositoryNodeServiceId
    args.groupId = groupId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeGroupFromSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeGroupFromSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def addUserToGroup(self, apiSessionId, oxygenId, groupId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - groupId
    """
    self.send_addUserToGroup(apiSessionId, oxygenId, groupId)
    self.recv_addUserToGroup()

  def send_addUserToGroup(self, apiSessionId, oxygenId, groupId):
    self._oprot.writeMessageBegin('addUserToGroup', TMessageType.CALL, self._seqid)
    args = addUserToGroup_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.groupId = groupId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_addUserToGroup(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = addUserToGroup_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def removeUserFromGroup(self, apiSessionId, oxygenId, groupId):
    """
    Parameters:
     - apiSessionId
     - oxygenId
     - groupId
    """
    self.send_removeUserFromGroup(apiSessionId, oxygenId, groupId)
    self.recv_removeUserFromGroup()

  def send_removeUserFromGroup(self, apiSessionId, oxygenId, groupId):
    self._oprot.writeMessageBegin('removeUserFromGroup', TMessageType.CALL, self._seqid)
    args = removeUserFromGroup_args()
    args.apiSessionId = apiSessionId
    args.oxygenId = oxygenId
    args.groupId = groupId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_removeUserFromGroup(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = removeUserFromGroup_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def getAllGroups(self, apiSessionId):
    """
    Parameters:
     - apiSessionId
    """
    self.send_getAllGroups(apiSessionId)
    return self.recv_getAllGroups()

  def send_getAllGroups(self, apiSessionId):
    self._oprot.writeMessageBegin('getAllGroups', TMessageType.CALL, self._seqid)
    args = getAllGroups_args()
    args.apiSessionId = apiSessionId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getAllGroups(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getAllGroups_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getAllGroups failed: unknown result");

  def createGroup(self, apiSessionId, name):
    """
    Parameters:
     - apiSessionId
     - name
    """
    self.send_createGroup(apiSessionId, name)
    return self.recv_createGroup()

  def send_createGroup(self, apiSessionId, name):
    self._oprot.writeMessageBegin('createGroup', TMessageType.CALL, self._seqid)
    args = createGroup_args()
    args.apiSessionId = apiSessionId
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_createGroup(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = createGroup_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "createGroup failed: unknown result");

  def updateGroupDetailsByGroupId(self, apiSessionId, groupId, name):
    """
    Parameters:
     - apiSessionId
     - groupId
     - name
    """
    self.send_updateGroupDetailsByGroupId(apiSessionId, groupId, name)
    self.recv_updateGroupDetailsByGroupId()

  def send_updateGroupDetailsByGroupId(self, apiSessionId, groupId, name):
    self._oprot.writeMessageBegin('updateGroupDetailsByGroupId', TMessageType.CALL, self._seqid)
    args = updateGroupDetailsByGroupId_args()
    args.apiSessionId = apiSessionId
    args.groupId = groupId
    args.name = name
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGroupDetailsByGroupId(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateGroupDetailsByGroupId_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def getGroupPermissions(self, apiSessionId, groupId):
    """
    Parameters:
     - apiSessionId
     - groupId
    """
    self.send_getGroupPermissions(apiSessionId, groupId)
    return self.recv_getGroupPermissions()

  def send_getGroupPermissions(self, apiSessionId, groupId):
    self._oprot.writeMessageBegin('getGroupPermissions', TMessageType.CALL, self._seqid)
    args = getGroupPermissions_args()
    args.apiSessionId = apiSessionId
    args.groupId = groupId
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_getGroupPermissions(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = getGroupPermissions_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.success != None:
      return result.success
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    raise TApplicationException(TApplicationException.MISSING_RESULT, "getGroupPermissions failed: unknown result");

  def updateGroupPermissionAdmin(self, apiSessionId, groupId, allowed):
    """
    Parameters:
     - apiSessionId
     - groupId
     - allowed
    """
    self.send_updateGroupPermissionAdmin(apiSessionId, groupId, allowed)
    self.recv_updateGroupPermissionAdmin()

  def send_updateGroupPermissionAdmin(self, apiSessionId, groupId, allowed):
    self._oprot.writeMessageBegin('updateGroupPermissionAdmin', TMessageType.CALL, self._seqid)
    args = updateGroupPermissionAdmin_args()
    args.apiSessionId = apiSessionId
    args.groupId = groupId
    args.allowed = allowed
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGroupPermissionAdmin(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateGroupPermissionAdmin_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def updateGroupPermissionCreateSpace(self, apiSessionId, groupId, allowed):
    """
    Parameters:
     - apiSessionId
     - groupId
     - allowed
    """
    self.send_updateGroupPermissionCreateSpace(apiSessionId, groupId, allowed)
    self.recv_updateGroupPermissionCreateSpace()

  def send_updateGroupPermissionCreateSpace(self, apiSessionId, groupId, allowed):
    self._oprot.writeMessageBegin('updateGroupPermissionCreateSpace', TMessageType.CALL, self._seqid)
    args = updateGroupPermissionCreateSpace_args()
    args.apiSessionId = apiSessionId
    args.groupId = groupId
    args.allowed = allowed
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGroupPermissionCreateSpace(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateGroupPermissionCreateSpace_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def updateGroupPermissionInviteOutsideGuests(self, apiSessionId, groupId, allowed):
    """
    Parameters:
     - apiSessionId
     - groupId
     - allowed
    """
    self.send_updateGroupPermissionInviteOutsideGuests(apiSessionId, groupId, allowed)
    self.recv_updateGroupPermissionInviteOutsideGuests()

  def send_updateGroupPermissionInviteOutsideGuests(self, apiSessionId, groupId, allowed):
    self._oprot.writeMessageBegin('updateGroupPermissionInviteOutsideGuests', TMessageType.CALL, self._seqid)
    args = updateGroupPermissionInviteOutsideGuests_args()
    args.apiSessionId = apiSessionId
    args.groupId = groupId
    args.allowed = allowed
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGroupPermissionInviteOutsideGuests(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateGroupPermissionInviteOutsideGuests_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return

  def updateGroupPermissionPermanentDelete(self, apiSessionId, groupId, allowed):
    """
    Parameters:
     - apiSessionId
     - groupId
     - allowed
    """
    self.send_updateGroupPermissionPermanentDelete(apiSessionId, groupId, allowed)
    self.recv_updateGroupPermissionPermanentDelete()

  def send_updateGroupPermissionPermanentDelete(self, apiSessionId, groupId, allowed):
    self._oprot.writeMessageBegin('updateGroupPermissionPermanentDelete', TMessageType.CALL, self._seqid)
    args = updateGroupPermissionPermanentDelete_args()
    args.apiSessionId = apiSessionId
    args.groupId = groupId
    args.allowed = allowed
    args.write(self._oprot)
    self._oprot.writeMessageEnd()
    self._oprot.trans.flush()

  def recv_updateGroupPermissionPermanentDelete(self, ):
    (fname, mtype, rseqid) = self._iprot.readMessageBegin()
    if mtype == TMessageType.EXCEPTION:
      x = TApplicationException()
      x.read(self._iprot)
      self._iprot.readMessageEnd()
      raise x
    result = updateGroupPermissionPermanentDelete_result()
    result.read(self._iprot)
    self._iprot.readMessageEnd()
    if result.aunxe != None:
      raise result.aunxe
    if result.ainie != None:
      raise result.ainie
    if result.asyse != None:
      raise result.asyse
    if result.arule != None:
      raise result.arule
    if result.asese != None:
      raise result.asese
    return


class Processor(Iface, TProcessor):
  def __init__(self, handler):
    self._handler = handler
    self._processMap = {}
    self._processMap["getInfo"] = Processor.process_getInfo
    self._processMap["getInfoService"] = Processor.process_getInfoService
    self._processMap["signupNewUser"] = Processor.process_signupNewUser
    self._processMap["signupNewInternalUser"] = Processor.process_signupNewInternalUser
    self._processMap["createPendingExternalEnterpriseUser"] = Processor.process_createPendingExternalEnterpriseUser
    self._processMap["signupPendingUserToEnterprise"] = Processor.process_signupPendingUserToEnterprise
    self._processMap["activatePendingUserToEnterprise"] = Processor.process_activatePendingUserToEnterprise
    self._processMap["provisionNewUserToAccount"] = Processor.process_provisionNewUserToAccount
    self._processMap["requestLogin"] = Processor.process_requestLogin
    self._processMap["validateLogin"] = Processor.process_validateLogin
    self._processMap["validateLoginAndDevice"] = Processor.process_validateLoginAndDevice
    self._processMap["registerDevice"] = Processor.process_registerDevice
    self._processMap["changeDeviceOwner"] = Processor.process_changeDeviceOwner
    self._processMap["requestDeviceRegistration"] = Processor.process_requestDeviceRegistration
    self._processMap["loginInternalUser"] = Processor.process_loginInternalUser
    self._processMap["loginAdminUser"] = Processor.process_loginAdminUser
    self._processMap["logout"] = Processor.process_logout
    self._processMap["isExternalUser"] = Processor.process_isExternalUser
    self._processMap["isExternalAccount"] = Processor.process_isExternalAccount
    self._processMap["getExternalGatewayUrl"] = Processor.process_getExternalGatewayUrl
    self._processMap["getUserInfoBySessionId"] = Processor.process_getUserInfoBySessionId
    self._processMap["findSpaces"] = Processor.process_findSpaces
    self._processMap["findChildFiles"] = Processor.process_findChildFiles
    self._processMap["getChildObjects"] = Processor.process_getChildObjects
    self._processMap["findModifiedFilesInSpace"] = Processor.process_findModifiedFilesInSpace
    self._processMap["findSpaceById"] = Processor.process_findSpaceById
    self._processMap["findFileById"] = Processor.process_findFileById
    self._processMap["findObjectById"] = Processor.process_findObjectById
    self._processMap["createWeblinkUrl"] = Processor.process_createWeblinkUrl
    self._processMap["createWeblinkUrlForObject"] = Processor.process_createWeblinkUrlForObject
    self._processMap["expireWeblinks"] = Processor.process_expireWeblinks
    self._processMap["expireWeblinksForObject"] = Processor.process_expireWeblinksForObject
    self._processMap["findFileByParentAndName"] = Processor.process_findFileByParentAndName
    self._processMap["findFileByPath"] = Processor.process_findFileByPath
    self._processMap["deleteFile"] = Processor.process_deleteFile
    self._processMap["deleteObject"] = Processor.process_deleteObject
    self._processMap["moveFile"] = Processor.process_moveFile
    self._processMap["moveObject"] = Processor.process_moveObject
    self._processMap["copyFile"] = Processor.process_copyFile
    self._processMap["copyObject"] = Processor.process_copyObject
    self._processMap["createFolder"] = Processor.process_createFolder
    self._processMap["createFolderObject"] = Processor.process_createFolderObject
    self._processMap["createDownload"] = Processor.process_createDownload
    self._processMap["createDownloadObject"] = Processor.process_createDownloadObject
    self._processMap["createUpload"] = Processor.process_createUpload
    self._processMap["createUploadObject"] = Processor.process_createUploadObject
    self._processMap["confirmUpload"] = Processor.process_confirmUpload
    self._processMap["confirmUploadObject"] = Processor.process_confirmUploadObject
    self._processMap["readLog"] = Processor.process_readLog
    self._processMap["createUser"] = Processor.process_createUser
    self._processMap["getAllUsers"] = Processor.process_getAllUsers
    self._processMap["getGuestUsers"] = Processor.process_getGuestUsers
    self._processMap["getUserByOxygenId"] = Processor.process_getUserByOxygenId
    self._processMap["getUserByExternalId"] = Processor.process_getUserByExternalId
    self._processMap["disableUserByOxygenId"] = Processor.process_disableUserByOxygenId
    self._processMap["enableUserByOxygenId"] = Processor.process_enableUserByOxygenId
    self._processMap["deleteUserByOxygenId"] = Processor.process_deleteUserByOxygenId
    self._processMap["updateUserOxygenId"] = Processor.process_updateUserOxygenId
    self._processMap["updateUserDetailsByOxygenId"] = Processor.process_updateUserDetailsByOxygenId
    self._processMap["createSpace"] = Processor.process_createSpace
    self._processMap["getSpaceBySpaceId"] = Processor.process_getSpaceBySpaceId
    self._processMap["getSpaceBySpaceName"] = Processor.process_getSpaceBySpaceName
    self._processMap["getUserVolumeByOxygenId"] = Processor.process_getUserVolumeByOxygenId
    self._processMap["getSubscriptionsForUser"] = Processor.process_getSubscriptionsForUser
    self._processMap["modifySpace"] = Processor.process_modifySpace
    self._processMap["modifyUserVolumeCapacityByOxygenId"] = Processor.process_modifyUserVolumeCapacityByOxygenId
    self._processMap["deleteSpace"] = Processor.process_deleteSpace
    self._processMap["getSubscriptionsForSpace"] = Processor.process_getSubscriptionsForSpace
    self._processMap["addUserToSpace"] = Processor.process_addUserToSpace
    self._processMap["removeUserFromSpace"] = Processor.process_removeUserFromSpace
    self._processMap["addGroupToSpace"] = Processor.process_addGroupToSpace
    self._processMap["removeGroupFromSpace"] = Processor.process_removeGroupFromSpace
    self._processMap["addUserToGroup"] = Processor.process_addUserToGroup
    self._processMap["removeUserFromGroup"] = Processor.process_removeUserFromGroup
    self._processMap["getAllGroups"] = Processor.process_getAllGroups
    self._processMap["createGroup"] = Processor.process_createGroup
    self._processMap["updateGroupDetailsByGroupId"] = Processor.process_updateGroupDetailsByGroupId
    self._processMap["getGroupPermissions"] = Processor.process_getGroupPermissions
    self._processMap["updateGroupPermissionAdmin"] = Processor.process_updateGroupPermissionAdmin
    self._processMap["updateGroupPermissionCreateSpace"] = Processor.process_updateGroupPermissionCreateSpace
    self._processMap["updateGroupPermissionInviteOutsideGuests"] = Processor.process_updateGroupPermissionInviteOutsideGuests
    self._processMap["updateGroupPermissionPermanentDelete"] = Processor.process_updateGroupPermissionPermanentDelete

  def process(self, iprot, oprot):
    (name, type, seqid) = iprot.readMessageBegin()
    if name not in self._processMap:
      iprot.skip(TType.STRUCT)
      iprot.readMessageEnd()
      x = TApplicationException(TApplicationException.UNKNOWN_METHOD, 'Unknown function %s' % (name))
      oprot.writeMessageBegin(name, TMessageType.EXCEPTION, seqid)
      x.write(oprot)
      oprot.writeMessageEnd()
      oprot.trans.flush()
      return
    else:
      self._processMap[name](self, seqid, iprot, oprot)
    return True

  def process_getInfo(self, seqid, iprot, oprot):
    args = getInfo_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getInfo_result()
    try:
      result.success = self._handler.getInfo()
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    oprot.writeMessageBegin("getInfo", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getInfoService(self, seqid, iprot, oprot):
    args = getInfoService_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getInfoService_result()
    try:
      result.success = self._handler.getInfoService(args.serviceId, args.serviceName)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    oprot.writeMessageBegin("getInfoService", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_signupNewUser(self, seqid, iprot, oprot):
    args = signupNewUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = signupNewUser_result()
    try:
      result.success = self._handler.signupNewUser(args.apiKey, args.localeString, args.email, args.password, args.loginId, args.activationCode, args.sessionOption)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    oprot.writeMessageBegin("signupNewUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_signupNewInternalUser(self, seqid, iprot, oprot):
    args = signupNewInternalUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = signupNewInternalUser_result()
    try:
      result.success = self._handler.signupNewInternalUser(args.apiKey, args.localeString, args.email, args.password, args.loginId, args.activationCode, args.sessionOption)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    oprot.writeMessageBegin("signupNewInternalUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createPendingExternalEnterpriseUser(self, seqid, iprot, oprot):
    args = createPendingExternalEnterpriseUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createPendingExternalEnterpriseUser_result()
    try:
      result.success = self._handler.createPendingExternalEnterpriseUser(args.apiKey, args.activationCode, args.accountId, args.email, args.ipAddress, args.rurl, args.locale)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    oprot.writeMessageBegin("createPendingExternalEnterpriseUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_signupPendingUserToEnterprise(self, seqid, iprot, oprot):
    args = signupPendingUserToEnterprise_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = signupPendingUserToEnterprise_result()
    try:
      self._handler.signupPendingUserToEnterprise(args.apiKey, args.activationCode, args.accountId, args.email, args.ipAddress, args.checkEmailDomain, args.customMessage, args.locale)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    oprot.writeMessageBegin("signupPendingUserToEnterprise", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_activatePendingUserToEnterprise(self, seqid, iprot, oprot):
    args = activatePendingUserToEnterprise_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = activatePendingUserToEnterprise_result()
    try:
      self._handler.activatePendingUserToEnterprise(args.apiKey, args.acode, args.ecode, args.firstName, args.lastName, args.email, args.password, args.oxygenId, args.externalLoginId, args.optIn, args.localString)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    oprot.writeMessageBegin("activatePendingUserToEnterprise", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_provisionNewUserToAccount(self, seqid, iprot, oprot):
    args = provisionNewUserToAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = provisionNewUserToAccount_result()
    try:
      self._handler.provisionNewUserToAccount(args.apiKey, args.networkAccountOid, args.loginId, args.firstName, args.lastName, args.email, args.password, args.securityQuestion, args.securityAnswer, args.activationCode, args.optionalExternalLoginId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    oprot.writeMessageBegin("provisionNewUserToAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_requestLogin(self, seqid, iprot, oprot):
    args = requestLogin_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = requestLogin_result()
    try:
      result.success = self._handler.requestLogin(args.apiKey)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    oprot.writeMessageBegin("requestLogin", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_validateLogin(self, seqid, iprot, oprot):
    args = validateLogin_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = validateLogin_result()
    try:
      result.success = self._handler.validateLogin(args.apiKey, args.tokenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("validateLogin", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_validateLoginAndDevice(self, seqid, iprot, oprot):
    args = validateLoginAndDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = validateLoginAndDevice_result()
    try:
      result.success = self._handler.validateLoginAndDevice(args.apiKey, args.tokenId, args.deviceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("validateLoginAndDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_registerDevice(self, seqid, iprot, oprot):
    args = registerDevice_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = registerDevice_result()
    try:
      self._handler.registerDevice(args.sessionId, args.deviceId, args.status, args.deviceDescription)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("registerDevice", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_changeDeviceOwner(self, seqid, iprot, oprot):
    args = changeDeviceOwner_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = changeDeviceOwner_result()
    try:
      self._handler.changeDeviceOwner(args.sessionId, args.deviceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("changeDeviceOwner", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_requestDeviceRegistration(self, seqid, iprot, oprot):
    args = requestDeviceRegistration_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = requestDeviceRegistration_result()
    try:
      self._handler.requestDeviceRegistration(args.sessionId, args.deviceId, args.deviceDescription)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("requestDeviceRegistration", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_loginInternalUser(self, seqid, iprot, oprot):
    args = loginInternalUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = loginInternalUser_result()
    try:
      result.success = self._handler.loginInternalUser(args.apiKey, args.tokenId, args.rurl, args.appId, args.oxygenId, args.password)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("loginInternalUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_loginAdminUser(self, seqid, iprot, oprot):
    args = loginAdminUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = loginAdminUser_result()
    try:
      result.success = self._handler.loginAdminUser(args.apiKey, args.oxygenId, args.password)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("loginAdminUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_logout(self, seqid, iprot, oprot):
    args = logout_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = logout_result()
    try:
      self._handler.logout(args.apiSessionId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("logout", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isExternalUser(self, seqid, iprot, oprot):
    args = isExternalUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isExternalUser_result()
    try:
      result.success = self._handler.isExternalUser(args.apiKey, args.oxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("isExternalUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_isExternalAccount(self, seqid, iprot, oprot):
    args = isExternalAccount_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = isExternalAccount_result()
    try:
      result.success = self._handler.isExternalAccount(args.apiKey, args.accountId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("isExternalAccount", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getExternalGatewayUrl(self, seqid, iprot, oprot):
    args = getExternalGatewayUrl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getExternalGatewayUrl_result()
    try:
      result.success = self._handler.getExternalGatewayUrl(args.apiKey, args.oxygenId, args.returnURL, args.webAppId, args.reuseAuthenticationTokenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getExternalGatewayUrl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUserInfoBySessionId(self, seqid, iprot, oprot):
    args = getUserInfoBySessionId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUserInfoBySessionId_result()
    try:
      result.success = self._handler.getUserInfoBySessionId(args.sessionId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getUserInfoBySessionId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findSpaces(self, seqid, iprot, oprot):
    args = findSpaces_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findSpaces_result()
    try:
      result.success = self._handler.findSpaces(args.apiSessionId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("findSpaces", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findChildFiles(self, seqid, iprot, oprot):
    args = findChildFiles_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findChildFiles_result()
    try:
      result.success = self._handler.findChildFiles(args.apiSessionId, args.repositoryNodeServiceId, args.spaceId, args.parentId, args.modifiedSince)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("findChildFiles", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getChildObjects(self, seqid, iprot, oprot):
    args = getChildObjects_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getChildObjects_result()
    try:
      result.success = self._handler.getChildObjects(args.apiSessionId, args.parent, args.modifiedSince)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getChildObjects", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findModifiedFilesInSpace(self, seqid, iprot, oprot):
    args = findModifiedFilesInSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findModifiedFilesInSpace_result()
    try:
      result.success = self._handler.findModifiedFilesInSpace(args.apiSessionId, args.repositoryNodeServiceId, args.spaceId, args.limit)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("findModifiedFilesInSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findSpaceById(self, seqid, iprot, oprot):
    args = findSpaceById_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findSpaceById_result()
    try:
      result.success = self._handler.findSpaceById(args.apiSessionId, args.spaceId, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("findSpaceById", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findFileById(self, seqid, iprot, oprot):
    args = findFileById_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findFileById_result()
    try:
      result.success = self._handler.findFileById(args.apiSessionId, args.spaceId, args.fileId, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("findFileById", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findObjectById(self, seqid, iprot, oprot):
    args = findObjectById_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findObjectById_result()
    try:
      result.success = self._handler.findObjectById(args.apiSessionId, args.spaceId, args.fileId, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("findObjectById", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createWeblinkUrl(self, seqid, iprot, oprot):
    args = createWeblinkUrl_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createWeblinkUrl_result()
    try:
      result.success = self._handler.createWeblinkUrl(args.apiSessionId, args.file, args.expireInXMinutes, args.password)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createWeblinkUrl", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createWeblinkUrlForObject(self, seqid, iprot, oprot):
    args = createWeblinkUrlForObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createWeblinkUrlForObject_result()
    try:
      result.success = self._handler.createWeblinkUrlForObject(args.apiSessionId, args.file, args.expireInXMinutes, args.password)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createWeblinkUrlForObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_expireWeblinks(self, seqid, iprot, oprot):
    args = expireWeblinks_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = expireWeblinks_result()
    try:
      result.success = self._handler.expireWeblinks(args.apiSessionId, args.file)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("expireWeblinks", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_expireWeblinksForObject(self, seqid, iprot, oprot):
    args = expireWeblinksForObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = expireWeblinksForObject_result()
    try:
      result.success = self._handler.expireWeblinksForObject(args.apiSessionId, args.file)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("expireWeblinksForObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findFileByParentAndName(self, seqid, iprot, oprot):
    args = findFileByParentAndName_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findFileByParentAndName_result()
    try:
      result.success = self._handler.findFileByParentAndName(args.apiSessionId, args.spaceId, args.parentId, args.name, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("findFileByParentAndName", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_findFileByPath(self, seqid, iprot, oprot):
    args = findFileByPath_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = findFileByPath_result()
    try:
      result.success = self._handler.findFileByPath(args.apiSessionId, args.spaceId, args.path, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("findFileByPath", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteFile(self, seqid, iprot, oprot):
    args = deleteFile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteFile_result()
    try:
      self._handler.deleteFile(args.apiSessionId, args.file)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("deleteFile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteObject(self, seqid, iprot, oprot):
    args = deleteObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteObject_result()
    try:
      self._handler.deleteObject(args.apiSessionId, args.file)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("deleteObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_moveFile(self, seqid, iprot, oprot):
    args = moveFile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = moveFile_result()
    try:
      self._handler.moveFile(args.apiSessionId, args.source, args.newParentFolderId, args.newName)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("moveFile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_moveObject(self, seqid, iprot, oprot):
    args = moveObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = moveObject_result()
    try:
      self._handler.moveObject(args.apiSessionId, args.source, args.newParentFolderId, args.newName)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("moveObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copyFile(self, seqid, iprot, oprot):
    args = copyFile_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copyFile_result()
    try:
      self._handler.copyFile(args.apiSessionId, args.source, args.newParentFolderId, args.newName)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("copyFile", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_copyObject(self, seqid, iprot, oprot):
    args = copyObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = copyObject_result()
    try:
      self._handler.copyObject(args.apiSessionId, args.source, args.newParentFolderId, args.newName)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("copyObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createFolder(self, seqid, iprot, oprot):
    args = createFolder_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createFolder_result()
    try:
      result.success = self._handler.createFolder(args.apiSessionId, args.spaceId, args.parentId, args.name, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createFolder", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createFolderObject(self, seqid, iprot, oprot):
    args = createFolderObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createFolderObject_result()
    try:
      result.success = self._handler.createFolderObject(args.apiSessionId, args.parent, args.name)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createFolderObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createDownload(self, seqid, iprot, oprot):
    args = createDownload_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createDownload_result()
    try:
      result.success = self._handler.createDownload(args.apiSessionId, args.spaceId, args.fileId, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createDownload", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createDownloadObject(self, seqid, iprot, oprot):
    args = createDownloadObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createDownloadObject_result()
    try:
      result.success = self._handler.createDownloadObject(args.apiSessionId, args.apiObject)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createDownloadObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createUpload(self, seqid, iprot, oprot):
    args = createUpload_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createUpload_result()
    try:
      result.success = self._handler.createUpload(args.apiSessionId, args.spaceId, args.parentId, args.name, args.sizeInByte, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createUpload", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createUploadObject(self, seqid, iprot, oprot):
    args = createUploadObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createUploadObject_result()
    try:
      result.success = self._handler.createUploadObject(args.apiSessionId, args.parent, args.name, args.sizeInByte)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createUploadObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_confirmUpload(self, seqid, iprot, oprot):
    args = confirmUpload_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = confirmUpload_result()
    try:
      result.success = self._handler.confirmUpload(args.apiSessionId, args.spaceId, args.parentId, args.uploadId, args.name, args.hashValue, args.repositoryNodeServiceId, args.fileTimestampInSecsSinceEpoch)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("confirmUpload", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_confirmUploadObject(self, seqid, iprot, oprot):
    args = confirmUploadObject_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = confirmUploadObject_result()
    try:
      result.success = self._handler.confirmUploadObject(args.apiSessionId, args.parent, args.uploadId, args.name, args.hashValue, args.fileTimestampInSecsSinceEpoch)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("confirmUploadObject", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_readLog(self, seqid, iprot, oprot):
    args = readLog_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = readLog_result()
    try:
      result.success = self._handler.readLog(args.apiSessionId, args.timestampStart, args.timestampEnd, args.exclusiveStart)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("readLog", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createUser(self, seqid, iprot, oprot):
    args = createUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createUser_result()
    try:
      result.success = self._handler.createUser(args.apiSessionId, args.oxygenId, args.email, args.corporateUserName, args.firstName, args.lastName, args.password)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllUsers(self, seqid, iprot, oprot):
    args = getAllUsers_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllUsers_result()
    try:
      result.success = self._handler.getAllUsers(args.apiSessionId, args.offset)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getAllUsers", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getGuestUsers(self, seqid, iprot, oprot):
    args = getGuestUsers_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getGuestUsers_result()
    try:
      result.success = self._handler.getGuestUsers(args.apiSessionId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getGuestUsers", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUserByOxygenId(self, seqid, iprot, oprot):
    args = getUserByOxygenId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUserByOxygenId_result()
    try:
      result.success = self._handler.getUserByOxygenId(args.apiSessionId, args.oxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getUserByOxygenId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUserByExternalId(self, seqid, iprot, oprot):
    args = getUserByExternalId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUserByExternalId_result()
    try:
      result.success = self._handler.getUserByExternalId(args.apiSessionId, args.externalId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getUserByExternalId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_disableUserByOxygenId(self, seqid, iprot, oprot):
    args = disableUserByOxygenId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = disableUserByOxygenId_result()
    try:
      result.success = self._handler.disableUserByOxygenId(args.apiSessionId, args.oxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("disableUserByOxygenId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_enableUserByOxygenId(self, seqid, iprot, oprot):
    args = enableUserByOxygenId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = enableUserByOxygenId_result()
    try:
      result.success = self._handler.enableUserByOxygenId(args.apiSessionId, args.oxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("enableUserByOxygenId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteUserByOxygenId(self, seqid, iprot, oprot):
    args = deleteUserByOxygenId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteUserByOxygenId_result()
    try:
      result.success = self._handler.deleteUserByOxygenId(args.apiSessionId, args.oxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("deleteUserByOxygenId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateUserOxygenId(self, seqid, iprot, oprot):
    args = updateUserOxygenId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateUserOxygenId_result()
    try:
      result.success = self._handler.updateUserOxygenId(args.apiSessionId, args.oxygenId, args.newOxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("updateUserOxygenId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateUserDetailsByOxygenId(self, seqid, iprot, oprot):
    args = updateUserDetailsByOxygenId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateUserDetailsByOxygenId_result()
    try:
      result.success = self._handler.updateUserDetailsByOxygenId(args.apiSessionId, args.oxygenId, args.email, args.firstName, args.lastName, args.displayName)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("updateUserDetailsByOxygenId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createSpace(self, seqid, iprot, oprot):
    args = createSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createSpace_result()
    try:
      result.success = self._handler.createSpace(args.apiSessionId, args.name, args.description, args.ownerOxygenId, args.storageName, args.capacity, args.listed, args.writableDefault)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSpaceBySpaceId(self, seqid, iprot, oprot):
    args = getSpaceBySpaceId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSpaceBySpaceId_result()
    try:
      result.success = self._handler.getSpaceBySpaceId(args.apiSessionId, args.spaceOid, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getSpaceBySpaceId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSpaceBySpaceName(self, seqid, iprot, oprot):
    args = getSpaceBySpaceName_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSpaceBySpaceName_result()
    try:
      result.success = self._handler.getSpaceBySpaceName(args.apiSessionId, args.spaceName)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getSpaceBySpaceName", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getUserVolumeByOxygenId(self, seqid, iprot, oprot):
    args = getUserVolumeByOxygenId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getUserVolumeByOxygenId_result()
    try:
      result.success = self._handler.getUserVolumeByOxygenId(args.apiSessionId, args.oxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getUserVolumeByOxygenId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSubscriptionsForUser(self, seqid, iprot, oprot):
    args = getSubscriptionsForUser_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSubscriptionsForUser_result()
    try:
      result.success = self._handler.getSubscriptionsForUser(args.apiSessionId, args.oxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getSubscriptionsForUser", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_modifySpace(self, seqid, iprot, oprot):
    args = modifySpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = modifySpace_result()
    try:
      result.success = self._handler.modifySpace(args.apiSessionId, args.spaceOid, args.repositoryNodeServiceId, args.spaceName, args.description, args.ownerOxygenId, args.capacity, args.listed, args.writableDefault)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("modifySpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_modifyUserVolumeCapacityByOxygenId(self, seqid, iprot, oprot):
    args = modifyUserVolumeCapacityByOxygenId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = modifyUserVolumeCapacityByOxygenId_result()
    try:
      self._handler.modifyUserVolumeCapacityByOxygenId(args.apiSessionId, args.oxygenId, args.capacity)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("modifyUserVolumeCapacityByOxygenId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_deleteSpace(self, seqid, iprot, oprot):
    args = deleteSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = deleteSpace_result()
    try:
      self._handler.deleteSpace(args.apiSessionId, args.spaceOid, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("deleteSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getSubscriptionsForSpace(self, seqid, iprot, oprot):
    args = getSubscriptionsForSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getSubscriptionsForSpace_result()
    try:
      result.success = self._handler.getSubscriptionsForSpace(args.apiSessionId, args.spaceOid, args.repositoryNodeServiceId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getSubscriptionsForSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addUserToSpace(self, seqid, iprot, oprot):
    args = addUserToSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addUserToSpace_result()
    try:
      self._handler.addUserToSpace(args.apiSessionId, args.spaceOid, args.repositoryNodeServiceId, args.oxygenId, args.canWrite, args.canManage)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("addUserToSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeUserFromSpace(self, seqid, iprot, oprot):
    args = removeUserFromSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeUserFromSpace_result()
    try:
      self._handler.removeUserFromSpace(args.apiSessionId, args.spaceOid, args.repositoryNodeServiceId, args.oxygenId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("removeUserFromSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addGroupToSpace(self, seqid, iprot, oprot):
    args = addGroupToSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addGroupToSpace_result()
    try:
      self._handler.addGroupToSpace(args.apiSessionId, args.spaceOid, args.repositoryNodeServiceId, args.groupId, args.canWrite, args.canManage)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("addGroupToSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeGroupFromSpace(self, seqid, iprot, oprot):
    args = removeGroupFromSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeGroupFromSpace_result()
    try:
      self._handler.removeGroupFromSpace(args.apiSessionId, args.spaceOid, args.repositoryNodeServiceId, args.groupId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("removeGroupFromSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_addUserToGroup(self, seqid, iprot, oprot):
    args = addUserToGroup_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = addUserToGroup_result()
    try:
      self._handler.addUserToGroup(args.apiSessionId, args.oxygenId, args.groupId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("addUserToGroup", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_removeUserFromGroup(self, seqid, iprot, oprot):
    args = removeUserFromGroup_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = removeUserFromGroup_result()
    try:
      self._handler.removeUserFromGroup(args.apiSessionId, args.oxygenId, args.groupId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("removeUserFromGroup", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getAllGroups(self, seqid, iprot, oprot):
    args = getAllGroups_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getAllGroups_result()
    try:
      result.success = self._handler.getAllGroups(args.apiSessionId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getAllGroups", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_createGroup(self, seqid, iprot, oprot):
    args = createGroup_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = createGroup_result()
    try:
      result.success = self._handler.createGroup(args.apiSessionId, args.name)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("createGroup", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGroupDetailsByGroupId(self, seqid, iprot, oprot):
    args = updateGroupDetailsByGroupId_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGroupDetailsByGroupId_result()
    try:
      self._handler.updateGroupDetailsByGroupId(args.apiSessionId, args.groupId, args.name)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("updateGroupDetailsByGroupId", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_getGroupPermissions(self, seqid, iprot, oprot):
    args = getGroupPermissions_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = getGroupPermissions_result()
    try:
      result.success = self._handler.getGroupPermissions(args.apiSessionId, args.groupId)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("getGroupPermissions", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGroupPermissionAdmin(self, seqid, iprot, oprot):
    args = updateGroupPermissionAdmin_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGroupPermissionAdmin_result()
    try:
      self._handler.updateGroupPermissionAdmin(args.apiSessionId, args.groupId, args.allowed)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("updateGroupPermissionAdmin", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGroupPermissionCreateSpace(self, seqid, iprot, oprot):
    args = updateGroupPermissionCreateSpace_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGroupPermissionCreateSpace_result()
    try:
      self._handler.updateGroupPermissionCreateSpace(args.apiSessionId, args.groupId, args.allowed)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("updateGroupPermissionCreateSpace", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGroupPermissionInviteOutsideGuests(self, seqid, iprot, oprot):
    args = updateGroupPermissionInviteOutsideGuests_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGroupPermissionInviteOutsideGuests_result()
    try:
      self._handler.updateGroupPermissionInviteOutsideGuests(args.apiSessionId, args.groupId, args.allowed)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("updateGroupPermissionInviteOutsideGuests", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()

  def process_updateGroupPermissionPermanentDelete(self, seqid, iprot, oprot):
    args = updateGroupPermissionPermanentDelete_args()
    args.read(iprot)
    iprot.readMessageEnd()
    result = updateGroupPermissionPermanentDelete_result()
    try:
      self._handler.updateGroupPermissionPermanentDelete(args.apiSessionId, args.groupId, args.allowed)
    except errors.ttypes.ApiUnexpectedException, aunxe:
      result.aunxe = aunxe
    except errors.ttypes.ApiInvalidInputException, ainie:
      result.ainie = ainie
    except errors.ttypes.ApiSystemsException, asyse:
      result.asyse = asyse
    except errors.ttypes.ApiRuleException, arule:
      result.arule = arule
    except errors.ttypes.ApiSessionException, asese:
      result.asese = asese
    oprot.writeMessageBegin("updateGroupPermissionPermanentDelete", TMessageType.REPLY, seqid)
    result.write(oprot)
    oprot.writeMessageEnd()
    oprot.trans.flush()


# HELPER FUNCTIONS AND STRUCTURES

class getInfo_args:

  thrift_spec = (
  )

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getInfo_args')
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getInfo_result:
  """
  Attributes:
   - success
   - aunxe
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, aunxe=None,):
    self.success = success
    self.aunxe = aunxe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getInfo_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getInfoService_args:
  """
  Attributes:
   - serviceId
   - serviceName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'serviceId', None, None, ), # 1
    (2, TType.STRING, 'serviceName', None, None, ), # 2
  )

  def __init__(self, serviceId=None, serviceName=None,):
    self.serviceId = serviceId
    self.serviceName = serviceName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.serviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.serviceName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getInfoService_args')
    if self.serviceId != None:
      oprot.writeFieldBegin('serviceId', TType.STRING, 1)
      oprot.writeString(self.serviceId)
      oprot.writeFieldEnd()
    if self.serviceName != None:
      oprot.writeFieldBegin('serviceName', TType.STRING, 2)
      oprot.writeString(self.serviceName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getInfoService_result:
  """
  Attributes:
   - success
   - aunxe
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
  )

  def __init__(self, success=None, aunxe=None,):
    self.success = success
    self.aunxe = aunxe

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getInfoService_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class signupNewUser_args:
  """
  Attributes:
   - apiKey
   - localeString
   - email
   - password
   - loginId
   - activationCode
   - sessionOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'localeString', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
    (5, TType.STRING, 'loginId', None, None, ), # 5
    (6, TType.STRING, 'activationCode', None, None, ), # 6
    (7, TType.I32, 'sessionOption', None, None, ), # 7
  )

  def __init__(self, apiKey=None, localeString=None, email=None, password=None, loginId=None, activationCode=None, sessionOption=None,):
    self.apiKey = apiKey
    self.localeString = localeString
    self.email = email
    self.password = password
    self.loginId = loginId
    self.activationCode = activationCode
    self.sessionOption = sessionOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.localeString = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.loginId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.activationCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sessionOption = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('signupNewUser_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.localeString != None:
      oprot.writeFieldBegin('localeString', TType.STRING, 2)
      oprot.writeString(self.localeString)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 4)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.loginId != None:
      oprot.writeFieldBegin('loginId', TType.STRING, 5)
      oprot.writeString(self.loginId)
      oprot.writeFieldEnd()
    if self.activationCode != None:
      oprot.writeFieldBegin('activationCode', TType.STRING, 6)
      oprot.writeString(self.activationCode)
      oprot.writeFieldEnd()
    if self.sessionOption != None:
      oprot.writeFieldBegin('sessionOption', TType.I32, 7)
      oprot.writeI32(self.sessionOption)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class signupNewUser_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (signup.ttypes.ApiSignupInfo, signup.ttypes.ApiSignupInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = signup.ttypes.ApiSignupInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('signupNewUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class signupNewInternalUser_args:
  """
  Attributes:
   - apiKey
   - localeString
   - email
   - password
   - loginId
   - activationCode
   - sessionOption
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'localeString', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
    (5, TType.STRING, 'loginId', None, None, ), # 5
    (6, TType.STRING, 'activationCode', None, None, ), # 6
    (7, TType.I32, 'sessionOption', None, None, ), # 7
  )

  def __init__(self, apiKey=None, localeString=None, email=None, password=None, loginId=None, activationCode=None, sessionOption=None,):
    self.apiKey = apiKey
    self.localeString = localeString
    self.email = email
    self.password = password
    self.loginId = loginId
    self.activationCode = activationCode
    self.sessionOption = sessionOption

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.localeString = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.loginId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.activationCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.sessionOption = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('signupNewInternalUser_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.localeString != None:
      oprot.writeFieldBegin('localeString', TType.STRING, 2)
      oprot.writeString(self.localeString)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 4)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.loginId != None:
      oprot.writeFieldBegin('loginId', TType.STRING, 5)
      oprot.writeString(self.loginId)
      oprot.writeFieldEnd()
    if self.activationCode != None:
      oprot.writeFieldBegin('activationCode', TType.STRING, 6)
      oprot.writeString(self.activationCode)
      oprot.writeFieldEnd()
    if self.sessionOption != None:
      oprot.writeFieldBegin('sessionOption', TType.I32, 7)
      oprot.writeI32(self.sessionOption)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class signupNewInternalUser_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (signup.ttypes.ApiSignupInfo, signup.ttypes.ApiSignupInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = signup.ttypes.ApiSignupInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('signupNewInternalUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createPendingExternalEnterpriseUser_args:
  """
  Attributes:
   - apiKey
   - activationCode
   - accountId
   - email
   - ipAddress
   - rurl
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'activationCode', None, None, ), # 2
    (3, TType.STRING, 'accountId', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.STRING, 'ipAddress', None, None, ), # 5
    (6, TType.STRING, 'rurl', None, None, ), # 6
    (7, TType.STRING, 'locale', None, None, ), # 7
  )

  def __init__(self, apiKey=None, activationCode=None, accountId=None, email=None, ipAddress=None, rurl=None, locale=None,):
    self.apiKey = apiKey
    self.activationCode = activationCode
    self.accountId = accountId
    self.email = email
    self.ipAddress = ipAddress
    self.rurl = rurl
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.activationCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.accountId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ipAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.rurl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createPendingExternalEnterpriseUser_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.activationCode != None:
      oprot.writeFieldBegin('activationCode', TType.STRING, 2)
      oprot.writeString(self.activationCode)
      oprot.writeFieldEnd()
    if self.accountId != None:
      oprot.writeFieldBegin('accountId', TType.STRING, 3)
      oprot.writeString(self.accountId)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.ipAddress != None:
      oprot.writeFieldBegin('ipAddress', TType.STRING, 5)
      oprot.writeString(self.ipAddress)
      oprot.writeFieldEnd()
    if self.rurl != None:
      oprot.writeFieldBegin('rurl', TType.STRING, 6)
      oprot.writeString(self.rurl)
      oprot.writeFieldEnd()
    if self.locale != None:
      oprot.writeFieldBegin('locale', TType.STRING, 7)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createPendingExternalEnterpriseUser_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createPendingExternalEnterpriseUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class signupPendingUserToEnterprise_args:
  """
  Attributes:
   - apiKey
   - activationCode
   - accountId
   - email
   - ipAddress
   - checkEmailDomain
   - customMessage
   - locale
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'activationCode', None, None, ), # 2
    (3, TType.STRING, 'accountId', None, None, ), # 3
    (4, TType.STRING, 'email', None, None, ), # 4
    (5, TType.STRING, 'ipAddress', None, None, ), # 5
    (6, TType.BOOL, 'checkEmailDomain', None, None, ), # 6
    (7, TType.STRING, 'customMessage', None, None, ), # 7
    (8, TType.STRING, 'locale', None, None, ), # 8
  )

  def __init__(self, apiKey=None, activationCode=None, accountId=None, email=None, ipAddress=None, checkEmailDomain=None, customMessage=None, locale=None,):
    self.apiKey = apiKey
    self.activationCode = activationCode
    self.accountId = accountId
    self.email = email
    self.ipAddress = ipAddress
    self.checkEmailDomain = checkEmailDomain
    self.customMessage = customMessage
    self.locale = locale

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.activationCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.accountId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.ipAddress = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.checkEmailDomain = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.customMessage = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.locale = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('signupPendingUserToEnterprise_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.activationCode != None:
      oprot.writeFieldBegin('activationCode', TType.STRING, 2)
      oprot.writeString(self.activationCode)
      oprot.writeFieldEnd()
    if self.accountId != None:
      oprot.writeFieldBegin('accountId', TType.STRING, 3)
      oprot.writeString(self.accountId)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 4)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.ipAddress != None:
      oprot.writeFieldBegin('ipAddress', TType.STRING, 5)
      oprot.writeString(self.ipAddress)
      oprot.writeFieldEnd()
    if self.checkEmailDomain != None:
      oprot.writeFieldBegin('checkEmailDomain', TType.BOOL, 6)
      oprot.writeBool(self.checkEmailDomain)
      oprot.writeFieldEnd()
    if self.customMessage != None:
      oprot.writeFieldBegin('customMessage', TType.STRING, 7)
      oprot.writeString(self.customMessage)
      oprot.writeFieldEnd()
    if self.locale != None:
      oprot.writeFieldBegin('locale', TType.STRING, 8)
      oprot.writeString(self.locale)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class signupPendingUserToEnterprise_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('signupPendingUserToEnterprise_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class activatePendingUserToEnterprise_args:
  """
  Attributes:
   - apiKey
   - acode
   - ecode
   - firstName
   - lastName
   - email
   - password
   - oxygenId
   - externalLoginId
   - optIn
   - localString
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'acode', None, None, ), # 2
    (3, TType.STRING, 'ecode', None, None, ), # 3
    (4, TType.STRING, 'firstName', None, None, ), # 4
    (5, TType.STRING, 'lastName', None, None, ), # 5
    (6, TType.STRING, 'email', None, None, ), # 6
    (7, TType.STRING, 'password', None, None, ), # 7
    (8, TType.STRING, 'oxygenId', None, None, ), # 8
    (9, TType.STRING, 'externalLoginId', None, None, ), # 9
    (10, TType.BOOL, 'optIn', None, None, ), # 10
    (11, TType.STRING, 'localString', None, None, ), # 11
  )

  def __init__(self, apiKey=None, acode=None, ecode=None, firstName=None, lastName=None, email=None, password=None, oxygenId=None, externalLoginId=None, optIn=None, localString=None,):
    self.apiKey = apiKey
    self.acode = acode
    self.ecode = ecode
    self.firstName = firstName
    self.lastName = lastName
    self.email = email
    self.password = password
    self.oxygenId = oxygenId
    self.externalLoginId = externalLoginId
    self.optIn = optIn
    self.localString = localString

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.acode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.ecode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.externalLoginId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.BOOL:
          self.optIn = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.localString = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('activatePendingUserToEnterprise_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.acode != None:
      oprot.writeFieldBegin('acode', TType.STRING, 2)
      oprot.writeString(self.acode)
      oprot.writeFieldEnd()
    if self.ecode != None:
      oprot.writeFieldBegin('ecode', TType.STRING, 3)
      oprot.writeString(self.ecode)
      oprot.writeFieldEnd()
    if self.firstName != None:
      oprot.writeFieldBegin('firstName', TType.STRING, 4)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.lastName != None:
      oprot.writeFieldBegin('lastName', TType.STRING, 5)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 6)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 7)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 8)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.externalLoginId != None:
      oprot.writeFieldBegin('externalLoginId', TType.STRING, 9)
      oprot.writeString(self.externalLoginId)
      oprot.writeFieldEnd()
    if self.optIn != None:
      oprot.writeFieldBegin('optIn', TType.BOOL, 10)
      oprot.writeBool(self.optIn)
      oprot.writeFieldEnd()
    if self.localString != None:
      oprot.writeFieldBegin('localString', TType.STRING, 11)
      oprot.writeString(self.localString)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class activatePendingUserToEnterprise_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('activatePendingUserToEnterprise_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class provisionNewUserToAccount_args:
  """
  Attributes:
   - apiKey
   - networkAccountOid
   - loginId
   - firstName
   - lastName
   - email
   - password
   - securityQuestion
   - securityAnswer
   - activationCode
   - optionalExternalLoginId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'networkAccountOid', None, None, ), # 2
    (3, TType.STRING, 'loginId', None, None, ), # 3
    (4, TType.STRING, 'firstName', None, None, ), # 4
    (5, TType.STRING, 'lastName', None, None, ), # 5
    (6, TType.STRING, 'email', None, None, ), # 6
    (7, TType.STRING, 'password', None, None, ), # 7
    (8, TType.STRING, 'securityQuestion', None, None, ), # 8
    (9, TType.STRING, 'securityAnswer', None, None, ), # 9
    (10, TType.STRING, 'activationCode', None, None, ), # 10
    (11, TType.STRING, 'optionalExternalLoginId', None, None, ), # 11
  )

  def __init__(self, apiKey=None, networkAccountOid=None, loginId=None, firstName=None, lastName=None, email=None, password=None, securityQuestion=None, securityAnswer=None, activationCode=None, optionalExternalLoginId=None,):
    self.apiKey = apiKey
    self.networkAccountOid = networkAccountOid
    self.loginId = loginId
    self.firstName = firstName
    self.lastName = lastName
    self.email = email
    self.password = password
    self.securityQuestion = securityQuestion
    self.securityAnswer = securityAnswer
    self.activationCode = activationCode
    self.optionalExternalLoginId = optionalExternalLoginId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.networkAccountOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.loginId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.securityQuestion = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.securityAnswer = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.activationCode = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.optionalExternalLoginId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('provisionNewUserToAccount_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.networkAccountOid != None:
      oprot.writeFieldBegin('networkAccountOid', TType.STRING, 2)
      oprot.writeString(self.networkAccountOid)
      oprot.writeFieldEnd()
    if self.loginId != None:
      oprot.writeFieldBegin('loginId', TType.STRING, 3)
      oprot.writeString(self.loginId)
      oprot.writeFieldEnd()
    if self.firstName != None:
      oprot.writeFieldBegin('firstName', TType.STRING, 4)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.lastName != None:
      oprot.writeFieldBegin('lastName', TType.STRING, 5)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 6)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 7)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    if self.securityQuestion != None:
      oprot.writeFieldBegin('securityQuestion', TType.STRING, 8)
      oprot.writeString(self.securityQuestion)
      oprot.writeFieldEnd()
    if self.securityAnswer != None:
      oprot.writeFieldBegin('securityAnswer', TType.STRING, 9)
      oprot.writeString(self.securityAnswer)
      oprot.writeFieldEnd()
    if self.activationCode != None:
      oprot.writeFieldBegin('activationCode', TType.STRING, 10)
      oprot.writeString(self.activationCode)
      oprot.writeFieldEnd()
    if self.optionalExternalLoginId != None:
      oprot.writeFieldBegin('optionalExternalLoginId', TType.STRING, 11)
      oprot.writeString(self.optionalExternalLoginId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class provisionNewUserToAccount_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('provisionNewUserToAccount_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class requestLogin_args:
  """
  Attributes:
   - apiKey
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
  )

  def __init__(self, apiKey=None,):
    self.apiKey = apiKey

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('requestLogin_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class requestLogin_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiLogin, auth.ttypes.ApiLogin.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiLogin()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('requestLogin_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validateLogin_args:
  """
  Attributes:
   - apiKey
   - tokenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'tokenId', None, None, ), # 2
  )

  def __init__(self, apiKey=None, tokenId=None,):
    self.apiKey = apiKey
    self.tokenId = tokenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tokenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validateLogin_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.tokenId != None:
      oprot.writeFieldBegin('tokenId', TType.STRING, 2)
      oprot.writeString(self.tokenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validateLogin_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiSession, auth.ttypes.ApiSession.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiSession()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validateLogin_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validateLoginAndDevice_args:
  """
  Attributes:
   - apiKey
   - tokenId
   - deviceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'tokenId', None, None, ), # 2
    (3, TType.STRING, 'deviceId', None, None, ), # 3
  )

  def __init__(self, apiKey=None, tokenId=None, deviceId=None,):
    self.apiKey = apiKey
    self.tokenId = tokenId
    self.deviceId = deviceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tokenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validateLoginAndDevice_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.tokenId != None:
      oprot.writeFieldBegin('tokenId', TType.STRING, 2)
      oprot.writeString(self.tokenId)
      oprot.writeFieldEnd()
    if self.deviceId != None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 3)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class validateLoginAndDevice_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiSession, auth.ttypes.ApiSession.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiSession()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('validateLoginAndDevice_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerDevice_args:
  """
  Attributes:
   - sessionId
   - deviceId
   - status
   - deviceDescription
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.STRING, 'deviceId', None, None, ), # 2
    (3, TType.I32, 'status', None, None, ), # 3
    (4, TType.STRING, 'deviceDescription', None, None, ), # 4
  )

  def __init__(self, sessionId=None, deviceId=None, status=None, deviceDescription=None,):
    self.sessionId = sessionId
    self.deviceId = deviceId
    self.status = status
    self.deviceDescription = deviceDescription

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.status = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.deviceDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerDevice_args')
    if self.sessionId != None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.deviceId != None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 2)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    if self.status != None:
      oprot.writeFieldBegin('status', TType.I32, 3)
      oprot.writeI32(self.status)
      oprot.writeFieldEnd()
    if self.deviceDescription != None:
      oprot.writeFieldBegin('deviceDescription', TType.STRING, 4)
      oprot.writeString(self.deviceDescription)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class registerDevice_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('registerDevice_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeDeviceOwner_args:
  """
  Attributes:
   - sessionId
   - deviceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.STRING, 'deviceId', None, None, ), # 2
  )

  def __init__(self, sessionId=None, deviceId=None,):
    self.sessionId = sessionId
    self.deviceId = deviceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeDeviceOwner_args')
    if self.sessionId != None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.deviceId != None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 2)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class changeDeviceOwner_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('changeDeviceOwner_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class requestDeviceRegistration_args:
  """
  Attributes:
   - sessionId
   - deviceId
   - deviceDescription
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
    (2, TType.STRING, 'deviceId', None, None, ), # 2
    (3, TType.STRING, 'deviceDescription', None, None, ), # 3
  )

  def __init__(self, sessionId=None, deviceId=None, deviceDescription=None,):
    self.sessionId = sessionId
    self.deviceId = deviceId
    self.deviceDescription = deviceDescription

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.deviceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.deviceDescription = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('requestDeviceRegistration_args')
    if self.sessionId != None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    if self.deviceId != None:
      oprot.writeFieldBegin('deviceId', TType.STRING, 2)
      oprot.writeString(self.deviceId)
      oprot.writeFieldEnd()
    if self.deviceDescription != None:
      oprot.writeFieldBegin('deviceDescription', TType.STRING, 3)
      oprot.writeString(self.deviceDescription)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class requestDeviceRegistration_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('requestDeviceRegistration_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class loginInternalUser_args:
  """
  Attributes:
   - apiKey
   - tokenId
   - rurl
   - appId
   - oxygenId
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'tokenId', None, None, ), # 2
    (3, TType.STRING, 'rurl', None, None, ), # 3
    (4, TType.STRING, 'appId', None, None, ), # 4
    (5, TType.STRING, 'oxygenId', None, None, ), # 5
    (6, TType.STRING, 'password', None, None, ), # 6
  )

  def __init__(self, apiKey=None, tokenId=None, rurl=None, appId=None, oxygenId=None, password=None,):
    self.apiKey = apiKey
    self.tokenId = tokenId
    self.rurl = rurl
    self.appId = appId
    self.oxygenId = oxygenId
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.tokenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.rurl = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.appId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('loginInternalUser_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.tokenId != None:
      oprot.writeFieldBegin('tokenId', TType.STRING, 2)
      oprot.writeString(self.tokenId)
      oprot.writeFieldEnd()
    if self.rurl != None:
      oprot.writeFieldBegin('rurl', TType.STRING, 3)
      oprot.writeString(self.rurl)
      oprot.writeFieldEnd()
    if self.appId != None:
      oprot.writeFieldBegin('appId', TType.STRING, 4)
      oprot.writeString(self.appId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 5)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 6)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class loginInternalUser_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('loginInternalUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class loginAdminUser_args:
  """
  Attributes:
   - apiKey
   - oxygenId
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
    (3, TType.STRING, 'password', None, None, ), # 3
  )

  def __init__(self, apiKey=None, oxygenId=None, password=None,):
    self.apiKey = apiKey
    self.oxygenId = oxygenId
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('loginAdminUser_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 3)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class loginAdminUser_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiSession, auth.ttypes.ApiSession.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiSession()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('loginAdminUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logout_args:
  """
  Attributes:
   - apiSessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
  )

  def __init__(self, apiSessionId=None,):
    self.apiSessionId = apiSessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logout_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class logout_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('logout_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isExternalUser_args:
  """
  Attributes:
   - apiKey
   - oxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
  )

  def __init__(self, apiKey=None, oxygenId=None,):
    self.apiKey = apiKey
    self.oxygenId = oxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isExternalUser_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isExternalUser_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isExternalUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isExternalAccount_args:
  """
  Attributes:
   - apiKey
   - accountId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'accountId', None, None, ), # 2
  )

  def __init__(self, apiKey=None, accountId=None,):
    self.apiKey = apiKey
    self.accountId = accountId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.accountId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isExternalAccount_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.accountId != None:
      oprot.writeFieldBegin('accountId', TType.STRING, 2)
      oprot.writeString(self.accountId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class isExternalAccount_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.BOOL, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.BOOL:
          self.success = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('isExternalAccount_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.BOOL, 0)
      oprot.writeBool(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExternalGatewayUrl_args:
  """
  Attributes:
   - apiKey
   - oxygenId
   - returnURL
   - webAppId
   - reuseAuthenticationTokenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiKey', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
    (3, TType.STRING, 'returnURL', None, None, ), # 3
    (4, TType.STRING, 'webAppId', None, None, ), # 4
    (5, TType.STRING, 'reuseAuthenticationTokenId', None, None, ), # 5
  )

  def __init__(self, apiKey=None, oxygenId=None, returnURL=None, webAppId=None, reuseAuthenticationTokenId=None,):
    self.apiKey = apiKey
    self.oxygenId = oxygenId
    self.returnURL = returnURL
    self.webAppId = webAppId
    self.reuseAuthenticationTokenId = reuseAuthenticationTokenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiKey = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.returnURL = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.webAppId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.reuseAuthenticationTokenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExternalGatewayUrl_args')
    if self.apiKey != None:
      oprot.writeFieldBegin('apiKey', TType.STRING, 1)
      oprot.writeString(self.apiKey)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.returnURL != None:
      oprot.writeFieldBegin('returnURL', TType.STRING, 3)
      oprot.writeString(self.returnURL)
      oprot.writeFieldEnd()
    if self.webAppId != None:
      oprot.writeFieldBegin('webAppId', TType.STRING, 4)
      oprot.writeString(self.webAppId)
      oprot.writeFieldEnd()
    if self.reuseAuthenticationTokenId != None:
      oprot.writeFieldBegin('reuseAuthenticationTokenId', TType.STRING, 5)
      oprot.writeString(self.reuseAuthenticationTokenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getExternalGatewayUrl_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getExternalGatewayUrl_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserInfoBySessionId_args:
  """
  Attributes:
   - sessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sessionId', None, None, ), # 1
  )

  def __init__(self, sessionId=None,):
    self.sessionId = sessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserInfoBySessionId_args')
    if self.sessionId != None:
      oprot.writeFieldBegin('sessionId', TType.STRING, 1)
      oprot.writeString(self.sessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserInfoBySessionId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserInfoBySessionId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findSpaces_args:
  """
  Attributes:
   - apiSessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
  )

  def __init__(self, apiSessionId=None,):
    self.apiSessionId = apiSessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findSpaces_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findSpaces_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(cloudfs.ttypes.ApiSpace, cloudfs.ttypes.ApiSpace.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = cloudfs.ttypes.ApiSpace()
            _elem5.read(iprot)
            self.success.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findSpaces_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter6 in self.success:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findChildFiles_args:
  """
  Attributes:
   - apiSessionId
   - repositoryNodeServiceId
   - spaceId
   - parentId
   - modifiedSince
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 2
    (3, TType.STRING, 'spaceId', None, None, ), # 3
    (4, TType.STRING, 'parentId', None, None, ), # 4
    (5, TType.I64, 'modifiedSince', None, None, ), # 5
  )

  def __init__(self, apiSessionId=None, repositoryNodeServiceId=None, spaceId=None, parentId=None, modifiedSince=None,):
    self.apiSessionId = apiSessionId
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.spaceId = spaceId
    self.parentId = parentId
    self.modifiedSince = modifiedSince

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.parentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.modifiedSince = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findChildFiles_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 2)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 3)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.parentId != None:
      oprot.writeFieldBegin('parentId', TType.STRING, 4)
      oprot.writeString(self.parentId)
      oprot.writeFieldEnd()
    if self.modifiedSince != None:
      oprot.writeFieldBegin('modifiedSince', TType.I64, 5)
      oprot.writeI64(self.modifiedSince)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findChildFiles_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = cloudfs.ttypes.ApiFile()
            _elem12.read(iprot)
            self.success.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findChildFiles_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter13 in self.success:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getChildObjects_args:
  """
  Attributes:
   - apiSessionId
   - parent
   - modifiedSince
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'parent', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
    (3, TType.I64, 'modifiedSince', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, parent=None, modifiedSince=None,):
    self.apiSessionId = apiSessionId
    self.parent = parent
    self.modifiedSince = modifiedSince

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.parent = cloudfs.ttypes.ApiObject()
          self.parent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.modifiedSince = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getChildObjects_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.parent != None:
      oprot.writeFieldBegin('parent', TType.STRUCT, 2)
      self.parent.write(oprot)
      oprot.writeFieldEnd()
    if self.modifiedSince != None:
      oprot.writeFieldBegin('modifiedSince', TType.I64, 3)
      oprot.writeI64(self.modifiedSince)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getChildObjects_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = cloudfs.ttypes.ApiObject()
            _elem19.read(iprot)
            self.success.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getChildObjects_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter20 in self.success:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findModifiedFilesInSpace_args:
  """
  Attributes:
   - apiSessionId
   - repositoryNodeServiceId
   - spaceId
   - limit
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 2
    (3, TType.STRING, 'spaceId', None, None, ), # 3
    (4, TType.I32, 'limit', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, repositoryNodeServiceId=None, spaceId=None, limit=None,):
    self.apiSessionId = apiSessionId
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.spaceId = spaceId
    self.limit = limit

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.limit = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findModifiedFilesInSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 2)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 3)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.limit != None:
      oprot.writeFieldBegin('limit', TType.I32, 4)
      oprot.writeI32(self.limit)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findModifiedFilesInSpace_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = cloudfs.ttypes.ApiFile()
            _elem26.read(iprot)
            self.success.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findModifiedFilesInSpace_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter27 in self.success:
        iter27.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findSpaceById_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, spaceId=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findSpaceById_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findSpaceById_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiSpace, cloudfs.ttypes.ApiSpace.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiSpace()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findSpaceById_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findFileById_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - fileId
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'fileId', None, None, ), # 3
    (4, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, spaceId=None, fileId=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.fileId = fileId
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fileId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findFileById_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.fileId != None:
      oprot.writeFieldBegin('fileId', TType.STRING, 3)
      oprot.writeString(self.fileId)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 4)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findFileById_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiFile()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findFileById_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findObjectById_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - fileId
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'fileId', None, None, ), # 3
    (4, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, spaceId=None, fileId=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.fileId = fileId
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fileId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findObjectById_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.fileId != None:
      oprot.writeFieldBegin('fileId', TType.STRING, 3)
      oprot.writeString(self.fileId)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 4)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findObjectById_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiObject()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findObjectById_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWeblinkUrl_args:
  """
  Attributes:
   - apiSessionId
   - file
   - expireInXMinutes
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'file', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 2
    (3, TType.I32, 'expireInXMinutes', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, file=None, expireInXMinutes=None, password=None,):
    self.apiSessionId = apiSessionId
    self.file = file
    self.expireInXMinutes = expireInXMinutes
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.file = cloudfs.ttypes.ApiFile()
          self.file.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.expireInXMinutes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWeblinkUrl_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.file != None:
      oprot.writeFieldBegin('file', TType.STRUCT, 2)
      self.file.write(oprot)
      oprot.writeFieldEnd()
    if self.expireInXMinutes != None:
      oprot.writeFieldBegin('expireInXMinutes', TType.I32, 3)
      oprot.writeI32(self.expireInXMinutes)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 4)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWeblinkUrl_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWeblinkUrl_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWeblinkUrlForObject_args:
  """
  Attributes:
   - apiSessionId
   - file
   - expireInXMinutes
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'file', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
    (3, TType.I32, 'expireInXMinutes', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, file=None, expireInXMinutes=None, password=None,):
    self.apiSessionId = apiSessionId
    self.file = file
    self.expireInXMinutes = expireInXMinutes
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.file = cloudfs.ttypes.ApiObject()
          self.file.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.expireInXMinutes = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWeblinkUrlForObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.file != None:
      oprot.writeFieldBegin('file', TType.STRUCT, 2)
      self.file.write(oprot)
      oprot.writeFieldEnd()
    if self.expireInXMinutes != None:
      oprot.writeFieldBegin('expireInXMinutes', TType.I32, 3)
      oprot.writeI32(self.expireInXMinutes)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 4)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createWeblinkUrlForObject_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createWeblinkUrlForObject_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class expireWeblinks_args:
  """
  Attributes:
   - apiSessionId
   - file
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'file', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 2
  )

  def __init__(self, apiSessionId=None, file=None,):
    self.apiSessionId = apiSessionId
    self.file = file

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.file = cloudfs.ttypes.ApiFile()
          self.file.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('expireWeblinks_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.file != None:
      oprot.writeFieldBegin('file', TType.STRUCT, 2)
      self.file.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class expireWeblinks_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('expireWeblinks_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class expireWeblinksForObject_args:
  """
  Attributes:
   - apiSessionId
   - file
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'file', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
  )

  def __init__(self, apiSessionId=None, file=None,):
    self.apiSessionId = apiSessionId
    self.file = file

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.file = cloudfs.ttypes.ApiObject()
          self.file.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('expireWeblinksForObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.file != None:
      oprot.writeFieldBegin('file', TType.STRUCT, 2)
      self.file.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class expireWeblinksForObject_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('expireWeblinksForObject_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findFileByParentAndName_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - parentId
   - name
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'parentId', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 5
  )

  def __init__(self, apiSessionId=None, spaceId=None, parentId=None, name=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.parentId = parentId
    self.name = name
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.parentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findFileByParentAndName_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.parentId != None:
      oprot.writeFieldBegin('parentId', TType.STRING, 3)
      oprot.writeString(self.parentId)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 5)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findFileByParentAndName_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiFile()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findFileByParentAndName_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findFileByPath_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - path
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'path', None, None, ), # 3
    (4, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, spaceId=None, path=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.path = path
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.path = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findFileByPath_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.path != None:
      oprot.writeFieldBegin('path', TType.STRING, 3)
      oprot.writeString(self.path)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 4)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class findFileByPath_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiFile()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('findFileByPath_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteFile_args:
  """
  Attributes:
   - apiSessionId
   - file
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'file', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 2
  )

  def __init__(self, apiSessionId=None, file=None,):
    self.apiSessionId = apiSessionId
    self.file = file

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.file = cloudfs.ttypes.ApiFile()
          self.file.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteFile_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.file != None:
      oprot.writeFieldBegin('file', TType.STRUCT, 2)
      self.file.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteFile_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteFile_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteObject_args:
  """
  Attributes:
   - apiSessionId
   - file
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'file', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
  )

  def __init__(self, apiSessionId=None, file=None,):
    self.apiSessionId = apiSessionId
    self.file = file

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.file = cloudfs.ttypes.ApiObject()
          self.file.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.file != None:
      oprot.writeFieldBegin('file', TType.STRUCT, 2)
      self.file.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteObject_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteObject_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class moveFile_args:
  """
  Attributes:
   - apiSessionId
   - source
   - newParentFolderId
   - newName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'source', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 2
    (3, TType.STRING, 'newParentFolderId', None, None, ), # 3
    (4, TType.STRING, 'newName', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, source=None, newParentFolderId=None, newName=None,):
    self.apiSessionId = apiSessionId
    self.source = source
    self.newParentFolderId = newParentFolderId
    self.newName = newName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.source = cloudfs.ttypes.ApiFile()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.newParentFolderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.newName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('moveFile_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.source != None:
      oprot.writeFieldBegin('source', TType.STRUCT, 2)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.newParentFolderId != None:
      oprot.writeFieldBegin('newParentFolderId', TType.STRING, 3)
      oprot.writeString(self.newParentFolderId)
      oprot.writeFieldEnd()
    if self.newName != None:
      oprot.writeFieldBegin('newName', TType.STRING, 4)
      oprot.writeString(self.newName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class moveFile_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('moveFile_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class moveObject_args:
  """
  Attributes:
   - apiSessionId
   - source
   - newParentFolderId
   - newName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'source', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
    (3, TType.STRING, 'newParentFolderId', None, None, ), # 3
    (4, TType.STRING, 'newName', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, source=None, newParentFolderId=None, newName=None,):
    self.apiSessionId = apiSessionId
    self.source = source
    self.newParentFolderId = newParentFolderId
    self.newName = newName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.source = cloudfs.ttypes.ApiObject()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.newParentFolderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.newName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('moveObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.source != None:
      oprot.writeFieldBegin('source', TType.STRUCT, 2)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.newParentFolderId != None:
      oprot.writeFieldBegin('newParentFolderId', TType.STRING, 3)
      oprot.writeString(self.newParentFolderId)
      oprot.writeFieldEnd()
    if self.newName != None:
      oprot.writeFieldBegin('newName', TType.STRING, 4)
      oprot.writeString(self.newName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class moveObject_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('moveObject_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copyFile_args:
  """
  Attributes:
   - apiSessionId
   - source
   - newParentFolderId
   - newName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'source', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 2
    (3, TType.STRING, 'newParentFolderId', None, None, ), # 3
    (4, TType.STRING, 'newName', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, source=None, newParentFolderId=None, newName=None,):
    self.apiSessionId = apiSessionId
    self.source = source
    self.newParentFolderId = newParentFolderId
    self.newName = newName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.source = cloudfs.ttypes.ApiFile()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.newParentFolderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.newName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copyFile_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.source != None:
      oprot.writeFieldBegin('source', TType.STRUCT, 2)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.newParentFolderId != None:
      oprot.writeFieldBegin('newParentFolderId', TType.STRING, 3)
      oprot.writeString(self.newParentFolderId)
      oprot.writeFieldEnd()
    if self.newName != None:
      oprot.writeFieldBegin('newName', TType.STRING, 4)
      oprot.writeString(self.newName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copyFile_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copyFile_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copyObject_args:
  """
  Attributes:
   - apiSessionId
   - source
   - newParentFolderId
   - newName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'source', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
    (3, TType.STRING, 'newParentFolderId', None, None, ), # 3
    (4, TType.STRING, 'newName', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, source=None, newParentFolderId=None, newName=None,):
    self.apiSessionId = apiSessionId
    self.source = source
    self.newParentFolderId = newParentFolderId
    self.newName = newName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.source = cloudfs.ttypes.ApiObject()
          self.source.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.newParentFolderId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.newName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copyObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.source != None:
      oprot.writeFieldBegin('source', TType.STRUCT, 2)
      self.source.write(oprot)
      oprot.writeFieldEnd()
    if self.newParentFolderId != None:
      oprot.writeFieldBegin('newParentFolderId', TType.STRING, 3)
      oprot.writeString(self.newParentFolderId)
      oprot.writeFieldEnd()
    if self.newName != None:
      oprot.writeFieldBegin('newName', TType.STRING, 4)
      oprot.writeString(self.newName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class copyObject_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('copyObject_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createFolder_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - parentId
   - name
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'parentId', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 5
  )

  def __init__(self, apiSessionId=None, spaceId=None, parentId=None, name=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.parentId = parentId
    self.name = name
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.parentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createFolder_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.parentId != None:
      oprot.writeFieldBegin('parentId', TType.STRING, 3)
      oprot.writeString(self.parentId)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 5)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createFolder_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiFile, cloudfs.ttypes.ApiFile.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiFile()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createFolder_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createFolderObject_args:
  """
  Attributes:
   - apiSessionId
   - parent
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'parent', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, parent=None, name=None,):
    self.apiSessionId = apiSessionId
    self.parent = parent
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.parent = cloudfs.ttypes.ApiObject()
          self.parent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createFolderObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.parent != None:
      oprot.writeFieldBegin('parent', TType.STRUCT, 2)
      self.parent.write(oprot)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createFolderObject_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiObject()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createFolderObject_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createDownload_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - fileId
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'fileId', None, None, ), # 3
    (4, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, spaceId=None, fileId=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.fileId = fileId
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.fileId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createDownload_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.fileId != None:
      oprot.writeFieldBegin('fileId', TType.STRING, 3)
      oprot.writeString(self.fileId)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 4)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createDownload_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiDownload, cloudfs.ttypes.ApiDownload.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiDownload()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createDownload_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createDownloadObject_args:
  """
  Attributes:
   - apiSessionId
   - apiObject
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'apiObject', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
  )

  def __init__(self, apiSessionId=None, apiObject=None,):
    self.apiSessionId = apiSessionId
    self.apiObject = apiObject

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.apiObject = cloudfs.ttypes.ApiObject()
          self.apiObject.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createDownloadObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.apiObject != None:
      oprot.writeFieldBegin('apiObject', TType.STRUCT, 2)
      self.apiObject.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createDownloadObject_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiDownload, cloudfs.ttypes.ApiDownload.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiDownload()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createDownloadObject_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUpload_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - parentId
   - name
   - sizeInByte
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'parentId', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.I64, 'sizeInByte', None, None, ), # 5
    (6, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 6
  )

  def __init__(self, apiSessionId=None, spaceId=None, parentId=None, name=None, sizeInByte=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.parentId = parentId
    self.name = name
    self.sizeInByte = sizeInByte
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.parentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.sizeInByte = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUpload_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.parentId != None:
      oprot.writeFieldBegin('parentId', TType.STRING, 3)
      oprot.writeString(self.parentId)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.sizeInByte != None:
      oprot.writeFieldBegin('sizeInByte', TType.I64, 5)
      oprot.writeI64(self.sizeInByte)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 6)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUpload_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiUpload, cloudfs.ttypes.ApiUpload.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiUpload()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUpload_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUploadObject_args:
  """
  Attributes:
   - apiSessionId
   - parent
   - name
   - sizeInByte
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'parent', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
    (4, TType.I64, 'sizeInByte', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, parent=None, name=None, sizeInByte=None,):
    self.apiSessionId = apiSessionId
    self.parent = parent
    self.name = name
    self.sizeInByte = sizeInByte

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.parent = cloudfs.ttypes.ApiObject()
          self.parent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.sizeInByte = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUploadObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.parent != None:
      oprot.writeFieldBegin('parent', TType.STRUCT, 2)
      self.parent.write(oprot)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.sizeInByte != None:
      oprot.writeFieldBegin('sizeInByte', TType.I64, 4)
      oprot.writeI64(self.sizeInByte)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUploadObject_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiUpload, cloudfs.ttypes.ApiUpload.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiUpload()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUploadObject_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class confirmUpload_args:
  """
  Attributes:
   - apiSessionId
   - spaceId
   - parentId
   - uploadId
   - name
   - hashValue
   - repositoryNodeServiceId
   - fileTimestampInSecsSinceEpoch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceId', None, None, ), # 2
    (3, TType.STRING, 'parentId', None, None, ), # 3
    (4, TType.STRING, 'uploadId', None, None, ), # 4
    (5, TType.STRING, 'name', None, None, ), # 5
    (6, TType.STRING, 'hashValue', None, None, ), # 6
    (7, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 7
    (8, TType.I64, 'fileTimestampInSecsSinceEpoch', None, None, ), # 8
  )

  def __init__(self, apiSessionId=None, spaceId=None, parentId=None, uploadId=None, name=None, hashValue=None, repositoryNodeServiceId=None, fileTimestampInSecsSinceEpoch=None,):
    self.apiSessionId = apiSessionId
    self.spaceId = spaceId
    self.parentId = parentId
    self.uploadId = uploadId
    self.name = name
    self.hashValue = hashValue
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.fileTimestampInSecsSinceEpoch = fileTimestampInSecsSinceEpoch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.parentId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.uploadId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.hashValue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.fileTimestampInSecsSinceEpoch = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('confirmUpload_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceId != None:
      oprot.writeFieldBegin('spaceId', TType.STRING, 2)
      oprot.writeString(self.spaceId)
      oprot.writeFieldEnd()
    if self.parentId != None:
      oprot.writeFieldBegin('parentId', TType.STRING, 3)
      oprot.writeString(self.parentId)
      oprot.writeFieldEnd()
    if self.uploadId != None:
      oprot.writeFieldBegin('uploadId', TType.STRING, 4)
      oprot.writeString(self.uploadId)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 5)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.hashValue != None:
      oprot.writeFieldBegin('hashValue', TType.STRING, 6)
      oprot.writeString(self.hashValue)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 7)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.fileTimestampInSecsSinceEpoch != None:
      oprot.writeFieldBegin('fileTimestampInSecsSinceEpoch', TType.I64, 8)
      oprot.writeI64(self.fileTimestampInSecsSinceEpoch)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class confirmUpload_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('confirmUpload_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class confirmUploadObject_args:
  """
  Attributes:
   - apiSessionId
   - parent
   - uploadId
   - name
   - hashValue
   - fileTimestampInSecsSinceEpoch
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRUCT, 'parent', (cloudfs.ttypes.ApiObject, cloudfs.ttypes.ApiObject.thrift_spec), None, ), # 2
    (3, TType.STRING, 'uploadId', None, None, ), # 3
    (4, TType.STRING, 'name', None, None, ), # 4
    (5, TType.STRING, 'hashValue', None, None, ), # 5
    (6, TType.I64, 'fileTimestampInSecsSinceEpoch', None, None, ), # 6
  )

  def __init__(self, apiSessionId=None, parent=None, uploadId=None, name=None, hashValue=None, fileTimestampInSecsSinceEpoch=None,):
    self.apiSessionId = apiSessionId
    self.parent = parent
    self.uploadId = uploadId
    self.name = name
    self.hashValue = hashValue
    self.fileTimestampInSecsSinceEpoch = fileTimestampInSecsSinceEpoch

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.parent = cloudfs.ttypes.ApiObject()
          self.parent.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.uploadId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.hashValue = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.fileTimestampInSecsSinceEpoch = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('confirmUploadObject_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.parent != None:
      oprot.writeFieldBegin('parent', TType.STRUCT, 2)
      self.parent.write(oprot)
      oprot.writeFieldEnd()
    if self.uploadId != None:
      oprot.writeFieldBegin('uploadId', TType.STRING, 3)
      oprot.writeString(self.uploadId)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 4)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.hashValue != None:
      oprot.writeFieldBegin('hashValue', TType.STRING, 5)
      oprot.writeString(self.hashValue)
      oprot.writeFieldEnd()
    if self.fileTimestampInSecsSinceEpoch != None:
      oprot.writeFieldBegin('fileTimestampInSecsSinceEpoch', TType.I64, 6)
      oprot.writeI64(self.fileTimestampInSecsSinceEpoch)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class confirmUploadObject_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRING, 'success', None, None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRING:
          self.success = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('confirmUploadObject_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRING, 0)
      oprot.writeString(self.success)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class readLog_args:
  """
  Attributes:
   - apiSessionId
   - timestampStart
   - timestampEnd
   - exclusiveStart
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'timestampStart', None, None, ), # 2
    (3, TType.STRING, 'timestampEnd', None, None, ), # 3
    (4, TType.STRING, 'exclusiveStart', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, timestampStart=None, timestampEnd=None, exclusiveStart=None,):
    self.apiSessionId = apiSessionId
    self.timestampStart = timestampStart
    self.timestampEnd = timestampEnd
    self.exclusiveStart = exclusiveStart

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestampStart = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.timestampEnd = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.exclusiveStart = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('readLog_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.timestampStart != None:
      oprot.writeFieldBegin('timestampStart', TType.STRING, 2)
      oprot.writeString(self.timestampStart)
      oprot.writeFieldEnd()
    if self.timestampEnd != None:
      oprot.writeFieldBegin('timestampEnd', TType.STRING, 3)
      oprot.writeString(self.timestampEnd)
      oprot.writeFieldEnd()
    if self.exclusiveStart != None:
      oprot.writeFieldBegin('exclusiveStart', TType.STRING, 4)
      oprot.writeString(self.exclusiveStart)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class readLog_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(audit.ttypes.OxygenEventMessage, audit.ttypes.OxygenEventMessage.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = audit.ttypes.OxygenEventMessage()
            _elem33.read(iprot)
            self.success.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('readLog_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter34 in self.success:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUser_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
   - email
   - corporateUserName
   - firstName
   - lastName
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.STRING, 'corporateUserName', None, None, ), # 4
    (5, TType.STRING, 'firstName', None, None, ), # 5
    (6, TType.STRING, 'lastName', None, None, ), # 6
    (7, TType.STRING, 'password', None, None, ), # 7
  )

  def __init__(self, apiSessionId=None, oxygenId=None, email=None, corporateUserName=None, firstName=None, lastName=None, password=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId
    self.email = email
    self.corporateUserName = corporateUserName
    self.firstName = firstName
    self.lastName = lastName
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.corporateUserName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUser_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.corporateUserName != None:
      oprot.writeFieldBegin('corporateUserName', TType.STRING, 4)
      oprot.writeString(self.corporateUserName)
      oprot.writeFieldEnd()
    if self.firstName != None:
      oprot.writeFieldBegin('firstName', TType.STRING, 5)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.lastName != None:
      oprot.writeFieldBegin('lastName', TType.STRING, 6)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.password != None:
      oprot.writeFieldBegin('password', TType.STRING, 7)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createUser_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUsers_args:
  """
  Attributes:
   - apiSessionId
   - offset
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.I32, 'offset', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, offset=None,):
    self.apiSessionId = apiSessionId
    self.offset = offset

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.offset = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUsers_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.offset != None:
      oprot.writeFieldBegin('offset', TType.I32, 2)
      oprot.writeI32(self.offset)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllUsers_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = auth.ttypes.ApiUserInfo()
            _elem40.read(iprot)
            self.success.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllUsers_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter41 in self.success:
        iter41.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGuestUsers_args:
  """
  Attributes:
   - apiSessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
  )

  def __init__(self, apiSessionId=None,):
    self.apiSessionId = apiSessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGuestUsers_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGuestUsers_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype45, _size42) = iprot.readListBegin()
          for _i46 in xrange(_size42):
            _elem47 = auth.ttypes.ApiUserInfo()
            _elem47.read(iprot)
            self.success.append(_elem47)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGuestUsers_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter48 in self.success:
        iter48.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserByOxygenId_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, oxygenId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserByOxygenId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserByOxygenId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserByOxygenId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserByExternalId_args:
  """
  Attributes:
   - apiSessionId
   - externalId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'externalId', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, externalId=None,):
    self.apiSessionId = apiSessionId
    self.externalId = externalId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.externalId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserByExternalId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.externalId != None:
      oprot.writeFieldBegin('externalId', TType.STRING, 2)
      oprot.writeString(self.externalId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserByExternalId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserByExternalId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disableUserByOxygenId_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, oxygenId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disableUserByOxygenId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class disableUserByOxygenId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('disableUserByOxygenId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enableUserByOxygenId_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, oxygenId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enableUserByOxygenId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class enableUserByOxygenId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('enableUserByOxygenId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteUserByOxygenId_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, oxygenId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteUserByOxygenId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteUserByOxygenId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteUserByOxygenId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserOxygenId_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
   - newOxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
    (3, TType.STRING, 'newOxygenId', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, oxygenId=None, newOxygenId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId
    self.newOxygenId = newOxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.newOxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserOxygenId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.newOxygenId != None:
      oprot.writeFieldBegin('newOxygenId', TType.STRING, 3)
      oprot.writeString(self.newOxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserOxygenId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserOxygenId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserDetailsByOxygenId_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
   - email
   - firstName
   - lastName
   - displayName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
    (3, TType.STRING, 'email', None, None, ), # 3
    (4, TType.STRING, 'firstName', None, None, ), # 4
    (5, TType.STRING, 'lastName', None, None, ), # 5
    (6, TType.STRING, 'displayName', None, None, ), # 6
  )

  def __init__(self, apiSessionId=None, oxygenId=None, email=None, firstName=None, lastName=None, displayName=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId
    self.email = email
    self.firstName = firstName
    self.lastName = lastName
    self.displayName = displayName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.firstName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.lastName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.displayName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserDetailsByOxygenId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.email != None:
      oprot.writeFieldBegin('email', TType.STRING, 3)
      oprot.writeString(self.email)
      oprot.writeFieldEnd()
    if self.firstName != None:
      oprot.writeFieldBegin('firstName', TType.STRING, 4)
      oprot.writeString(self.firstName)
      oprot.writeFieldEnd()
    if self.lastName != None:
      oprot.writeFieldBegin('lastName', TType.STRING, 5)
      oprot.writeString(self.lastName)
      oprot.writeFieldEnd()
    if self.displayName != None:
      oprot.writeFieldBegin('displayName', TType.STRING, 6)
      oprot.writeString(self.displayName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateUserDetailsByOxygenId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (auth.ttypes.ApiUserInfo, auth.ttypes.ApiUserInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = auth.ttypes.ApiUserInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateUserDetailsByOxygenId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createSpace_args:
  """
  Attributes:
   - apiSessionId
   - name
   - description
   - ownerOxygenId
   - storageName
   - capacity
   - listed
   - writableDefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'description', None, None, ), # 3
    (4, TType.STRING, 'ownerOxygenId', None, None, ), # 4
    (5, TType.STRING, 'storageName', None, None, ), # 5
    (6, TType.I32, 'capacity', None, None, ), # 6
    (7, TType.BOOL, 'listed', None, None, ), # 7
    (8, TType.BOOL, 'writableDefault', None, None, ), # 8
  )

  def __init__(self, apiSessionId=None, name=None, description=None, ownerOxygenId=None, storageName=None, capacity=None, listed=None, writableDefault=None,):
    self.apiSessionId = apiSessionId
    self.name = name
    self.description = description
    self.ownerOxygenId = ownerOxygenId
    self.storageName = storageName
    self.capacity = capacity
    self.listed = listed
    self.writableDefault = writableDefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.ownerOxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.storageName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I32:
          self.capacity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.BOOL:
          self.listed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.writableDefault = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.description != None:
      oprot.writeFieldBegin('description', TType.STRING, 3)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.ownerOxygenId != None:
      oprot.writeFieldBegin('ownerOxygenId', TType.STRING, 4)
      oprot.writeString(self.ownerOxygenId)
      oprot.writeFieldEnd()
    if self.storageName != None:
      oprot.writeFieldBegin('storageName', TType.STRING, 5)
      oprot.writeString(self.storageName)
      oprot.writeFieldEnd()
    if self.capacity != None:
      oprot.writeFieldBegin('capacity', TType.I32, 6)
      oprot.writeI32(self.capacity)
      oprot.writeFieldEnd()
    if self.listed != None:
      oprot.writeFieldBegin('listed', TType.BOOL, 7)
      oprot.writeBool(self.listed)
      oprot.writeFieldEnd()
    if self.writableDefault != None:
      oprot.writeFieldBegin('writableDefault', TType.BOOL, 8)
      oprot.writeBool(self.writableDefault)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createSpace_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiSpaceInfo, cloudfs.ttypes.ApiSpaceInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiSpaceInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createSpace_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSpaceBySpaceId_args:
  """
  Attributes:
   - apiSessionId
   - spaceOid
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceOid', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, spaceOid=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceOid = spaceOid
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSpaceBySpaceId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceOid != None:
      oprot.writeFieldBegin('spaceOid', TType.STRING, 2)
      oprot.writeString(self.spaceOid)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSpaceBySpaceId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiSpaceInfo, cloudfs.ttypes.ApiSpaceInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiSpaceInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSpaceBySpaceId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSpaceBySpaceName_args:
  """
  Attributes:
   - apiSessionId
   - spaceName
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceName', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, spaceName=None,):
    self.apiSessionId = apiSessionId
    self.spaceName = spaceName

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceName = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSpaceBySpaceName_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceName != None:
      oprot.writeFieldBegin('spaceName', TType.STRING, 2)
      oprot.writeString(self.spaceName)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSpaceBySpaceName_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiSpaceInfo, cloudfs.ttypes.ApiSpaceInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiSpaceInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSpaceBySpaceName_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserVolumeByOxygenId_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, oxygenId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserVolumeByOxygenId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getUserVolumeByOxygenId_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiUserVolumeInfo, cloudfs.ttypes.ApiUserVolumeInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiUserVolumeInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getUserVolumeByOxygenId_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubscriptionsForUser_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, oxygenId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubscriptionsForUser_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubscriptionsForUser_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(management.ttypes.ApiSpaceSubscription, management.ttypes.ApiSpaceSubscription.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype52, _size49) = iprot.readListBegin()
          for _i53 in xrange(_size49):
            _elem54 = management.ttypes.ApiSpaceSubscription()
            _elem54.read(iprot)
            self.success.append(_elem54)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubscriptionsForUser_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter55 in self.success:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modifySpace_args:
  """
  Attributes:
   - apiSessionId
   - spaceOid
   - repositoryNodeServiceId
   - spaceName
   - description
   - ownerOxygenId
   - capacity
   - listed
   - writableDefault
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceOid', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
    (4, TType.STRING, 'spaceName', None, None, ), # 4
    (5, TType.STRING, 'description', None, None, ), # 5
    (6, TType.STRING, 'ownerOxygenId', None, None, ), # 6
    (7, TType.I32, 'capacity', None, None, ), # 7
    (8, TType.BOOL, 'listed', None, None, ), # 8
    (9, TType.BOOL, 'writableDefault', None, None, ), # 9
  )

  def __init__(self, apiSessionId=None, spaceOid=None, repositoryNodeServiceId=None, spaceName=None, description=None, ownerOxygenId=None, capacity=None, listed=None, writableDefault=None,):
    self.apiSessionId = apiSessionId
    self.spaceOid = spaceOid
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.spaceName = spaceName
    self.description = description
    self.ownerOxygenId = ownerOxygenId
    self.capacity = capacity
    self.listed = listed
    self.writableDefault = writableDefault

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.spaceName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.description = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ownerOxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I32:
          self.capacity = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.BOOL:
          self.listed = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.BOOL:
          self.writableDefault = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modifySpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceOid != None:
      oprot.writeFieldBegin('spaceOid', TType.STRING, 2)
      oprot.writeString(self.spaceOid)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.spaceName != None:
      oprot.writeFieldBegin('spaceName', TType.STRING, 4)
      oprot.writeString(self.spaceName)
      oprot.writeFieldEnd()
    if self.description != None:
      oprot.writeFieldBegin('description', TType.STRING, 5)
      oprot.writeString(self.description)
      oprot.writeFieldEnd()
    if self.ownerOxygenId != None:
      oprot.writeFieldBegin('ownerOxygenId', TType.STRING, 6)
      oprot.writeString(self.ownerOxygenId)
      oprot.writeFieldEnd()
    if self.capacity != None:
      oprot.writeFieldBegin('capacity', TType.I32, 7)
      oprot.writeI32(self.capacity)
      oprot.writeFieldEnd()
    if self.listed != None:
      oprot.writeFieldBegin('listed', TType.BOOL, 8)
      oprot.writeBool(self.listed)
      oprot.writeFieldEnd()
    if self.writableDefault != None:
      oprot.writeFieldBegin('writableDefault', TType.BOOL, 9)
      oprot.writeBool(self.writableDefault)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modifySpace_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (cloudfs.ttypes.ApiSpaceInfo, cloudfs.ttypes.ApiSpaceInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = cloudfs.ttypes.ApiSpaceInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modifySpace_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modifyUserVolumeCapacityByOxygenId_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
   - capacity
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
    (3, TType.I32, 'capacity', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, oxygenId=None, capacity=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId
    self.capacity = capacity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.capacity = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modifyUserVolumeCapacityByOxygenId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.capacity != None:
      oprot.writeFieldBegin('capacity', TType.I32, 3)
      oprot.writeI32(self.capacity)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class modifyUserVolumeCapacityByOxygenId_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('modifyUserVolumeCapacityByOxygenId_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpace_args:
  """
  Attributes:
   - apiSessionId
   - spaceOid
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceOid', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, spaceOid=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceOid = spaceOid
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceOid != None:
      oprot.writeFieldBegin('spaceOid', TType.STRING, 2)
      oprot.writeString(self.spaceOid)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class deleteSpace_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('deleteSpace_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubscriptionsForSpace_args:
  """
  Attributes:
   - apiSessionId
   - spaceOid
   - repositoryNodeServiceId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceOid', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, spaceOid=None, repositoryNodeServiceId=None,):
    self.apiSessionId = apiSessionId
    self.spaceOid = spaceOid
    self.repositoryNodeServiceId = repositoryNodeServiceId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubscriptionsForSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceOid != None:
      oprot.writeFieldBegin('spaceOid', TType.STRING, 2)
      oprot.writeString(self.spaceOid)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getSubscriptionsForSpace_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(management.ttypes.ApiSpaceSubscription, management.ttypes.ApiSpaceSubscription.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype59, _size56) = iprot.readListBegin()
          for _i60 in xrange(_size56):
            _elem61 = management.ttypes.ApiSpaceSubscription()
            _elem61.read(iprot)
            self.success.append(_elem61)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getSubscriptionsForSpace_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter62 in self.success:
        iter62.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addUserToSpace_args:
  """
  Attributes:
   - apiSessionId
   - spaceOid
   - repositoryNodeServiceId
   - oxygenId
   - canWrite
   - canManage
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceOid', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
    (4, TType.STRING, 'oxygenId', None, None, ), # 4
    (5, TType.BOOL, 'canWrite', None, None, ), # 5
    (6, TType.BOOL, 'canManage', None, None, ), # 6
  )

  def __init__(self, apiSessionId=None, spaceOid=None, repositoryNodeServiceId=None, oxygenId=None, canWrite=None, canManage=None,):
    self.apiSessionId = apiSessionId
    self.spaceOid = spaceOid
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.oxygenId = oxygenId
    self.canWrite = canWrite
    self.canManage = canManage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.canWrite = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.canManage = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addUserToSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceOid != None:
      oprot.writeFieldBegin('spaceOid', TType.STRING, 2)
      oprot.writeString(self.spaceOid)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 4)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.canWrite != None:
      oprot.writeFieldBegin('canWrite', TType.BOOL, 5)
      oprot.writeBool(self.canWrite)
      oprot.writeFieldEnd()
    if self.canManage != None:
      oprot.writeFieldBegin('canManage', TType.BOOL, 6)
      oprot.writeBool(self.canManage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addUserToSpace_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addUserToSpace_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeUserFromSpace_args:
  """
  Attributes:
   - apiSessionId
   - spaceOid
   - repositoryNodeServiceId
   - oxygenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceOid', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
    (4, TType.STRING, 'oxygenId', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, spaceOid=None, repositoryNodeServiceId=None, oxygenId=None,):
    self.apiSessionId = apiSessionId
    self.spaceOid = spaceOid
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.oxygenId = oxygenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeUserFromSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceOid != None:
      oprot.writeFieldBegin('spaceOid', TType.STRING, 2)
      oprot.writeString(self.spaceOid)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 4)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeUserFromSpace_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeUserFromSpace_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addGroupToSpace_args:
  """
  Attributes:
   - apiSessionId
   - spaceOid
   - repositoryNodeServiceId
   - groupId
   - canWrite
   - canManage
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceOid', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
    (4, TType.STRING, 'groupId', None, None, ), # 4
    (5, TType.BOOL, 'canWrite', None, None, ), # 5
    (6, TType.BOOL, 'canManage', None, None, ), # 6
  )

  def __init__(self, apiSessionId=None, spaceOid=None, repositoryNodeServiceId=None, groupId=None, canWrite=None, canManage=None,):
    self.apiSessionId = apiSessionId
    self.spaceOid = spaceOid
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.groupId = groupId
    self.canWrite = canWrite
    self.canManage = canManage

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.BOOL:
          self.canWrite = iprot.readBool();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.BOOL:
          self.canManage = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addGroupToSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceOid != None:
      oprot.writeFieldBegin('spaceOid', TType.STRING, 2)
      oprot.writeString(self.spaceOid)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 4)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.canWrite != None:
      oprot.writeFieldBegin('canWrite', TType.BOOL, 5)
      oprot.writeBool(self.canWrite)
      oprot.writeFieldEnd()
    if self.canManage != None:
      oprot.writeFieldBegin('canManage', TType.BOOL, 6)
      oprot.writeBool(self.canManage)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addGroupToSpace_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addGroupToSpace_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeGroupFromSpace_args:
  """
  Attributes:
   - apiSessionId
   - spaceOid
   - repositoryNodeServiceId
   - groupId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'spaceOid', None, None, ), # 2
    (3, TType.STRING, 'repositoryNodeServiceId', None, None, ), # 3
    (4, TType.STRING, 'groupId', None, None, ), # 4
  )

  def __init__(self, apiSessionId=None, spaceOid=None, repositoryNodeServiceId=None, groupId=None,):
    self.apiSessionId = apiSessionId
    self.spaceOid = spaceOid
    self.repositoryNodeServiceId = repositoryNodeServiceId
    self.groupId = groupId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.spaceOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.repositoryNodeServiceId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeGroupFromSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.spaceOid != None:
      oprot.writeFieldBegin('spaceOid', TType.STRING, 2)
      oprot.writeString(self.spaceOid)
      oprot.writeFieldEnd()
    if self.repositoryNodeServiceId != None:
      oprot.writeFieldBegin('repositoryNodeServiceId', TType.STRING, 3)
      oprot.writeString(self.repositoryNodeServiceId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 4)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeGroupFromSpace_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeGroupFromSpace_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addUserToGroup_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
   - groupId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
    (3, TType.STRING, 'groupId', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, oxygenId=None, groupId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId
    self.groupId = groupId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addUserToGroup_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 3)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class addUserToGroup_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('addUserToGroup_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeUserFromGroup_args:
  """
  Attributes:
   - apiSessionId
   - oxygenId
   - groupId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'oxygenId', None, None, ), # 2
    (3, TType.STRING, 'groupId', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, oxygenId=None, groupId=None,):
    self.apiSessionId = apiSessionId
    self.oxygenId = oxygenId
    self.groupId = groupId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.oxygenId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeUserFromGroup_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.oxygenId != None:
      oprot.writeFieldBegin('oxygenId', TType.STRING, 2)
      oprot.writeString(self.oxygenId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 3)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class removeUserFromGroup_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('removeUserFromGroup_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllGroups_args:
  """
  Attributes:
   - apiSessionId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
  )

  def __init__(self, apiSessionId=None,):
    self.apiSessionId = apiSessionId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllGroups_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getAllGroups_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.LIST, 'success', (TType.STRUCT,(management.ttypes.ApiGroupInfo, management.ttypes.ApiGroupInfo.thrift_spec)), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.LIST:
          self.success = []
          (_etype66, _size63) = iprot.readListBegin()
          for _i67 in xrange(_size63):
            _elem68 = management.ttypes.ApiGroupInfo()
            _elem68.read(iprot)
            self.success.append(_elem68)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getAllGroups_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.LIST, 0)
      oprot.writeListBegin(TType.STRUCT, len(self.success))
      for iter69 in self.success:
        iter69.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createGroup_args:
  """
  Attributes:
   - apiSessionId
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, name=None,):
    self.apiSessionId = apiSessionId
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createGroup_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class createGroup_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.STRUCT, 'success', (management.ttypes.ApiGroupInfo, management.ttypes.ApiGroupInfo.thrift_spec), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.STRUCT:
          self.success = management.ttypes.ApiGroupInfo()
          self.success.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('createGroup_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.STRUCT, 0)
      self.success.write(oprot)
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupDetailsByGroupId_args:
  """
  Attributes:
   - apiSessionId
   - groupId
   - name
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
    (3, TType.STRING, 'name', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, groupId=None, name=None,):
    self.apiSessionId = apiSessionId
    self.groupId = groupId
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupDetailsByGroupId_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.name != None:
      oprot.writeFieldBegin('name', TType.STRING, 3)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupDetailsByGroupId_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupDetailsByGroupId_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGroupPermissions_args:
  """
  Attributes:
   - apiSessionId
   - groupId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
  )

  def __init__(self, apiSessionId=None, groupId=None,):
    self.apiSessionId = apiSessionId
    self.groupId = groupId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGroupPermissions_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class getGroupPermissions_result:
  """
  Attributes:
   - success
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    (0, TType.MAP, 'success', (TType.STRING,None,TType.I32,None), None, ), # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, success=None, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.success = success
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 0:
        if ftype == TType.MAP:
          self.success = {}
          (_ktype71, _vtype72, _size70 ) = iprot.readMapBegin() 
          for _i74 in xrange(_size70):
            _key75 = iprot.readString();
            _val76 = iprot.readI32();
            self.success[_key75] = _val76
          iprot.readMapEnd()
        else:
          iprot.skip(ftype)
      elif fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('getGroupPermissions_result')
    if self.success != None:
      oprot.writeFieldBegin('success', TType.MAP, 0)
      oprot.writeMapBegin(TType.STRING, TType.I32, len(self.success))
      for kiter77,viter78 in self.success.items():
        oprot.writeString(kiter77)
        oprot.writeI32(viter78)
      oprot.writeMapEnd()
      oprot.writeFieldEnd()
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupPermissionAdmin_args:
  """
  Attributes:
   - apiSessionId
   - groupId
   - allowed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
    (3, TType.BOOL, 'allowed', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, groupId=None, allowed=None,):
    self.apiSessionId = apiSessionId
    self.groupId = groupId
    self.allowed = allowed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.allowed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupPermissionAdmin_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.allowed != None:
      oprot.writeFieldBegin('allowed', TType.BOOL, 3)
      oprot.writeBool(self.allowed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupPermissionAdmin_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupPermissionAdmin_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupPermissionCreateSpace_args:
  """
  Attributes:
   - apiSessionId
   - groupId
   - allowed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
    (3, TType.BOOL, 'allowed', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, groupId=None, allowed=None,):
    self.apiSessionId = apiSessionId
    self.groupId = groupId
    self.allowed = allowed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.allowed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupPermissionCreateSpace_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.allowed != None:
      oprot.writeFieldBegin('allowed', TType.BOOL, 3)
      oprot.writeBool(self.allowed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupPermissionCreateSpace_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupPermissionCreateSpace_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupPermissionInviteOutsideGuests_args:
  """
  Attributes:
   - apiSessionId
   - groupId
   - allowed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
    (3, TType.BOOL, 'allowed', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, groupId=None, allowed=None,):
    self.apiSessionId = apiSessionId
    self.groupId = groupId
    self.allowed = allowed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.allowed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupPermissionInviteOutsideGuests_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.allowed != None:
      oprot.writeFieldBegin('allowed', TType.BOOL, 3)
      oprot.writeBool(self.allowed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupPermissionInviteOutsideGuests_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupPermissionInviteOutsideGuests_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupPermissionPermanentDelete_args:
  """
  Attributes:
   - apiSessionId
   - groupId
   - allowed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'apiSessionId', None, None, ), # 1
    (2, TType.STRING, 'groupId', None, None, ), # 2
    (3, TType.BOOL, 'allowed', None, None, ), # 3
  )

  def __init__(self, apiSessionId=None, groupId=None, allowed=None,):
    self.apiSessionId = apiSessionId
    self.groupId = groupId
    self.allowed = allowed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.apiSessionId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.groupId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.BOOL:
          self.allowed = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupPermissionPermanentDelete_args')
    if self.apiSessionId != None:
      oprot.writeFieldBegin('apiSessionId', TType.STRING, 1)
      oprot.writeString(self.apiSessionId)
      oprot.writeFieldEnd()
    if self.groupId != None:
      oprot.writeFieldBegin('groupId', TType.STRING, 2)
      oprot.writeString(self.groupId)
      oprot.writeFieldEnd()
    if self.allowed != None:
      oprot.writeFieldBegin('allowed', TType.BOOL, 3)
      oprot.writeBool(self.allowed)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class updateGroupPermissionPermanentDelete_result:
  """
  Attributes:
   - aunxe
   - ainie
   - asyse
   - arule
   - asese
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'aunxe', (errors.ttypes.ApiUnexpectedException, errors.ttypes.ApiUnexpectedException.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ainie', (errors.ttypes.ApiInvalidInputException, errors.ttypes.ApiInvalidInputException.thrift_spec), None, ), # 2
    (3, TType.STRUCT, 'asyse', (errors.ttypes.ApiSystemsException, errors.ttypes.ApiSystemsException.thrift_spec), None, ), # 3
    (4, TType.STRUCT, 'arule', (errors.ttypes.ApiRuleException, errors.ttypes.ApiRuleException.thrift_spec), None, ), # 4
    (5, TType.STRUCT, 'asese', (errors.ttypes.ApiSessionException, errors.ttypes.ApiSessionException.thrift_spec), None, ), # 5
  )

  def __init__(self, aunxe=None, ainie=None, asyse=None, arule=None, asese=None,):
    self.aunxe = aunxe
    self.ainie = ainie
    self.asyse = asyse
    self.arule = arule
    self.asese = asese

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.aunxe = errors.ttypes.ApiUnexpectedException()
          self.aunxe.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ainie = errors.ttypes.ApiInvalidInputException()
          self.ainie.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRUCT:
          self.asyse = errors.ttypes.ApiSystemsException()
          self.asyse.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRUCT:
          self.arule = errors.ttypes.ApiRuleException()
          self.arule.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRUCT:
          self.asese = errors.ttypes.ApiSessionException()
          self.asese.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('updateGroupPermissionPermanentDelete_result')
    if self.aunxe != None:
      oprot.writeFieldBegin('aunxe', TType.STRUCT, 1)
      self.aunxe.write(oprot)
      oprot.writeFieldEnd()
    if self.ainie != None:
      oprot.writeFieldBegin('ainie', TType.STRUCT, 2)
      self.ainie.write(oprot)
      oprot.writeFieldEnd()
    if self.asyse != None:
      oprot.writeFieldBegin('asyse', TType.STRUCT, 3)
      self.asyse.write(oprot)
      oprot.writeFieldEnd()
    if self.arule != None:
      oprot.writeFieldBegin('arule', TType.STRUCT, 4)
      self.arule.write(oprot)
      oprot.writeFieldEnd()
    if self.asese != None:
      oprot.writeFieldBegin('asese', TType.STRUCT, 5)
      self.asese.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
