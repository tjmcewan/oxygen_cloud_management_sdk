#!/usr/bin/env python
#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import O2Service
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  string getInfo()'
  print '  string getInfoService(string serviceId, string serviceName)'
  print '  ApiSignupInfo signupNewUser(string apiKey, string localeString, string email, string password, string loginId, string activationCode, ApiSignupSessionOption sessionOption)'
  print '  ApiSignupInfo signupNewInternalUser(string apiKey, string localeString, string email, string password, string loginId, string activationCode, ApiSignupSessionOption sessionOption)'
  print '  string createPendingExternalEnterpriseUser(string apiKey, string activationCode, string accountId, string email, string ipAddress, string rurl, string locale)'
  print '  void signupPendingUserToEnterprise(string apiKey, string activationCode, string accountId, string email, string ipAddress, bool checkEmailDomain, string customMessage, string locale)'
  print '  void activatePendingUserToEnterprise(string apiKey, string acode, string ecode, string firstName, string lastName, string email, string password, string oxygenId, string externalLoginId, bool optIn, string localString)'
  print '  void provisionNewUserToAccount(string apiKey, string networkAccountOid, string loginId, string firstName, string lastName, string email, string password, string securityQuestion, string securityAnswer, string activationCode, string optionalExternalLoginId)'
  print '  ApiLogin requestLogin(string apiKey)'
  print '  ApiSession validateLogin(string apiKey, string tokenId)'
  print '  ApiSession validateLoginAndDevice(string apiKey, string tokenId, string deviceId)'
  print '  void registerDevice(string sessionId, string deviceId, i32 status, string deviceDescription)'
  print '  void changeDeviceOwner(string sessionId, string deviceId)'
  print '  void requestDeviceRegistration(string sessionId, string deviceId, string deviceDescription)'
  print '  string loginInternalUser(string apiKey, string tokenId, string rurl, string appId, string oxygenId, string password)'
  print '  ApiSession loginAdminUser(string apiKey, string oxygenId, string password)'
  print '  void logout(string apiSessionId)'
  print '  bool isExternalUser(string apiKey, string oxygenId)'
  print '  bool isExternalAccount(string apiKey, string accountId)'
  print '  string getExternalGatewayUrl(string apiKey, string oxygenId, string returnURL, string webAppId, string reuseAuthenticationTokenId)'
  print '  ApiUserInfo getUserInfoBySessionId(string sessionId)'
  print '   findSpaces(string apiSessionId)'
  print '   findChildFiles(string apiSessionId, string repositoryNodeServiceId, string spaceId, string parentId, i64 modifiedSince)'
  print '   getChildObjects(string apiSessionId, ApiObject parent, i64 modifiedSince)'
  print '   findModifiedFilesInSpace(string apiSessionId, string repositoryNodeServiceId, string spaceId, i32 limit)'
  print '  ApiSpace findSpaceById(string apiSessionId, string spaceId, string repositoryNodeServiceId)'
  print '  ApiFile findFileById(string apiSessionId, string spaceId, string fileId, string repositoryNodeServiceId)'
  print '  ApiObject findObjectById(string apiSessionId, string spaceId, string fileId, string repositoryNodeServiceId)'
  print '  string createWeblinkUrl(string apiSessionId, ApiFile file, i32 expireInXMinutes, string password)'
  print '  string createWeblinkUrlForObject(string apiSessionId, ApiObject file, i32 expireInXMinutes, string password)'
  print '  string expireWeblinks(string apiSessionId, ApiFile file)'
  print '  string expireWeblinksForObject(string apiSessionId, ApiObject file)'
  print '  ApiFile findFileByParentAndName(string apiSessionId, string spaceId, string parentId, string name, string repositoryNodeServiceId)'
  print '  ApiFile findFileByPath(string apiSessionId, string spaceId, string path, string repositoryNodeServiceId)'
  print '  void deleteFile(string apiSessionId, ApiFile file)'
  print '  void deleteObject(string apiSessionId, ApiObject file)'
  print '  void moveFile(string apiSessionId, ApiFile source, string newParentFolderId, string newName)'
  print '  void moveObject(string apiSessionId, ApiObject source, string newParentFolderId, string newName)'
  print '  void copyFile(string apiSessionId, ApiFile source, string newParentFolderId, string newName)'
  print '  void copyObject(string apiSessionId, ApiObject source, string newParentFolderId, string newName)'
  print '  ApiFile createFolder(string apiSessionId, string spaceId, string parentId, string name, string repositoryNodeServiceId)'
  print '  ApiObject createFolderObject(string apiSessionId, ApiObject parent, string name)'
  print '  ApiDownload createDownload(string apiSessionId, string spaceId, string fileId, string repositoryNodeServiceId)'
  print '  ApiDownload createDownloadObject(string apiSessionId, ApiObject apiObject)'
  print '  ApiUpload createUpload(string apiSessionId, string spaceId, string parentId, string name, i64 sizeInByte, string repositoryNodeServiceId)'
  print '  ApiUpload createUploadObject(string apiSessionId, ApiObject parent, string name, i64 sizeInByte)'
  print '  string confirmUpload(string apiSessionId, string spaceId, string parentId, string uploadId, string name, string hashValue, string repositoryNodeServiceId, i64 fileTimestampInSecsSinceEpoch)'
  print '  string confirmUploadObject(string apiSessionId, ApiObject parent, string uploadId, string name, string hashValue, i64 fileTimestampInSecsSinceEpoch)'
  print '   readLog(string apiSessionId, string timestampStart, string timestampEnd, string exclusiveStart)'
  print '  ApiUserInfo createUser(string apiSessionId, string oxygenId, string email, string corporateUserName, string firstName, string lastName, string password)'
  print '   getAllUsers(string apiSessionId, i32 offset)'
  print '   getGuestUsers(string apiSessionId)'
  print '  ApiUserInfo getUserByOxygenId(string apiSessionId, string oxygenId)'
  print '  ApiUserInfo getUserByExternalId(string apiSessionId, string externalId)'
  print '  ApiUserInfo disableUserByOxygenId(string apiSessionId, string oxygenId)'
  print '  ApiUserInfo enableUserByOxygenId(string apiSessionId, string oxygenId)'
  print '  ApiUserInfo deleteUserByOxygenId(string apiSessionId, string oxygenId)'
  print '  ApiUserInfo updateUserOxygenId(string apiSessionId, string oxygenId, string newOxygenId)'
  print '  ApiUserInfo updateUserDetailsByOxygenId(string apiSessionId, string oxygenId, string email, string firstName, string lastName, string displayName)'
  print '  ApiSpaceInfo createSpace(string apiSessionId, string name, string description, string ownerOxygenId, string storageName, i32 capacity, bool listed, bool writableDefault)'
  print '  ApiSpaceInfo getSpaceBySpaceId(string apiSessionId, string spaceOid, string repositoryNodeServiceId)'
  print '  ApiSpaceInfo getSpaceBySpaceName(string apiSessionId, string spaceName)'
  print '  ApiUserVolumeInfo getUserVolumeByOxygenId(string apiSessionId, string oxygenId)'
  print '   getSubscriptionsForUser(string apiSessionId, string oxygenId)'
  print '  ApiSpaceInfo modifySpace(string apiSessionId, string spaceOid, string repositoryNodeServiceId, string spaceName, string description, string ownerOxygenId, i32 capacity, bool listed, bool writableDefault)'
  print '  void modifyUserVolumeCapacityByOxygenId(string apiSessionId, string oxygenId, i32 capacity)'
  print '  void deleteSpace(string apiSessionId, string spaceOid, string repositoryNodeServiceId)'
  print '   getSubscriptionsForSpace(string apiSessionId, string spaceOid, string repositoryNodeServiceId)'
  print '  void addUserToSpace(string apiSessionId, string spaceOid, string repositoryNodeServiceId, string oxygenId, bool canWrite, bool canManage)'
  print '  void removeUserFromSpace(string apiSessionId, string spaceOid, string repositoryNodeServiceId, string oxygenId)'
  print '  void addGroupToSpace(string apiSessionId, string spaceOid, string repositoryNodeServiceId, string groupId, bool canWrite, bool canManage)'
  print '  void removeGroupFromSpace(string apiSessionId, string spaceOid, string repositoryNodeServiceId, string groupId)'
  print '  void addUserToGroup(string apiSessionId, string oxygenId, string groupId)'
  print '  void removeUserFromGroup(string apiSessionId, string oxygenId, string groupId)'
  print '   getAllGroups(string apiSessionId)'
  print '  ApiGroupInfo createGroup(string apiSessionId, string name)'
  print '  void updateGroupDetailsByGroupId(string apiSessionId, string groupId, string name)'
  print '   getGroupPermissions(string apiSessionId, string groupId)'
  print '  void updateGroupPermissionAdmin(string apiSessionId, string groupId, bool allowed)'
  print '  void updateGroupPermissionCreateSpace(string apiSessionId, string groupId, bool allowed)'
  print '  void updateGroupPermissionInviteOutsideGuests(string apiSessionId, string groupId, bool allowed)'
  print '  void updateGroupPermissionPermanentDelete(string apiSessionId, string groupId, bool allowed)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = O2Service.Client(protocol)
transport.open()

if cmd == 'getInfo':
  if len(args) != 0:
    print 'getInfo requires 0 args'
    sys.exit(1)
  pp.pprint(client.getInfo())

elif cmd == 'getInfoService':
  if len(args) != 2:
    print 'getInfoService requires 2 args'
    sys.exit(1)
  pp.pprint(client.getInfoService(args[0],args[1],))

elif cmd == 'signupNewUser':
  if len(args) != 7:
    print 'signupNewUser requires 7 args'
    sys.exit(1)
  pp.pprint(client.signupNewUser(args[0],args[1],args[2],args[3],args[4],args[5],eval(args[6]),))

elif cmd == 'signupNewInternalUser':
  if len(args) != 7:
    print 'signupNewInternalUser requires 7 args'
    sys.exit(1)
  pp.pprint(client.signupNewInternalUser(args[0],args[1],args[2],args[3],args[4],args[5],eval(args[6]),))

elif cmd == 'createPendingExternalEnterpriseUser':
  if len(args) != 7:
    print 'createPendingExternalEnterpriseUser requires 7 args'
    sys.exit(1)
  pp.pprint(client.createPendingExternalEnterpriseUser(args[0],args[1],args[2],args[3],args[4],args[5],args[6],))

elif cmd == 'signupPendingUserToEnterprise':
  if len(args) != 8:
    print 'signupPendingUserToEnterprise requires 8 args'
    sys.exit(1)
  pp.pprint(client.signupPendingUserToEnterprise(args[0],args[1],args[2],args[3],args[4],eval(args[5]),args[6],args[7],))

elif cmd == 'activatePendingUserToEnterprise':
  if len(args) != 11:
    print 'activatePendingUserToEnterprise requires 11 args'
    sys.exit(1)
  pp.pprint(client.activatePendingUserToEnterprise(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],eval(args[9]),args[10],))

elif cmd == 'provisionNewUserToAccount':
  if len(args) != 11:
    print 'provisionNewUserToAccount requires 11 args'
    sys.exit(1)
  pp.pprint(client.provisionNewUserToAccount(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],))

elif cmd == 'requestLogin':
  if len(args) != 1:
    print 'requestLogin requires 1 args'
    sys.exit(1)
  pp.pprint(client.requestLogin(args[0],))

elif cmd == 'validateLogin':
  if len(args) != 2:
    print 'validateLogin requires 2 args'
    sys.exit(1)
  pp.pprint(client.validateLogin(args[0],args[1],))

elif cmd == 'validateLoginAndDevice':
  if len(args) != 3:
    print 'validateLoginAndDevice requires 3 args'
    sys.exit(1)
  pp.pprint(client.validateLoginAndDevice(args[0],args[1],args[2],))

elif cmd == 'registerDevice':
  if len(args) != 4:
    print 'registerDevice requires 4 args'
    sys.exit(1)
  pp.pprint(client.registerDevice(args[0],args[1],eval(args[2]),args[3],))

elif cmd == 'changeDeviceOwner':
  if len(args) != 2:
    print 'changeDeviceOwner requires 2 args'
    sys.exit(1)
  pp.pprint(client.changeDeviceOwner(args[0],args[1],))

elif cmd == 'requestDeviceRegistration':
  if len(args) != 3:
    print 'requestDeviceRegistration requires 3 args'
    sys.exit(1)
  pp.pprint(client.requestDeviceRegistration(args[0],args[1],args[2],))

elif cmd == 'loginInternalUser':
  if len(args) != 6:
    print 'loginInternalUser requires 6 args'
    sys.exit(1)
  pp.pprint(client.loginInternalUser(args[0],args[1],args[2],args[3],args[4],args[5],))

elif cmd == 'loginAdminUser':
  if len(args) != 3:
    print 'loginAdminUser requires 3 args'
    sys.exit(1)
  pp.pprint(client.loginAdminUser(args[0],args[1],args[2],))

elif cmd == 'logout':
  if len(args) != 1:
    print 'logout requires 1 args'
    sys.exit(1)
  pp.pprint(client.logout(args[0],))

elif cmd == 'isExternalUser':
  if len(args) != 2:
    print 'isExternalUser requires 2 args'
    sys.exit(1)
  pp.pprint(client.isExternalUser(args[0],args[1],))

elif cmd == 'isExternalAccount':
  if len(args) != 2:
    print 'isExternalAccount requires 2 args'
    sys.exit(1)
  pp.pprint(client.isExternalAccount(args[0],args[1],))

elif cmd == 'getExternalGatewayUrl':
  if len(args) != 5:
    print 'getExternalGatewayUrl requires 5 args'
    sys.exit(1)
  pp.pprint(client.getExternalGatewayUrl(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'getUserInfoBySessionId':
  if len(args) != 1:
    print 'getUserInfoBySessionId requires 1 args'
    sys.exit(1)
  pp.pprint(client.getUserInfoBySessionId(args[0],))

elif cmd == 'findSpaces':
  if len(args) != 1:
    print 'findSpaces requires 1 args'
    sys.exit(1)
  pp.pprint(client.findSpaces(args[0],))

elif cmd == 'findChildFiles':
  if len(args) != 5:
    print 'findChildFiles requires 5 args'
    sys.exit(1)
  pp.pprint(client.findChildFiles(args[0],args[1],args[2],args[3],eval(args[4]),))

elif cmd == 'getChildObjects':
  if len(args) != 3:
    print 'getChildObjects requires 3 args'
    sys.exit(1)
  pp.pprint(client.getChildObjects(args[0],eval(args[1]),eval(args[2]),))

elif cmd == 'findModifiedFilesInSpace':
  if len(args) != 4:
    print 'findModifiedFilesInSpace requires 4 args'
    sys.exit(1)
  pp.pprint(client.findModifiedFilesInSpace(args[0],args[1],args[2],eval(args[3]),))

elif cmd == 'findSpaceById':
  if len(args) != 3:
    print 'findSpaceById requires 3 args'
    sys.exit(1)
  pp.pprint(client.findSpaceById(args[0],args[1],args[2],))

elif cmd == 'findFileById':
  if len(args) != 4:
    print 'findFileById requires 4 args'
    sys.exit(1)
  pp.pprint(client.findFileById(args[0],args[1],args[2],args[3],))

elif cmd == 'findObjectById':
  if len(args) != 4:
    print 'findObjectById requires 4 args'
    sys.exit(1)
  pp.pprint(client.findObjectById(args[0],args[1],args[2],args[3],))

elif cmd == 'createWeblinkUrl':
  if len(args) != 4:
    print 'createWeblinkUrl requires 4 args'
    sys.exit(1)
  pp.pprint(client.createWeblinkUrl(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'createWeblinkUrlForObject':
  if len(args) != 4:
    print 'createWeblinkUrlForObject requires 4 args'
    sys.exit(1)
  pp.pprint(client.createWeblinkUrlForObject(args[0],eval(args[1]),eval(args[2]),args[3],))

elif cmd == 'expireWeblinks':
  if len(args) != 2:
    print 'expireWeblinks requires 2 args'
    sys.exit(1)
  pp.pprint(client.expireWeblinks(args[0],eval(args[1]),))

elif cmd == 'expireWeblinksForObject':
  if len(args) != 2:
    print 'expireWeblinksForObject requires 2 args'
    sys.exit(1)
  pp.pprint(client.expireWeblinksForObject(args[0],eval(args[1]),))

elif cmd == 'findFileByParentAndName':
  if len(args) != 5:
    print 'findFileByParentAndName requires 5 args'
    sys.exit(1)
  pp.pprint(client.findFileByParentAndName(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'findFileByPath':
  if len(args) != 4:
    print 'findFileByPath requires 4 args'
    sys.exit(1)
  pp.pprint(client.findFileByPath(args[0],args[1],args[2],args[3],))

elif cmd == 'deleteFile':
  if len(args) != 2:
    print 'deleteFile requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteFile(args[0],eval(args[1]),))

elif cmd == 'deleteObject':
  if len(args) != 2:
    print 'deleteObject requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteObject(args[0],eval(args[1]),))

elif cmd == 'moveFile':
  if len(args) != 4:
    print 'moveFile requires 4 args'
    sys.exit(1)
  pp.pprint(client.moveFile(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'moveObject':
  if len(args) != 4:
    print 'moveObject requires 4 args'
    sys.exit(1)
  pp.pprint(client.moveObject(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'copyFile':
  if len(args) != 4:
    print 'copyFile requires 4 args'
    sys.exit(1)
  pp.pprint(client.copyFile(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'copyObject':
  if len(args) != 4:
    print 'copyObject requires 4 args'
    sys.exit(1)
  pp.pprint(client.copyObject(args[0],eval(args[1]),args[2],args[3],))

elif cmd == 'createFolder':
  if len(args) != 5:
    print 'createFolder requires 5 args'
    sys.exit(1)
  pp.pprint(client.createFolder(args[0],args[1],args[2],args[3],args[4],))

elif cmd == 'createFolderObject':
  if len(args) != 3:
    print 'createFolderObject requires 3 args'
    sys.exit(1)
  pp.pprint(client.createFolderObject(args[0],eval(args[1]),args[2],))

elif cmd == 'createDownload':
  if len(args) != 4:
    print 'createDownload requires 4 args'
    sys.exit(1)
  pp.pprint(client.createDownload(args[0],args[1],args[2],args[3],))

elif cmd == 'createDownloadObject':
  if len(args) != 2:
    print 'createDownloadObject requires 2 args'
    sys.exit(1)
  pp.pprint(client.createDownloadObject(args[0],eval(args[1]),))

elif cmd == 'createUpload':
  if len(args) != 6:
    print 'createUpload requires 6 args'
    sys.exit(1)
  pp.pprint(client.createUpload(args[0],args[1],args[2],args[3],eval(args[4]),args[5],))

elif cmd == 'createUploadObject':
  if len(args) != 4:
    print 'createUploadObject requires 4 args'
    sys.exit(1)
  pp.pprint(client.createUploadObject(args[0],eval(args[1]),args[2],eval(args[3]),))

elif cmd == 'confirmUpload':
  if len(args) != 8:
    print 'confirmUpload requires 8 args'
    sys.exit(1)
  pp.pprint(client.confirmUpload(args[0],args[1],args[2],args[3],args[4],args[5],args[6],eval(args[7]),))

elif cmd == 'confirmUploadObject':
  if len(args) != 6:
    print 'confirmUploadObject requires 6 args'
    sys.exit(1)
  pp.pprint(client.confirmUploadObject(args[0],eval(args[1]),args[2],args[3],args[4],eval(args[5]),))

elif cmd == 'readLog':
  if len(args) != 4:
    print 'readLog requires 4 args'
    sys.exit(1)
  pp.pprint(client.readLog(args[0],args[1],args[2],args[3],))

elif cmd == 'createUser':
  if len(args) != 7:
    print 'createUser requires 7 args'
    sys.exit(1)
  pp.pprint(client.createUser(args[0],args[1],args[2],args[3],args[4],args[5],args[6],))

elif cmd == 'getAllUsers':
  if len(args) != 2:
    print 'getAllUsers requires 2 args'
    sys.exit(1)
  pp.pprint(client.getAllUsers(args[0],eval(args[1]),))

elif cmd == 'getGuestUsers':
  if len(args) != 1:
    print 'getGuestUsers requires 1 args'
    sys.exit(1)
  pp.pprint(client.getGuestUsers(args[0],))

elif cmd == 'getUserByOxygenId':
  if len(args) != 2:
    print 'getUserByOxygenId requires 2 args'
    sys.exit(1)
  pp.pprint(client.getUserByOxygenId(args[0],args[1],))

elif cmd == 'getUserByExternalId':
  if len(args) != 2:
    print 'getUserByExternalId requires 2 args'
    sys.exit(1)
  pp.pprint(client.getUserByExternalId(args[0],args[1],))

elif cmd == 'disableUserByOxygenId':
  if len(args) != 2:
    print 'disableUserByOxygenId requires 2 args'
    sys.exit(1)
  pp.pprint(client.disableUserByOxygenId(args[0],args[1],))

elif cmd == 'enableUserByOxygenId':
  if len(args) != 2:
    print 'enableUserByOxygenId requires 2 args'
    sys.exit(1)
  pp.pprint(client.enableUserByOxygenId(args[0],args[1],))

elif cmd == 'deleteUserByOxygenId':
  if len(args) != 2:
    print 'deleteUserByOxygenId requires 2 args'
    sys.exit(1)
  pp.pprint(client.deleteUserByOxygenId(args[0],args[1],))

elif cmd == 'updateUserOxygenId':
  if len(args) != 3:
    print 'updateUserOxygenId requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateUserOxygenId(args[0],args[1],args[2],))

elif cmd == 'updateUserDetailsByOxygenId':
  if len(args) != 6:
    print 'updateUserDetailsByOxygenId requires 6 args'
    sys.exit(1)
  pp.pprint(client.updateUserDetailsByOxygenId(args[0],args[1],args[2],args[3],args[4],args[5],))

elif cmd == 'createSpace':
  if len(args) != 8:
    print 'createSpace requires 8 args'
    sys.exit(1)
  pp.pprint(client.createSpace(args[0],args[1],args[2],args[3],args[4],eval(args[5]),eval(args[6]),eval(args[7]),))

elif cmd == 'getSpaceBySpaceId':
  if len(args) != 3:
    print 'getSpaceBySpaceId requires 3 args'
    sys.exit(1)
  pp.pprint(client.getSpaceBySpaceId(args[0],args[1],args[2],))

elif cmd == 'getSpaceBySpaceName':
  if len(args) != 2:
    print 'getSpaceBySpaceName requires 2 args'
    sys.exit(1)
  pp.pprint(client.getSpaceBySpaceName(args[0],args[1],))

elif cmd == 'getUserVolumeByOxygenId':
  if len(args) != 2:
    print 'getUserVolumeByOxygenId requires 2 args'
    sys.exit(1)
  pp.pprint(client.getUserVolumeByOxygenId(args[0],args[1],))

elif cmd == 'getSubscriptionsForUser':
  if len(args) != 2:
    print 'getSubscriptionsForUser requires 2 args'
    sys.exit(1)
  pp.pprint(client.getSubscriptionsForUser(args[0],args[1],))

elif cmd == 'modifySpace':
  if len(args) != 9:
    print 'modifySpace requires 9 args'
    sys.exit(1)
  pp.pprint(client.modifySpace(args[0],args[1],args[2],args[3],args[4],args[5],eval(args[6]),eval(args[7]),eval(args[8]),))

elif cmd == 'modifyUserVolumeCapacityByOxygenId':
  if len(args) != 3:
    print 'modifyUserVolumeCapacityByOxygenId requires 3 args'
    sys.exit(1)
  pp.pprint(client.modifyUserVolumeCapacityByOxygenId(args[0],args[1],eval(args[2]),))

elif cmd == 'deleteSpace':
  if len(args) != 3:
    print 'deleteSpace requires 3 args'
    sys.exit(1)
  pp.pprint(client.deleteSpace(args[0],args[1],args[2],))

elif cmd == 'getSubscriptionsForSpace':
  if len(args) != 3:
    print 'getSubscriptionsForSpace requires 3 args'
    sys.exit(1)
  pp.pprint(client.getSubscriptionsForSpace(args[0],args[1],args[2],))

elif cmd == 'addUserToSpace':
  if len(args) != 6:
    print 'addUserToSpace requires 6 args'
    sys.exit(1)
  pp.pprint(client.addUserToSpace(args[0],args[1],args[2],args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'removeUserFromSpace':
  if len(args) != 4:
    print 'removeUserFromSpace requires 4 args'
    sys.exit(1)
  pp.pprint(client.removeUserFromSpace(args[0],args[1],args[2],args[3],))

elif cmd == 'addGroupToSpace':
  if len(args) != 6:
    print 'addGroupToSpace requires 6 args'
    sys.exit(1)
  pp.pprint(client.addGroupToSpace(args[0],args[1],args[2],args[3],eval(args[4]),eval(args[5]),))

elif cmd == 'removeGroupFromSpace':
  if len(args) != 4:
    print 'removeGroupFromSpace requires 4 args'
    sys.exit(1)
  pp.pprint(client.removeGroupFromSpace(args[0],args[1],args[2],args[3],))

elif cmd == 'addUserToGroup':
  if len(args) != 3:
    print 'addUserToGroup requires 3 args'
    sys.exit(1)
  pp.pprint(client.addUserToGroup(args[0],args[1],args[2],))

elif cmd == 'removeUserFromGroup':
  if len(args) != 3:
    print 'removeUserFromGroup requires 3 args'
    sys.exit(1)
  pp.pprint(client.removeUserFromGroup(args[0],args[1],args[2],))

elif cmd == 'getAllGroups':
  if len(args) != 1:
    print 'getAllGroups requires 1 args'
    sys.exit(1)
  pp.pprint(client.getAllGroups(args[0],))

elif cmd == 'createGroup':
  if len(args) != 2:
    print 'createGroup requires 2 args'
    sys.exit(1)
  pp.pprint(client.createGroup(args[0],args[1],))

elif cmd == 'updateGroupDetailsByGroupId':
  if len(args) != 3:
    print 'updateGroupDetailsByGroupId requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateGroupDetailsByGroupId(args[0],args[1],args[2],))

elif cmd == 'getGroupPermissions':
  if len(args) != 2:
    print 'getGroupPermissions requires 2 args'
    sys.exit(1)
  pp.pprint(client.getGroupPermissions(args[0],args[1],))

elif cmd == 'updateGroupPermissionAdmin':
  if len(args) != 3:
    print 'updateGroupPermissionAdmin requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateGroupPermissionAdmin(args[0],args[1],eval(args[2]),))

elif cmd == 'updateGroupPermissionCreateSpace':
  if len(args) != 3:
    print 'updateGroupPermissionCreateSpace requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateGroupPermissionCreateSpace(args[0],args[1],eval(args[2]),))

elif cmd == 'updateGroupPermissionInviteOutsideGuests':
  if len(args) != 3:
    print 'updateGroupPermissionInviteOutsideGuests requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateGroupPermissionInviteOutsideGuests(args[0],args[1],eval(args[2]),))

elif cmd == 'updateGroupPermissionPermanentDelete':
  if len(args) != 3:
    print 'updateGroupPermissionPermanentDelete requires 3 args'
    sys.exit(1)
  pp.pprint(client.updateGroupPermissionPermanentDelete(args[0],args[1],eval(args[2]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
