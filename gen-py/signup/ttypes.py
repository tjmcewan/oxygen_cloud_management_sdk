#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class ApiSignupSessionOption:
  """
  Indicates what kind of session should be created after a successful signup operation
  """
  NO_SESSION = 0
  WEB_CLIENT_SESSION = 1

  _VALUES_TO_NAMES = {
    0: "NO_SESSION",
    1: "WEB_CLIENT_SESSION",
  }

  _NAMES_TO_VALUES = {
    "NO_SESSION": 0,
    "WEB_CLIENT_SESSION": 1,
  }


class ApiSignupInfo:
  """
  Signup info

  <dl>
   <dt><strong>Fields:</strong></dt>
   <dd>
    <dl>
     <dt><code>accountId</code> (String)</dt>
     <dd>id of account that new user belongs to</dd>

     <dt><code>userId</code> (String)</dt>
     <dd>id of new user</dd>

     <dt><code>userLoginId</code> (String)</dt>
     <dd>login id of new user</dd>

     <dt><code>tokenId</code> (String)</dt>
     <dd>id of one-time-use authentication token that has been bounded with a new active user session, if the session has been requested according to the {@link ApiSignupSessionOption} option</dd>
    </dl>
   </dd>
  </dl>

  Attributes:
   - accountId
   - userId
   - userLoginId
   - tokenId
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'accountId', None, None, ), # 1
    (2, TType.STRING, 'userId', None, None, ), # 2
    (3, TType.STRING, 'userLoginId', None, None, ), # 3
    (4, TType.STRING, 'tokenId', None, None, ), # 4
  )

  def __init__(self, accountId=None, userId=None, userLoginId=None, tokenId=None,):
    self.accountId = accountId
    self.userId = userId
    self.userLoginId = userLoginId
    self.tokenId = tokenId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.accountId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.userId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.userLoginId = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.tokenId = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ApiSignupInfo')
    if self.accountId != None:
      oprot.writeFieldBegin('accountId', TType.STRING, 1)
      oprot.writeString(self.accountId)
      oprot.writeFieldEnd()
    if self.userId != None:
      oprot.writeFieldBegin('userId', TType.STRING, 2)
      oprot.writeString(self.userId)
      oprot.writeFieldEnd()
    if self.userLoginId != None:
      oprot.writeFieldBegin('userLoginId', TType.STRING, 3)
      oprot.writeString(self.userLoginId)
      oprot.writeFieldEnd()
    if self.tokenId != None:
      oprot.writeFieldBegin('tokenId', TType.STRING, 4)
      oprot.writeString(self.tokenId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
