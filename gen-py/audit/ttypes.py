#
# Autogenerated by Thrift
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#

from thrift.Thrift import *

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None



class OxygenEventMessage:
  """
  Attributes:
   - accountOid
   - timestamp
   - version
   - action
   - severity
   - ip_address
   - device_type
   - device_id
   - user_name
   - user_email
   - user_id
   - target_id
   - target_name
   - custom
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'accountOid', None, None, ), # 1
    (2, TType.STRING, 'timestamp', None, None, ), # 2
    (3, TType.STRING, 'version', None, None, ), # 3
    (4, TType.STRING, 'action', None, None, ), # 4
    (5, TType.STRING, 'severity', None, None, ), # 5
    (6, TType.STRING, 'ip_address', None, None, ), # 6
    (7, TType.STRING, 'device_type', None, None, ), # 7
    (8, TType.STRING, 'device_id', None, None, ), # 8
    (9, TType.STRING, 'user_name', None, None, ), # 9
    (10, TType.STRING, 'user_email', None, None, ), # 10
    (11, TType.STRING, 'user_id', None, None, ), # 11
    (12, TType.STRING, 'target_id', None, None, ), # 12
    (13, TType.STRING, 'target_name', None, None, ), # 13
    (14, TType.STRING, 'custom', None, None, ), # 14
  )

  def __init__(self, accountOid=None, timestamp=None, version=None, action=None, severity=None, ip_address=None, device_type=None, device_id=None, user_name=None, user_email=None, user_id=None, target_id=None, target_name=None, custom=None,):
    self.accountOid = accountOid
    self.timestamp = timestamp
    self.version = version
    self.action = action
    self.severity = severity
    self.ip_address = ip_address
    self.device_type = device_type
    self.device_id = device_id
    self.user_name = user_name
    self.user_email = user_email
    self.user_id = user_id
    self.target_id = target_id
    self.target_name = target_name
    self.custom = custom

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.accountOid = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.timestamp = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.version = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.action = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.severity = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.ip_address = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.device_type = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.STRING:
          self.device_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.STRING:
          self.user_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.STRING:
          self.user_email = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.STRING:
          self.user_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.STRING:
          self.target_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 13:
        if ftype == TType.STRING:
          self.target_name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 14:
        if ftype == TType.STRING:
          self.custom = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('OxygenEventMessage')
    if self.accountOid != None:
      oprot.writeFieldBegin('accountOid', TType.STRING, 1)
      oprot.writeString(self.accountOid)
      oprot.writeFieldEnd()
    if self.timestamp != None:
      oprot.writeFieldBegin('timestamp', TType.STRING, 2)
      oprot.writeString(self.timestamp)
      oprot.writeFieldEnd()
    if self.version != None:
      oprot.writeFieldBegin('version', TType.STRING, 3)
      oprot.writeString(self.version)
      oprot.writeFieldEnd()
    if self.action != None:
      oprot.writeFieldBegin('action', TType.STRING, 4)
      oprot.writeString(self.action)
      oprot.writeFieldEnd()
    if self.severity != None:
      oprot.writeFieldBegin('severity', TType.STRING, 5)
      oprot.writeString(self.severity)
      oprot.writeFieldEnd()
    if self.ip_address != None:
      oprot.writeFieldBegin('ip_address', TType.STRING, 6)
      oprot.writeString(self.ip_address)
      oprot.writeFieldEnd()
    if self.device_type != None:
      oprot.writeFieldBegin('device_type', TType.STRING, 7)
      oprot.writeString(self.device_type)
      oprot.writeFieldEnd()
    if self.device_id != None:
      oprot.writeFieldBegin('device_id', TType.STRING, 8)
      oprot.writeString(self.device_id)
      oprot.writeFieldEnd()
    if self.user_name != None:
      oprot.writeFieldBegin('user_name', TType.STRING, 9)
      oprot.writeString(self.user_name)
      oprot.writeFieldEnd()
    if self.user_email != None:
      oprot.writeFieldBegin('user_email', TType.STRING, 10)
      oprot.writeString(self.user_email)
      oprot.writeFieldEnd()
    if self.user_id != None:
      oprot.writeFieldBegin('user_id', TType.STRING, 11)
      oprot.writeString(self.user_id)
      oprot.writeFieldEnd()
    if self.target_id != None:
      oprot.writeFieldBegin('target_id', TType.STRING, 12)
      oprot.writeString(self.target_id)
      oprot.writeFieldEnd()
    if self.target_name != None:
      oprot.writeFieldBegin('target_name', TType.STRING, 13)
      oprot.writeString(self.target_name)
      oprot.writeFieldEnd()
    if self.custom != None:
      oprot.writeFieldBegin('custom', TType.STRING, 14)
      oprot.writeString(self.custom)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()
    def validate(self):
      return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
